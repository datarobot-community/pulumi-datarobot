{
  "name": "datarobot",
  "displayName": "DataRobot",
  "description": "A Pulumi package for creating and managing DataRobot resources.",
  "keywords": [
    "datarobot",
    "ai",
    "category/cloud"
  ],
  "homepage": "https://www.datarobot.com",
  "license": "Apache-2.0",
  "attribution": "This Pulumi package is based on the [`datarobot` Terraform Provider](https://github.com/datarobot-community/terraform-provider-datarobot).",
  "repository": "https://github.com/datarobot-community/pulumi-datarobot",
  "logoUrl": "https://raw.githubusercontent.com/datarobot-community/pulumi-datarobot/main/assets/datarobot-logo.png",
  "pluginDownloadURL": "github://api.github.com/datarobot-community/pulumi-datarobot",
  "publisher": "DataRobot, Inc.",
  "meta": {
    "moduleFormat": "(.*)(?:/[^/]*)"
  },
  "language": {
    "csharp": {
      "packageReferences": {
        "Pulumi": "3.*"
      },
      "compatibility": "tfbridge20",
      "rootNamespace": "DataRobotPulumi",
      "packageReadmeFile": "README.md"
    },
    "go": {
      "importBasePath": "github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot",
      "generateResourceContainerTypes": true,
      "generateExtraInputTypes": true
    },
    "nodejs": {
      "packageName": "@datarobot/pulumi-datarobot",
      "packageDescription": "A Pulumi package for creating and managing DataRobot resources.",
      "readme": "README.md",
      "dependencies": {
        "@pulumi/pulumi": "^3.0.0"
      },
      "devDependencies": {
        "@types/mime": "^2.0.0",
        "@types/node": "^10.0.0"
      },
      "compatibility": "tfbridge20",
      "disableUnionOutputTypes": true
    },
    "python": {
      "requires": {
        "pulumi": ">=3.0.0,<4.0.0"
      },
      "readme": "README.md",
      "compatibility": "tfbridge20",
      "pyproject": {}
    }
  },
  "config": {
    "variables": {
      "apikey": {
        "type": "string",
        "description": "Key to access DataRobot API\n",
        "secret": true
      },
      "endpoint": {
        "type": "string",
        "description": "Endpoint for the DataRobot API\n",
        "secret": true
      },
      "tracecontext": {
        "type": "string",
        "description": "DataRobot trace context\n",
        "secret": true
      }
    }
  },
  "types": {
    "datarobot:index/ApplicationSourceFromTemplateResources:ApplicationSourceFromTemplateResources": {
      "properties": {
        "replicas": {
          "type": "integer",
          "description": "The replicas for the Application Source.\n"
        },
        "resourceLabel": {
          "type": "string",
          "description": "The resource label for the Application Source.\n"
        },
        "serviceWebRequestsOnRootPath": {
          "type": "boolean",
          "description": "Whether to service web requests on the root path for the Application Source.\n"
        },
        "sessionAffinity": {
          "type": "boolean",
          "description": "The session affinity for the Application Source.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "replicas",
            "resourceLabel",
            "serviceWebRequestsOnRootPath",
            "sessionAffinity"
          ]
        }
      }
    },
    "datarobot:index/ApplicationSourceFromTemplateRuntimeParameterValue:ApplicationSourceFromTemplateRuntimeParameterValue": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the runtime parameter.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the runtime parameter.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the runtime parameter (type conversion is handled internally).\n"
        }
      },
      "type": "object",
      "required": [
        "key",
        "type",
        "value"
      ]
    },
    "datarobot:index/ApplicationSourceResources:ApplicationSourceResources": {
      "properties": {
        "replicas": {
          "type": "integer",
          "description": "The replicas for the Application Source.\n"
        },
        "resourceLabel": {
          "type": "string",
          "description": "The resource label for the Application Source.\n"
        },
        "serviceWebRequestsOnRootPath": {
          "type": "boolean",
          "description": "Whether to service web requests on the root path for the Application Source.\n"
        },
        "sessionAffinity": {
          "type": "boolean",
          "description": "The session affinity for the Application Source.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "replicas",
            "resourceLabel",
            "serviceWebRequestsOnRootPath",
            "sessionAffinity"
          ]
        }
      }
    },
    "datarobot:index/ApplicationSourceRuntimeParameterValue:ApplicationSourceRuntimeParameterValue": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the runtime parameter.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the runtime parameter.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the runtime parameter (type conversion is handled internally).\n"
        }
      },
      "type": "object",
      "required": [
        "key",
        "type",
        "value"
      ]
    },
    "datarobot:index/BatchPredictionJobDefinitionCsvSettings:BatchPredictionJobDefinitionCsvSettings": {
      "properties": {
        "delimiter": {
          "type": "string",
          "description": "Fields are delimited by this character. Use the string tab to denote TSV (TAB separated values). Must be either a one-character string or the string tab.\n"
        },
        "encoding": {
          "type": "string",
          "description": "Encoding for the CSV files.\n"
        },
        "quotechar": {
          "type": "string",
          "description": "Fields containing the delimiter must be quoted using this character.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "delimiter",
            "encoding",
            "quotechar"
          ]
        }
      }
    },
    "datarobot:index/BatchPredictionJobDefinitionIntakeSettings:BatchPredictionJobDefinitionIntakeSettings": {
      "properties": {
        "catalog": {
          "type": "string",
          "description": "The name of specified database catalog for JDBC type.\n"
        },
        "credentialId": {
          "type": "string",
          "description": "The ID of the credentials for S3 or JDBC data source.\n"
        },
        "dataStoreId": {
          "type": "string",
          "description": "The ID of the external data store connected to the JDBC data source.\n"
        },
        "datasetId": {
          "type": "string",
          "description": "The ID of the dataset to score for dataset type.\n"
        },
        "endpointUrl": {
          "type": "string",
          "description": "Any non-default endpoint URL for S3 access.\n"
        },
        "fetchSize": {
          "type": "integer",
          "description": "Changing the fetchSize can be used to balance throughput and memory usage for JDBC type.\n"
        },
        "file": {
          "type": "string",
          "description": "String path to file of scoring data for localFile type.\n"
        },
        "query": {
          "type": "string",
          "description": "A self-supplied SELECT statement of the data set you wish to predict for JDBC type.\n"
        },
        "schema": {
          "type": "string",
          "description": "The name of specified database schema for JDBC type.\n"
        },
        "table": {
          "type": "string",
          "description": "The name of specified database table for JDBC type.\n"
        },
        "type": {
          "type": "string",
          "description": "Type of data source.\n"
        },
        "url": {
          "type": "string",
          "description": "The URL to score (e.g.: s3://bucket/key) for S3 type.\n"
        }
      },
      "type": "object",
      "required": [
        "type"
      ]
    },
    "datarobot:index/BatchPredictionJobDefinitionOutputSettings:BatchPredictionJobDefinitionOutputSettings": {
      "properties": {
        "catalog": {
          "type": "string",
          "description": "The name of specified database catalog for JDBC type.\n"
        },
        "createTableIfNotExists": {
          "type": "boolean",
          "description": "If no existing table is detected, attempt to create it before writing data for JDBC type.\n"
        },
        "credentialId": {
          "type": "string",
          "description": "The ID of the credentials for S3 or JDBC data source.\n"
        },
        "dataStoreId": {
          "type": "string",
          "description": "The ID of the external data store connected to the JDBC data source.\n"
        },
        "endpointUrl": {
          "type": "string",
          "description": "Any non-default endpoint URL for S3 access.\n"
        },
        "path": {
          "type": "string",
          "description": "Path to save the scored data as CSV for localFile type.\n"
        },
        "schema": {
          "type": "string",
          "description": "The name of specified database schema for JDBC type.\n"
        },
        "statementType": {
          "type": "string",
          "description": "The type of insertion statement to create for JDBC type.\n"
        },
        "table": {
          "type": "string",
          "description": "The name of specified database table for JDBC type.\n"
        },
        "type": {
          "type": "string",
          "description": "Type of output.\n"
        },
        "updateColumns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of strings containing those column names to be updated for JDBC type.\n"
        },
        "url": {
          "type": "string",
          "description": "The URL for storing the results (e.g.: s3://bucket/key) for S3 type.\n"
        },
        "whereColumns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of strings containing those column names to be selected for JDBC type.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "type"
          ]
        }
      }
    },
    "datarobot:index/BatchPredictionJobDefinitionPredictionInstance:BatchPredictionJobDefinitionPredictionInstance": {
      "properties": {
        "apiKey": {
          "type": "string",
          "description": "By default, prediction requests will use the API key of the user that created the job. This allows you to make requests on behalf of other users.\n"
        },
        "datarobotKey": {
          "type": "string",
          "description": "If running a job against a prediction instance in the Managed AI Cloud, you must provide the organization level DataRobot-Key.\n"
        },
        "hostName": {
          "type": "string",
          "description": "Hostname of the prediction instance.\n"
        },
        "sslEnabled": {
          "type": "boolean",
          "description": "Set to false to run prediction requests from the batch prediction job without SSL. Defaults to true.\n"
        }
      },
      "type": "object",
      "required": [
        "hostName"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "hostName",
            "sslEnabled"
          ]
        }
      }
    },
    "datarobot:index/BatchPredictionJobDefinitionSchedule:BatchPredictionJobDefinitionSchedule": {
      "properties": {
        "dayOfMonths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the month when the job will run.\n"
        },
        "dayOfWeeks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the week when the job will run.\n"
        },
        "hours": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Hours of the day when the job will run.\n"
        },
        "minutes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Minutes of the day when the job will run.\n"
        },
        "months": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Months of the year when the job will run.\n"
        }
      },
      "type": "object",
      "required": [
        "dayOfMonths",
        "dayOfWeeks",
        "hours",
        "minutes",
        "months"
      ]
    },
    "datarobot:index/BatchPredictionJobDefinitionTimeseriesSettings:BatchPredictionJobDefinitionTimeseriesSettings": {
      "properties": {
        "forecastPoint": {
          "type": "string",
          "description": "Forecast point for the dataset, used for the forecast predictions. May be passed if timeseries_settings.type=forecast.\n"
        },
        "predictionsEndDate": {
          "type": "string",
          "description": "End date for historical predictions. May be passed if timeseries_settings.type=historical.\n"
        },
        "predictionsStartDate": {
          "type": "string",
          "description": "Start date for historical predictions. May be passed if timeseries_settings.type=historical.\n"
        },
        "relaxKnownInAdvanceFeaturesCheck": {
          "type": "boolean",
          "description": "If True, missing values in the known in advance features are allowed in the forecast window at the prediction time. Default is False.\n"
        },
        "type": {
          "type": "string",
          "description": "Type of time-series prediction. Must be 'forecast' or 'historical'. Default is 'forecast'.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "relaxKnownInAdvanceFeaturesCheck"
          ]
        }
      }
    },
    "datarobot:index/CustomApplicationFromEnvironmentResources:CustomApplicationFromEnvironmentResources": {
      "properties": {
        "replicas": {
          "type": "integer",
          "description": "The number of replicas for the Custom Application.\n"
        },
        "resourceLabel": {
          "type": "string",
          "description": "The resource label for the Custom Application.\n"
        },
        "serviceWebRequestsOnRootPath": {
          "type": "boolean",
          "description": "Whether to service web requests on the root path for the Custom Application.\n"
        },
        "sessionAffinity": {
          "type": "boolean",
          "description": "Whether session affinity is enabled for the Custom Application.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomApplicationResources:CustomApplicationResources": {
      "properties": {
        "replicas": {
          "type": "integer",
          "description": "The number of replicas for the Custom Application.\n"
        },
        "resourceLabel": {
          "type": "string",
          "description": "The resource label for the Custom Application.\n"
        },
        "serviceWebRequestsOnRootPath": {
          "type": "boolean",
          "description": "Whether to service web requests on the root path for the Custom Application.\n"
        },
        "sessionAffinity": {
          "type": "boolean",
          "description": "Whether session affinity is enabled for the Custom Application.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomJobRuntimeParameterValue:CustomJobRuntimeParameterValue": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the runtime parameter.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the runtime parameter.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the runtime parameter (type conversion is handled internally).\n"
        }
      },
      "type": "object",
      "required": [
        "key",
        "type",
        "value"
      ]
    },
    "datarobot:index/CustomJobSchedule:CustomJobSchedule": {
      "properties": {
        "dayOfMonths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the month when the job will run.\n"
        },
        "dayOfWeeks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the week when the job will run.\n"
        },
        "hours": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Hours of the day when the job will run.\n"
        },
        "minutes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Minutes of the day when the job will run.\n"
        },
        "months": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Months of the year when the job will run.\n"
        }
      },
      "type": "object",
      "required": [
        "dayOfMonths",
        "dayOfWeeks",
        "hours",
        "minutes",
        "months"
      ]
    },
    "datarobot:index/CustomMetricBatch:CustomMetricBatch": {
      "properties": {
        "columnName": {
          "type": "string",
          "description": "Column name.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomMetricFromJobBatch:CustomMetricFromJobBatch": {
      "properties": {
        "columnName": {
          "type": "string",
          "description": "Column name.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomMetricFromJobParameterOverride:CustomMetricFromJobParameterOverride": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the runtime parameter.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the runtime parameter.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the runtime parameter (type conversion is handled internally).\n"
        }
      },
      "type": "object",
      "required": [
        "key",
        "type",
        "value"
      ]
    },
    "datarobot:index/CustomMetricFromJobSampleCount:CustomMetricFromJobSampleCount": {
      "properties": {
        "columnName": {
          "type": "string",
          "description": "Column name.\n"
        }
      },
      "type": "object",
      "required": [
        "columnName"
      ]
    },
    "datarobot:index/CustomMetricFromJobSchedule:CustomMetricFromJobSchedule": {
      "properties": {
        "dayOfMonths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the month when the metric job will run.\n"
        },
        "dayOfWeeks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the week when the metric job will run.\n"
        },
        "hours": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Hours of the day when the metric job will run.\n"
        },
        "minutes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Minutes of the day when the metric job will run.\n"
        },
        "months": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Months of the year when the metric job will run.\n"
        }
      },
      "type": "object",
      "required": [
        "dayOfMonths",
        "dayOfWeeks",
        "hours",
        "minutes",
        "months"
      ]
    },
    "datarobot:index/CustomMetricFromJobTimestamp:CustomMetricFromJobTimestamp": {
      "properties": {
        "columnName": {
          "type": "string",
          "description": "Column name.\n"
        },
        "timeFormat": {
          "type": "string",
          "description": "Format.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomMetricFromJobValue:CustomMetricFromJobValue": {
      "properties": {
        "columnName": {
          "type": "string",
          "description": "Column name.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomMetricJobRuntimeParameterValue:CustomMetricJobRuntimeParameterValue": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the runtime parameter.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the runtime parameter.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the runtime parameter (type conversion is handled internally).\n"
        }
      },
      "type": "object",
      "required": [
        "key",
        "type",
        "value"
      ]
    },
    "datarobot:index/CustomMetricSampleCount:CustomMetricSampleCount": {
      "properties": {
        "columnName": {
          "type": "string",
          "description": "Column name.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomMetricTimestamp:CustomMetricTimestamp": {
      "properties": {
        "columnName": {
          "type": "string",
          "description": "Column name.\n"
        },
        "timeFormat": {
          "type": "string",
          "description": "Format.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomMetricValue:CustomMetricValue": {
      "properties": {
        "columnName": {
          "type": "string",
          "description": "Column name.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomModelGuardConfiguration:CustomModelGuardConfiguration": {
      "properties": {
        "additionalGuardConfig": {
          "$ref": "#/types/datarobot:index/CustomModelGuardConfigurationAdditionalGuardConfig:CustomModelGuardConfigurationAdditionalGuardConfig",
          "description": "Additional guard configuration\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The deployment ID of this guard.\n"
        },
        "inputColumnName": {
          "type": "string",
          "description": "The input column name of this guard.\n"
        },
        "intervention": {
          "$ref": "#/types/datarobot:index/CustomModelGuardConfigurationIntervention:CustomModelGuardConfigurationIntervention",
          "description": "The intervention for the guard configuration.\n"
        },
        "llmType": {
          "type": "string",
          "description": "The LLM type for this guard.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the guard configuration.\n"
        },
        "nemoInfo": {
          "$ref": "#/types/datarobot:index/CustomModelGuardConfigurationNemoInfo:CustomModelGuardConfigurationNemoInfo",
          "description": "Configuration info for NeMo guards.\n"
        },
        "openaiApiBase": {
          "type": "string",
          "description": "The OpenAI API base URL for this guard.\n"
        },
        "openaiCredential": {
          "type": "string",
          "description": "The ID of an OpenAI credential for this guard.\n"
        },
        "openaiDeploymentId": {
          "type": "string",
          "description": "The ID of an OpenAI deployment for this guard.\n"
        },
        "outputColumnName": {
          "type": "string",
          "description": "The output column name of this guard.\n"
        },
        "stages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of stages for the guard configuration.\n"
        },
        "templateName": {
          "type": "string",
          "description": "The template name of the guard configuration.\n"
        }
      },
      "type": "object",
      "required": [
        "intervention",
        "name",
        "stages",
        "templateName"
      ]
    },
    "datarobot:index/CustomModelGuardConfigurationAdditionalGuardConfig:CustomModelGuardConfigurationAdditionalGuardConfig": {
      "properties": {
        "cost": {
          "$ref": "#/types/datarobot:index/CustomModelGuardConfigurationAdditionalGuardConfigCost:CustomModelGuardConfigurationAdditionalGuardConfigCost",
          "description": "Cost metric configuration\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomModelGuardConfigurationAdditionalGuardConfigCost:CustomModelGuardConfigurationAdditionalGuardConfigCost": {
      "properties": {
        "currency": {
          "type": "string",
          "description": "Currency for cost calculation (USD)\n"
        },
        "inputPrice": {
          "type": "number",
          "description": "LLM Price for input_unit tokens\n"
        },
        "inputUnit": {
          "type": "integer",
          "description": "No of input tokens for given price\n"
        },
        "outputPrice": {
          "type": "number",
          "description": "LLM Price for output_unit tokens\n"
        },
        "outputUnit": {
          "type": "integer",
          "description": "No of output tokens for given price\n"
        }
      },
      "type": "object",
      "required": [
        "currency",
        "inputPrice",
        "inputUnit",
        "outputPrice",
        "outputUnit"
      ]
    },
    "datarobot:index/CustomModelGuardConfigurationIntervention:CustomModelGuardConfigurationIntervention": {
      "properties": {
        "action": {
          "type": "string",
          "description": "The action of the guard intervention.\n"
        },
        "condition": {
          "type": "string",
          "description": "The JSON-encoded condition of the guard intervention. e.g. `{\"comparand\": 0.5, \"comparator\": \"lessThan\"}`\n"
        },
        "message": {
          "type": "string",
          "description": "The message of the guard intervention.\n"
        }
      },
      "type": "object",
      "required": [
        "action",
        "condition"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "action",
            "condition",
            "message"
          ]
        }
      }
    },
    "datarobot:index/CustomModelGuardConfigurationNemoInfo:CustomModelGuardConfigurationNemoInfo": {
      "properties": {
        "actions": {
          "type": "string",
          "description": "The actions for the NeMo information.\n"
        },
        "blockedTerms": {
          "type": "string",
          "description": "NeMo guardrails blocked terms list.\n"
        },
        "llmPrompts": {
          "type": "string",
          "description": "NeMo guardrails prompts.\n"
        },
        "mainConfig": {
          "type": "string",
          "description": "Overall NeMo configuration YAML.\n"
        },
        "railsConfig": {
          "type": "string",
          "description": "NeMo guardrails configuration Colang.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/CustomModelOverallModerationConfiguration:CustomModelOverallModerationConfiguration": {
      "properties": {
        "timeoutAction": {
          "type": "string",
          "description": "The timeout action of the overall moderation configuration.\n"
        },
        "timeoutSec": {
          "type": "integer",
          "description": "The timeout in seconds of the overall moderation configuration.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "timeoutAction",
            "timeoutSec"
          ]
        }
      }
    },
    "datarobot:index/CustomModelRuntimeParameterValue:CustomModelRuntimeParameterValue": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the runtime parameter.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the runtime parameter.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the runtime parameter (type conversion is handled internally).\n"
        }
      },
      "type": "object",
      "required": [
        "key",
        "type",
        "value"
      ]
    },
    "datarobot:index/CustomModelSourceRemoteRepository:CustomModelSourceRemoteRepository": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the source remote repository.\n"
        },
        "ref": {
          "type": "string",
          "description": "The reference of the source remote repository.\n"
        },
        "sourcePaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of source paths in the source remote repository.\n"
        }
      },
      "type": "object",
      "required": [
        "id",
        "ref",
        "sourcePaths"
      ]
    },
    "datarobot:index/DatasourceParams:DatasourceParams": {
      "properties": {
        "catalog": {
          "type": "string",
          "description": "The Catalog name in the database if supported.\n"
        },
        "dataStoreId": {
          "type": "string",
          "description": "The id of the DataStore.\n"
        },
        "fetchSize": {
          "type": "integer",
          "description": "A user specified fetch size in the range [1, 20000]. By default a fetchSize will be assigned to balance throughput and memory usage.\n"
        },
        "partitionColumn": {
          "type": "string",
          "description": "The name of the partition column.\n"
        },
        "path": {
          "type": "string",
          "description": "The user-specified path for BLOB storage.\n"
        },
        "query": {
          "type": "string",
          "description": "The user specified SQL query.\n"
        },
        "schema": {
          "type": "string",
          "description": "The name of the schema associated with the table.\n"
        },
        "table": {
          "type": "string",
          "description": "The name of specified database table.\n"
        }
      },
      "type": "object",
      "required": [
        "dataStoreId"
      ]
    },
    "datarobot:index/DeploymentAssociationIdSettings:DeploymentAssociationIdSettings": {
      "properties": {
        "autoGenerateId": {
          "type": "boolean",
          "description": "Whether to auto generate ID.\n"
        },
        "columnNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name of the columns to be used as association ID, currently only support a list of one string.\n"
        },
        "requiredInPredictionRequests": {
          "type": "boolean",
          "description": "Whether the association ID column is required in prediction requests.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentBatchMonitoringSettings:DeploymentBatchMonitoringSettings": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "If batch monitoring is enabled.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentBiasAndFairnessSettings:DeploymentBiasAndFairnessSettings": {
      "properties": {
        "fairnessMetricSet": {
          "type": "string",
          "description": "A set of fairness metrics to use for calculating fairness.\n"
        },
        "fairnessThreshold": {
          "type": "number",
          "description": "Threshold value of the fairness metric. Cannot be less than 0 or greater than 1.\n"
        },
        "preferableTargetValue": {
          "type": "boolean",
          "description": "A target value that should be treated as a positive outcome for the prediction.\n"
        },
        "protectedFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of features to mark as protected.\n"
        }
      },
      "type": "object",
      "required": [
        "fairnessMetricSet",
        "fairnessThreshold",
        "preferableTargetValue",
        "protectedFeatures"
      ]
    },
    "datarobot:index/DeploymentChallengerModelsSettings:DeploymentChallengerModelsSettings": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Is 'True' if challenger models is enabled for this deployment.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentChallengerReplaySettings:DeploymentChallengerReplaySettings": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "If challenger replay is enabled.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentDriftTrackingSettings:DeploymentDriftTrackingSettings": {
      "properties": {
        "featureDriftEnabled": {
          "type": "boolean",
          "description": "If feature drift tracking is to be turned on.\n"
        },
        "featureSelection": {
          "type": "string",
          "description": "The feature selection method to be used for drift tracking.\n"
        },
        "targetDriftEnabled": {
          "type": "boolean",
          "description": "If target drift tracking is to be turned on.\n"
        },
        "trackedFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of features to be tracked for drift.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentFeatureCacheSettings:DeploymentFeatureCacheSettings": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "If feature cache is enabled for this Deployment.\n"
        },
        "fetching": {
          "type": "boolean",
          "description": "If feature cache fetching is enabled.\n"
        },
        "schedule": {
          "$ref": "#/types/datarobot:index/DeploymentFeatureCacheSettingsSchedule:DeploymentFeatureCacheSettingsSchedule",
          "description": "Defines the feature cache schedule.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentFeatureCacheSettingsSchedule:DeploymentFeatureCacheSettingsSchedule": {
      "properties": {
        "dayOfMonths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the month.\n"
        },
        "dayOfWeeks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the week.\n"
        },
        "hours": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Hours of the day.\n"
        },
        "minutes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Minutes of the day.\n"
        },
        "months": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Months of the year.\n"
        }
      },
      "type": "object",
      "required": [
        "dayOfMonths",
        "dayOfWeeks",
        "hours",
        "minutes",
        "months"
      ]
    },
    "datarobot:index/DeploymentHealthSettings:DeploymentHealthSettings": {
      "properties": {
        "accuracy": {
          "$ref": "#/types/datarobot:index/DeploymentHealthSettingsAccuracy:DeploymentHealthSettingsAccuracy",
          "description": "The accuracy health settings for this Deployment.\n"
        },
        "actualsTimeliness": {
          "$ref": "#/types/datarobot:index/DeploymentHealthSettingsActualsTimeliness:DeploymentHealthSettingsActualsTimeliness",
          "description": "The actuals timeliness health settings for this Deployment.\n"
        },
        "customMetrics": {
          "$ref": "#/types/datarobot:index/DeploymentHealthSettingsCustomMetrics:DeploymentHealthSettingsCustomMetrics",
          "description": "The custom metrics health settings for this Deployment.\n"
        },
        "dataDrift": {
          "$ref": "#/types/datarobot:index/DeploymentHealthSettingsDataDrift:DeploymentHealthSettingsDataDrift",
          "description": "The data drift health settings for this Deployment.\n"
        },
        "fairness": {
          "$ref": "#/types/datarobot:index/DeploymentHealthSettingsFairness:DeploymentHealthSettingsFairness",
          "description": "The fairness health settings for this Deployment.\n"
        },
        "predictionsTimeliness": {
          "$ref": "#/types/datarobot:index/DeploymentHealthSettingsPredictionsTimeliness:DeploymentHealthSettingsPredictionsTimeliness",
          "description": "The predictions timeliness health settings for this Deployment.\n"
        },
        "service": {
          "$ref": "#/types/datarobot:index/DeploymentHealthSettingsService:DeploymentHealthSettingsService",
          "description": "The service health settings for this Deployment.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentHealthSettingsAccuracy:DeploymentHealthSettingsAccuracy": {
      "properties": {
        "batchCount": {
          "type": "integer",
          "description": "The batch count for the accuracy health settings.\n"
        },
        "failingThreshold": {
          "type": "number",
          "description": "The failing threshold for the accuracy health settings.\n"
        },
        "measurement": {
          "type": "string",
          "description": "The measurement for the accuracy health settings.\n"
        },
        "metric": {
          "type": "string",
          "description": "The metric for the accuracy health settings.\n"
        },
        "warningThreshold": {
          "type": "number",
          "description": "The warning threshold for the accuracy health settings.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentHealthSettingsActualsTimeliness:DeploymentHealthSettingsActualsTimeliness": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "If acutals timeliness is enabled for this Deployment.\n"
        },
        "expectedFrequency": {
          "type": "string",
          "description": "The expected frequency for the actuals timeliness health settings.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentHealthSettingsCustomMetrics:DeploymentHealthSettingsCustomMetrics": {
      "properties": {
        "failingConditions": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/DeploymentHealthSettingsCustomMetricsFailingCondition:DeploymentHealthSettingsCustomMetricsFailingCondition"
          },
          "description": "The failing conditions for the custom metrics health settings.\n"
        },
        "warningConditions": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/DeploymentHealthSettingsCustomMetricsWarningCondition:DeploymentHealthSettingsCustomMetricsWarningCondition"
          },
          "description": "The warning conditions for the custom metrics health settings.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentHealthSettingsCustomMetricsFailingCondition:DeploymentHealthSettingsCustomMetricsFailingCondition": {
      "properties": {
        "compareOperator": {
          "type": "string",
          "description": "The compare operator for the failing condition of the custom metrics health settings.\n"
        },
        "metricId": {
          "type": "string",
          "description": "The metric ID for the failing condition of the custom metrics health settings.\n"
        },
        "threshold": {
          "type": "number",
          "description": "The threshold for the failing condition of the custom metrics health settings.\n"
        }
      },
      "type": "object",
      "required": [
        "compareOperator",
        "metricId",
        "threshold"
      ]
    },
    "datarobot:index/DeploymentHealthSettingsCustomMetricsWarningCondition:DeploymentHealthSettingsCustomMetricsWarningCondition": {
      "properties": {
        "compareOperator": {
          "type": "string",
          "description": "The compare operator for the warning condition of the custom metrics health settings.\n"
        },
        "metricId": {
          "type": "string",
          "description": "The metric ID for the warning condition of the custom metrics health settings.\n"
        },
        "threshold": {
          "type": "number",
          "description": "The threshold for the warning condition of the custom metrics health settings.\n"
        }
      },
      "type": "object",
      "required": [
        "compareOperator",
        "metricId",
        "threshold"
      ]
    },
    "datarobot:index/DeploymentHealthSettingsDataDrift:DeploymentHealthSettingsDataDrift": {
      "properties": {
        "batchCount": {
          "type": "integer",
          "description": "The batch count for the data drift health settings.\n"
        },
        "driftThreshold": {
          "type": "number",
          "description": "The drift threshold for the data drift health settings.\n"
        },
        "excludeFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The exclude features for the data drift health settings.\n"
        },
        "highImportanceFailingCount": {
          "type": "integer",
          "description": "The high importance failing count for the data drift health settings.\n"
        },
        "highImportanceWarningCount": {
          "type": "integer",
          "description": "The high importance warning count for the data drift health settings.\n"
        },
        "importanceThreshold": {
          "type": "number",
          "description": "The importance threshold for the data drift health settings.\n"
        },
        "lowImportanceFailingCount": {
          "type": "integer",
          "description": "The low importance failing count for the data drift health settings.\n"
        },
        "lowImportanceWarningCount": {
          "type": "integer",
          "description": "The low importance warning count for the data drift health settings.\n"
        },
        "starredFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The starred features for the data drift health settings.\n"
        },
        "timeInterval": {
          "type": "string",
          "description": "The time interval for the data drift health settings.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentHealthSettingsFairness:DeploymentHealthSettingsFairness": {
      "properties": {
        "protectedClassFailingCount": {
          "type": "integer",
          "description": "The protected class failing count for the fairness health settings.\n"
        },
        "protectedClassWarningCount": {
          "type": "integer",
          "description": "The protected class warning count for the fairness health settings.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentHealthSettingsPredictionsTimeliness:DeploymentHealthSettingsPredictionsTimeliness": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "If predictions timeliness is enabled for this Deployment.\n"
        },
        "expectedFrequency": {
          "type": "string",
          "description": "The expected frequency for the predictions timeliness health settings.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentHealthSettingsService:DeploymentHealthSettingsService": {
      "properties": {
        "batchCount": {
          "type": "integer",
          "description": "The batch count for the service health settings.\n"
        }
      },
      "type": "object",
      "required": [
        "batchCount"
      ]
    },
    "datarobot:index/DeploymentPredictionIntervalsSettings:DeploymentPredictionIntervalsSettings": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether prediction intervals are enabled for this deployment.\n"
        },
        "percentiles": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "List of enabled prediction intervals’ sizes for this deployment.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentPredictionWarningSettings:DeploymentPredictionWarningSettings": {
      "properties": {
        "customBoundaries": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionWarningSettingsCustomBoundaries:DeploymentPredictionWarningSettingsCustomBoundaries",
          "description": "The custom boundaries for prediction warnings.\n"
        },
        "enabled": {
          "type": "boolean",
          "description": "If target prediction warning is enabled for this Deployment.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentPredictionWarningSettingsCustomBoundaries:DeploymentPredictionWarningSettingsCustomBoundaries": {
      "properties": {
        "lowerBoundary": {
          "type": "number",
          "description": "All predictions less than provided value will be considered anomalous.\n"
        },
        "upperBoundary": {
          "type": "number",
          "description": "All predictions greater than provided value will be considered anomalous.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentPredictionsByForecastDateSettings:DeploymentPredictionsByForecastDateSettings": {
      "properties": {
        "columnName": {
          "type": "string",
          "description": "The column name in prediction datasets to be used as forecast date.\n"
        },
        "datetimeFormat": {
          "type": "string",
          "description": "The datetime format of the forecast date column in prediction datasets.\n"
        },
        "enabled": {
          "type": "boolean",
          "description": "Is ’True’ if predictions by forecast date is enabled for this deployment.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentPredictionsDataCollectionSettings:DeploymentPredictionsDataCollectionSettings": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "If predictions data collections is enabled for this Deployment.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/DeploymentPredictionsSettings:DeploymentPredictionsSettings": {
      "properties": {
        "maxComputes": {
          "type": "integer",
          "description": "The maximum number of computes to use for predictions.\n"
        },
        "minComputes": {
          "type": "integer",
          "description": "The minimum number of computes to use for predictions.\n"
        },
        "resourceBundleId": {
          "type": "string",
          "description": "The resource bundle ID to use for predictions.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentRetrainingPolicyAutopilotOptions:DeploymentRetrainingPolicyAutopilotOptions": {
      "properties": {
        "blendBestModels": {
          "type": "boolean",
          "description": "Blend best models during Autopilot run. This option is not supported in SHAP-only mode.\n"
        },
        "mode": {
          "type": "string",
          "description": "The autopiltot mode.\n"
        },
        "runLeakageRemovedFeatureList": {
          "type": "boolean",
          "description": "Run Autopilot on Leakage Removed feature list (if exists).\n"
        },
        "scoringCodeOnly": {
          "type": "boolean",
          "description": "Keep only models that can be converted to scorable java code during Autopilot run.\n"
        },
        "shapOnlyMode": {
          "type": "boolean",
          "description": "Include only models with SHAP value support.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "blendBestModels",
            "mode",
            "runLeakageRemovedFeatureList",
            "scoringCodeOnly",
            "shapOnlyMode"
          ]
        }
      }
    },
    "datarobot:index/DeploymentRetrainingPolicyProjectOptions:DeploymentRetrainingPolicyProjectOptions": {
      "properties": {
        "cvMethod": {
          "type": "string",
          "description": "The partitioning method for projects used to build new models.\n"
        },
        "holdoutPct": {
          "type": "number",
          "description": "The percentage of dataset to assign to holdout set in projects used to build new models.\n"
        },
        "metric": {
          "type": "string",
          "description": "The model selection metric in projects used to build new models.\n"
        },
        "reps": {
          "type": "number",
          "description": "The number of cross validation folds to use for projects used to build new models.\n"
        },
        "validationPct": {
          "type": "number",
          "description": "The percentage of dataset to assign to validation set in projects used to build new models.\n"
        },
        "validationType": {
          "type": "string",
          "description": "The validation type for projects used to build new models.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "cvMethod",
            "holdoutPct",
            "reps",
            "validationType"
          ]
        }
      }
    },
    "datarobot:index/DeploymentRetrainingPolicyTimeSeriesOptions:DeploymentRetrainingPolicyTimeSeriesOptions": {
      "properties": {
        "calendarId": {
          "type": "string",
          "description": "The ID of the calendar to be used in this project.\n"
        },
        "differencingMethod": {
          "type": "string",
          "description": "For time series projects only. Used to specify which differencing method to apply if the data is stationary. For classification problems simple and seasonal are not allowed. Parameter periodicities must be specified if seasonal is chosen. Defaults to auto.\n"
        },
        "exponentiallyWeightedMovingAlpha": {
          "type": "number",
          "description": "Discount factor (alpha) used for exponentially weighted moving features.\n"
        },
        "periodicities": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyTimeSeriesOptionsPeriodicity:DeploymentRetrainingPolicyTimeSeriesOptionsPeriodicity"
          },
          "description": "A list of periodicities for time series projects only. For classification problems periodicities are not allowed. If this is provided, parameter 'differencing*method' will default to 'seasonal' if not provided or 'auto'.\n"
        },
        "treatAsExponential": {
          "type": "string",
          "description": "For time series projects only. Used to specify whether to treat data as exponential trend and apply transformations like log-transform. For classification problems always is not allowed. Defaults to auto.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentRetrainingPolicyTimeSeriesOptionsPeriodicity:DeploymentRetrainingPolicyTimeSeriesOptionsPeriodicity": {
      "properties": {
        "timeSteps": {
          "type": "integer",
          "description": "The number of time steps.\n"
        },
        "timeUnit": {
          "type": "string",
          "description": "The time unit or ROW if windowsBasisUnit is ROW\n"
        }
      },
      "type": "object",
      "required": [
        "timeSteps",
        "timeUnit"
      ]
    },
    "datarobot:index/DeploymentRetrainingPolicyTrigger:DeploymentRetrainingPolicyTrigger": {
      "properties": {
        "customJobId": {
          "type": "string",
          "description": "Custom job ID for the retraining policy.\n"
        },
        "minIntervalBetweenRuns": {
          "type": "string",
          "description": "Minimal interval between policy runs in ISO 8601 duration string.\n"
        },
        "schedule": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyTriggerSchedule:DeploymentRetrainingPolicyTriggerSchedule",
          "description": "Schedule for the retraining policy.\n"
        },
        "statusDeclinesToFailing": {
          "type": "boolean",
          "description": "Identifies when trigger type is based on deployment a health status, whether the policy will run when health status declines to failing.\n"
        },
        "statusDeclinesToWarning": {
          "type": "boolean",
          "description": "Identifies when trigger type is based on deployment a health status, whether the policy will run when health status declines to warning.\n"
        },
        "statusStillInDecline": {
          "type": "boolean",
          "description": "Identifies when trigger type is based on deployment a health status, whether the policy will run when health status still in decline.\n"
        },
        "type": {
          "type": "string",
          "description": "Type of retraining policy trigger.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "statusDeclinesToFailing",
            "statusDeclinesToWarning",
            "statusStillInDecline"
          ]
        }
      }
    },
    "datarobot:index/DeploymentRetrainingPolicyTriggerSchedule:DeploymentRetrainingPolicyTriggerSchedule": {
      "properties": {
        "dayOfMonths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the month when the job will run.\n"
        },
        "dayOfWeeks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Days of the week when the job will run.\n"
        },
        "hours": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Hours of the day when the job will run.\n"
        },
        "minutes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Minutes of the day when the job will run.\n"
        },
        "months": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Months of the year when the job will run.\n"
        }
      },
      "type": "object",
      "required": [
        "dayOfMonths",
        "dayOfWeeks",
        "hours",
        "minutes",
        "months"
      ]
    },
    "datarobot:index/DeploymentRetrainingSettings:DeploymentRetrainingSettings": {
      "properties": {
        "credentialId": {
          "type": "string",
          "description": "ID of the credential used to refresh retraining dataset.\n"
        },
        "datasetId": {
          "type": "string",
          "description": "ID of the retraining dataset.\n"
        },
        "predictionEnvironmentId": {
          "type": "string",
          "description": "ID of the prediction environment to associate with the challengers created by retraining policies.\n"
        },
        "retrainingUserId": {
          "type": "string",
          "description": "ID of the retraining user.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/DeploymentRuntimeParameterValue:DeploymentRuntimeParameterValue": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the runtime parameter.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the runtime parameter.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the runtime parameter (type conversion is handled internally).\n"
        }
      },
      "type": "object",
      "required": [
        "key",
        "type",
        "value"
      ]
    },
    "datarobot:index/DeploymentSegmentAnalysisSettings:DeploymentSegmentAnalysisSettings": {
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of strings that gives the segment attributes selected for tracking.\n"
        },
        "enabled": {
          "type": "boolean",
          "description": "Set to 'True' if segment analysis is enabled for this deployment.\n"
        }
      },
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "datarobot:index/LlmBlueprintCustomModelLlmSettings:LlmBlueprintCustomModelLlmSettings": {
      "properties": {
        "externalLlmContextSize": {
          "type": "integer",
          "description": "The external LLM's context size, in tokens. This value is only used for pruning documents supplied to the LLM when a vector database is associated with the LLM blueprint. It does not affect the external LLM's actual context size in any way and is not supplied to the LLM.\n"
        },
        "systemPrompt": {
          "type": "string",
          "description": "System prompt guides the style of the LLM response. It is a 'universal' prompt, prepended to all individual prompts.\n"
        },
        "validationId": {
          "type": "string",
          "description": "The validation ID of the custom model LLM.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/LlmBlueprintLlmSettings:LlmBlueprintLlmSettings": {
      "properties": {
        "customModelId": {
          "type": "string",
          "description": "The ID of the custom model to use via chat completion interface.\n"
        },
        "maxCompletionLength": {
          "type": "integer",
          "description": "The maximum number of tokens allowed in the completion. The combined count of this value and prompt tokens must be below the model's maximum context size, where prompt token count is comprised of system prompt, user prompt, recent chat history, and vector database citations.\n"
        },
        "systemPrompt": {
          "type": "string",
          "description": "Guides the style of the LLM response. It is a 'universal' prompt, prepended to all individual prompts.\n"
        },
        "temperature": {
          "type": "number",
          "description": "Controls the randomness of model output, where higher values return more diverse output and lower values return more deterministic results.\n"
        },
        "topP": {
          "type": "number",
          "description": "Threshold that controls the selection of words included in the response, based on a cumulative probability cutoff for token selection. Higher numbers return more diverse options for outputs.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/LlmBlueprintVectorDatabaseSettings:LlmBlueprintVectorDatabaseSettings": {
      "properties": {
        "maxDocumentsRetrievedPerPrompt": {
          "type": "integer",
          "description": "The maximum number of documents to retrieve from the Vector Database.\n"
        },
        "maxTokens": {
          "type": "integer",
          "description": "The maximum number of tokens to retrieve from the Vector Database.\n"
        }
      },
      "type": "object"
    },
    "datarobot:index/NotificationChannelCustomHeader:NotificationChannelCustomHeader": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the header.\n"
        },
        "value": {
          "type": "string",
          "description": "The value of the header.\n"
        }
      },
      "type": "object",
      "required": [
        "name",
        "value"
      ]
    },
    "datarobot:index/NotificationChannelDrEntity:NotificationChannelDrEntity": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the DataRobot entity.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the entity.\n"
        }
      },
      "type": "object",
      "required": [
        "id",
        "name"
      ]
    },
    "datarobot:index/VectorDatabaseChunkingParameters:VectorDatabaseChunkingParameters": {
      "properties": {
        "chunkOverlapPercentage": {
          "type": "integer",
          "description": "The percentage of overlap between chunks.\n"
        },
        "chunkSize": {
          "type": "integer",
          "description": "The size of the chunks.\n"
        },
        "chunkingMethod": {
          "type": "string",
          "description": "The method used to chunk the data.\n"
        },
        "embeddingModel": {
          "type": "string",
          "description": "The id of the Embedding Model.\n"
        },
        "isSeparatorRegex": {
          "type": "boolean",
          "description": "Whether the separator is a regex.\n"
        },
        "separators": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The separators used to split the data.\n"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "chunkOverlapPercentage",
            "chunkSize",
            "chunkingMethod",
            "embeddingModel",
            "isSeparatorRegex",
            "separators"
          ]
        }
      }
    }
  },
  "provider": {
    "description": "The provider type for the datarobot package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
    "properties": {
      "apikey": {
        "type": "string",
        "description": "Key to access DataRobot API\n",
        "secret": true
      },
      "endpoint": {
        "type": "string",
        "description": "Endpoint for the DataRobot API\n",
        "secret": true
      },
      "tracecontext": {
        "type": "string",
        "description": "DataRobot trace context\n",
        "secret": true
      }
    },
    "inputProperties": {
      "apikey": {
        "type": "string",
        "description": "Key to access DataRobot API\n",
        "secret": true
      },
      "endpoint": {
        "type": "string",
        "description": "Endpoint for the DataRobot API\n",
        "secret": true
      },
      "tracecontext": {
        "type": "string",
        "description": "DataRobot trace context\n",
        "secret": true
      }
    }
  },
  "resources": {
    "datarobot:index/apiTokenCredential:ApiTokenCredential": {
      "description": "Api Token Credential\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.ApiTokenCredential(\"example\", {apiToken: \"[the API Key value here]\"});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.ApiTokenCredential(\"example\", api_token=\"[the API Key value here]\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.ApiTokenCredential(\"example\", new()\n    {\n        ApiToken = \"[the API Key value here]\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewApiTokenCredential(ctx, \"example\", &datarobot.ApiTokenCredentialArgs{\n\t\t\tApiToken: pulumi.String(\"[the API Key value here]\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.ApiTokenCredential;\nimport com.pulumi.datarobot.ApiTokenCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ApiTokenCredential(\"example\", ApiTokenCredentialArgs.builder()\n            .apiToken(\"[the API Key value here]\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:ApiTokenCredential\n    properties:\n      apiToken: '[the API Key value here]'\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "apiToken": {
          "type": "string",
          "description": "The description of the Api Token Credential.\n",
          "secret": true
        },
        "description": {
          "type": "string",
          "description": "The description of the Api Token Credential.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Api Token Credential.\n"
        }
      },
      "required": [
        "apiToken",
        "name"
      ],
      "inputProperties": {
        "apiToken": {
          "type": "string",
          "description": "The description of the Api Token Credential.\n",
          "secret": true
        },
        "description": {
          "type": "string",
          "description": "The description of the Api Token Credential.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Api Token Credential.\n"
        }
      },
      "requiredInputs": [
        "apiToken"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ApiTokenCredential resources.\n",
        "properties": {
          "apiToken": {
            "type": "string",
            "description": "The description of the Api Token Credential.\n",
            "secret": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Api Token Credential.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Api Token Credential.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/appOauth:AppOauth": {
      "description": "Resource for managing OAuth providers in DataRobot. This resource allows you to create, read, update, and delete OAuth provider configurations.\n",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "OAuth client ID.\n",
          "secret": true
        },
        "clientSecret": {
          "type": "string",
          "description": "OAuth client secret.\n",
          "secret": true
        },
        "name": {
          "type": "string",
          "description": "Name of the OAuth provider.\n"
        },
        "orgId": {
          "type": "string",
          "description": "Organization ID associated with the OAuth provider.\n"
        },
        "secureConfigId": {
          "type": "string",
          "description": "Secure config ID for the OAuth provider.\n"
        },
        "status": {
          "type": "string",
          "description": "Status of the OAuth provider.\n"
        },
        "type": {
          "type": "string",
          "description": "Type of the OAuth provider, e.g., 'google', 'box', etc.\n"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "name",
        "orgId",
        "secureConfigId",
        "status",
        "type"
      ],
      "inputProperties": {
        "clientId": {
          "type": "string",
          "description": "OAuth client ID.\n",
          "secret": true
        },
        "clientSecret": {
          "type": "string",
          "description": "OAuth client secret.\n",
          "secret": true
        },
        "name": {
          "type": "string",
          "description": "Name of the OAuth provider.\n"
        },
        "type": {
          "type": "string",
          "description": "Type of the OAuth provider, e.g., 'google', 'box', etc.\n"
        }
      },
      "requiredInputs": [
        "clientId",
        "clientSecret",
        "type"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering AppOauth resources.\n",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "OAuth client ID.\n",
            "secret": true
          },
          "clientSecret": {
            "type": "string",
            "description": "OAuth client secret.\n",
            "secret": true
          },
          "name": {
            "type": "string",
            "description": "Name of the OAuth provider.\n"
          },
          "orgId": {
            "type": "string",
            "description": "Organization ID associated with the OAuth provider.\n"
          },
          "secureConfigId": {
            "type": "string",
            "description": "Secure config ID for the OAuth provider.\n"
          },
          "status": {
            "type": "string",
            "description": "Status of the OAuth provider.\n"
          },
          "type": {
            "type": "string",
            "description": "Type of the OAuth provider, e.g., 'google', 'box', etc.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/applicationSource:ApplicationSource": {
      "description": "Application Source\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  example:\n    type: datarobot:ApplicationSource\n    properties:\n      baseEnvironmentId: 6542cd582a9d3d51bf4ac71e\n      # Optional\n      files:\n        - - start-app.sh\n        - - streamlit-app.py\n      folderPath: example-app\n      runtimeParameterValues:\n        - key: EXAMPLE_PARAM\n          type: string\n          value: val\n      resources:\n        replicas: 2\n        session_affinity: true\n        resource_label: cpu.medium\noutputs:\n  datarobotApplicationSourceId: ${example.id}\n  datarobotApplicationSourceVersionId: ${example.versionId}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "baseEnvironmentId": {
          "type": "string",
          "description": "The ID of the base environment for the Application Source.\n"
        },
        "baseEnvironmentVersionId": {
          "type": "string",
          "description": "The ID of the base environment version for the Application Source.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.\n"
        },
        "filesHashes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The hash of file contents for each file in files.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "folderPathHash": {
          "type": "string",
          "description": "The hash of the folder path contents.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Application Source.\n"
        },
        "resources": {
          "$ref": "#/types/datarobot:index/ApplicationSourceResources:ApplicationSourceResources",
          "description": "The resources for the Application Source.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/ApplicationSourceRuntimeParameterValue:ApplicationSourceRuntimeParameterValue"
          },
          "description": "The runtime parameter values for the Application Source.\n"
        },
        "versionId": {
          "type": "string",
          "description": "The version ID of the Application Source.\n"
        }
      },
      "required": [
        "baseEnvironmentId",
        "baseEnvironmentVersionId",
        "filesHashes",
        "folderPathHash",
        "name",
        "runtimeParameterValues",
        "versionId"
      ],
      "inputProperties": {
        "baseEnvironmentId": {
          "type": "string",
          "description": "The ID of the base environment for the Application Source.\n"
        },
        "baseEnvironmentVersionId": {
          "type": "string",
          "description": "The ID of the base environment version for the Application Source.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Application Source.\n"
        },
        "resources": {
          "$ref": "#/types/datarobot:index/ApplicationSourceResources:ApplicationSourceResources",
          "description": "The resources for the Application Source.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/ApplicationSourceRuntimeParameterValue:ApplicationSourceRuntimeParameterValue"
          },
          "description": "The runtime parameter values for the Application Source.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ApplicationSource resources.\n",
        "properties": {
          "baseEnvironmentId": {
            "type": "string",
            "description": "The ID of the base environment for the Application Source.\n"
          },
          "baseEnvironmentVersionId": {
            "type": "string",
            "description": "The ID of the base environment version for the Application Source.\n"
          },
          "files": {
            "$ref": "pulumi.json#/Any",
            "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.\n"
          },
          "filesHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The hash of file contents for each file in files.\n"
          },
          "folderPath": {
            "type": "string",
            "description": "The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.\n"
          },
          "folderPathHash": {
            "type": "string",
            "description": "The hash of the folder path contents.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Application Source.\n"
          },
          "resources": {
            "$ref": "#/types/datarobot:index/ApplicationSourceResources:ApplicationSourceResources",
            "description": "The resources for the Application Source.\n"
          },
          "runtimeParameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/ApplicationSourceRuntimeParameterValue:ApplicationSourceRuntimeParameterValue"
            },
            "description": "The runtime parameter values for the Application Source.\n"
          },
          "versionId": {
            "type": "string",
            "description": "The version ID of the Application Source.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/applicationSourceFromTemplate:ApplicationSourceFromTemplate": {
      "description": "Application Source\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  example:\n    type: datarobot:ApplicationSourceFromTemplate\n    properties:\n      templateId: 67126757e7819551baceb22b\n      # Optional\n      baseEnvironmentId: 6542cd582a9d3d51bf4ac71e\n      files:\n        - - start-app.sh\n        - - streamlit-app.py\n      folderPath: example-app\n      runtimeParameterValues:\n        - key: EXAMPLE_PARAM\n          type: string\n          value: val\n      resources:\n        replicas: 2\n        session_affinity: true\n        resource_label: cpu.medium\noutputs:\n  datarobotApplicationSourceId: ${example.id}\n  datarobotApplicationSourceVersionId: ${example.versionId}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "baseEnvironmentId": {
          "type": "string",
          "description": "The ID of the base environment for the Application Source.\n"
        },
        "baseEnvironmentVersionId": {
          "type": "string",
          "description": "The ID of the base environment version for the Application Source.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.\n"
        },
        "filesHashes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The hash of file contents for each file in files.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "folderPathHash": {
          "type": "string",
          "description": "The hash of the folder path contents.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Application Source.\n"
        },
        "resources": {
          "$ref": "#/types/datarobot:index/ApplicationSourceFromTemplateResources:ApplicationSourceFromTemplateResources",
          "description": "The resources for the Application Source.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/ApplicationSourceFromTemplateRuntimeParameterValue:ApplicationSourceFromTemplateRuntimeParameterValue"
          },
          "description": "The runtime parameter values for the Application Source.\n"
        },
        "templateId": {
          "type": "string",
          "description": "The ID of the template used to create the Application Source.\n"
        },
        "versionId": {
          "type": "string",
          "description": "The version ID of the Application Source.\n"
        }
      },
      "required": [
        "baseEnvironmentId",
        "baseEnvironmentVersionId",
        "filesHashes",
        "folderPathHash",
        "name",
        "runtimeParameterValues",
        "templateId",
        "versionId"
      ],
      "inputProperties": {
        "baseEnvironmentId": {
          "type": "string",
          "description": "The ID of the base environment for the Application Source.\n"
        },
        "baseEnvironmentVersionId": {
          "type": "string",
          "description": "The ID of the base environment version for the Application Source.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Application Source.\n"
        },
        "resources": {
          "$ref": "#/types/datarobot:index/ApplicationSourceFromTemplateResources:ApplicationSourceFromTemplateResources",
          "description": "The resources for the Application Source.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/ApplicationSourceFromTemplateRuntimeParameterValue:ApplicationSourceFromTemplateRuntimeParameterValue"
          },
          "description": "The runtime parameter values for the Application Source.\n"
        },
        "templateId": {
          "type": "string",
          "description": "The ID of the template used to create the Application Source.\n"
        }
      },
      "requiredInputs": [
        "templateId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ApplicationSourceFromTemplate resources.\n",
        "properties": {
          "baseEnvironmentId": {
            "type": "string",
            "description": "The ID of the base environment for the Application Source.\n"
          },
          "baseEnvironmentVersionId": {
            "type": "string",
            "description": "The ID of the base environment version for the Application Source.\n"
          },
          "files": {
            "$ref": "pulumi.json#/Any",
            "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.\n"
          },
          "filesHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The hash of file contents for each file in files.\n"
          },
          "folderPath": {
            "type": "string",
            "description": "The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.\n"
          },
          "folderPathHash": {
            "type": "string",
            "description": "The hash of the folder path contents.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Application Source.\n"
          },
          "resources": {
            "$ref": "#/types/datarobot:index/ApplicationSourceFromTemplateResources:ApplicationSourceFromTemplateResources",
            "description": "The resources for the Application Source.\n"
          },
          "runtimeParameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/ApplicationSourceFromTemplateRuntimeParameterValue:ApplicationSourceFromTemplateRuntimeParameterValue"
            },
            "description": "The runtime parameter values for the Application Source.\n"
          },
          "templateId": {
            "type": "string",
            "description": "The ID of the template used to create the Application Source.\n"
          },
          "versionId": {
            "type": "string",
            "description": "The version ID of the Application Source.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/awsCredential:AwsCredential": {
      "description": "AWS Credential\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.AwsCredential(\"example\", {\n    awsAccessKeyId: \"example_access_key_id\",\n    awsSecretAccessKey: \"example_secret_access_key\",\n    awsSessionToken: \"example_session_token\",\n    description: \"Description for the example AWS credential\",\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.AwsCredential(\"example\",\n    aws_access_key_id=\"example_access_key_id\",\n    aws_secret_access_key=\"example_secret_access_key\",\n    aws_session_token=\"example_session_token\",\n    description=\"Description for the example AWS credential\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.AwsCredential(\"example\", new()\n    {\n        AwsAccessKeyId = \"example_access_key_id\",\n        AwsSecretAccessKey = \"example_secret_access_key\",\n        AwsSessionToken = \"example_session_token\",\n        Description = \"Description for the example AWS credential\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewAwsCredential(ctx, \"example\", &datarobot.AwsCredentialArgs{\n\t\t\tAwsAccessKeyId:     pulumi.String(\"example_access_key_id\"),\n\t\t\tAwsSecretAccessKey: pulumi.String(\"example_secret_access_key\"),\n\t\t\tAwsSessionToken:    pulumi.String(\"example_session_token\"),\n\t\t\tDescription:        pulumi.String(\"Description for the example AWS credential\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.AwsCredential;\nimport com.pulumi.datarobot.AwsCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AwsCredential(\"example\", AwsCredentialArgs.builder()\n            .awsAccessKeyId(\"example_access_key_id\")\n            .awsSecretAccessKey(\"example_secret_access_key\")\n            .awsSessionToken(\"example_session_token\")\n            .description(\"Description for the example AWS credential\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:AwsCredential\n    properties:\n      awsAccessKeyId: example_access_key_id\n      awsSecretAccessKey: example_secret_access_key\n      awsSessionToken: example_session_token\n      description: Description for the example AWS credential\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "awsAccessKeyId": {
          "type": "string",
          "description": "The AWS Access Key ID.\n"
        },
        "awsSecretAccessKey": {
          "type": "string",
          "description": "The AWS Secret Access Key.\n",
          "secret": true
        },
        "awsSessionToken": {
          "type": "string",
          "description": "The AWS Session Token.\n",
          "secret": true
        },
        "configId": {
          "type": "string",
          "description": "The ID of the saved shared secure configuration. If specified, cannot include awsAccessKeyId, awsSecretAccessKey or awsSessionToken.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the AWS Credential.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the AWS Credential.\n"
        }
      },
      "required": [
        "name"
      ],
      "inputProperties": {
        "awsAccessKeyId": {
          "type": "string",
          "description": "The AWS Access Key ID.\n"
        },
        "awsSecretAccessKey": {
          "type": "string",
          "description": "The AWS Secret Access Key.\n",
          "secret": true
        },
        "awsSessionToken": {
          "type": "string",
          "description": "The AWS Session Token.\n",
          "secret": true
        },
        "configId": {
          "type": "string",
          "description": "The ID of the saved shared secure configuration. If specified, cannot include awsAccessKeyId, awsSecretAccessKey or awsSessionToken.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the AWS Credential.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the AWS Credential.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering AwsCredential resources.\n",
        "properties": {
          "awsAccessKeyId": {
            "type": "string",
            "description": "The AWS Access Key ID.\n"
          },
          "awsSecretAccessKey": {
            "type": "string",
            "description": "The AWS Secret Access Key.\n",
            "secret": true
          },
          "awsSessionToken": {
            "type": "string",
            "description": "The AWS Session Token.\n",
            "secret": true
          },
          "configId": {
            "type": "string",
            "description": "The ID of the saved shared secure configuration. If specified, cannot include awsAccessKeyId, awsSecretAccessKey or awsSessionToken.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the AWS Credential.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the AWS Credential.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/azureCredential:AzureCredential": {
      "description": "Azure Credential\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.AzureCredential(\"example\", {\n    azureConnectionString: \"example_connection_string\",\n    description: \"Description for the example Azure credential\",\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.AzureCredential(\"example\",\n    azure_connection_string=\"example_connection_string\",\n    description=\"Description for the example Azure credential\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.AzureCredential(\"example\", new()\n    {\n        AzureConnectionString = \"example_connection_string\",\n        Description = \"Description for the example Azure credential\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewAzureCredential(ctx, \"example\", &datarobot.AzureCredentialArgs{\n\t\t\tAzureConnectionString: pulumi.String(\"example_connection_string\"),\n\t\t\tDescription:           pulumi.String(\"Description for the example Azure credential\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.AzureCredential;\nimport com.pulumi.datarobot.AzureCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AzureCredential(\"example\", AzureCredentialArgs.builder()\n            .azureConnectionString(\"example_connection_string\")\n            .description(\"Description for the example Azure credential\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:AzureCredential\n    properties:\n      azureConnectionString: example_connection_string\n      description: Description for the example Azure credential\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "azureConnectionString": {
          "type": "string",
          "description": "The connection string of the Azure Credential.\n",
          "secret": true
        },
        "description": {
          "type": "string",
          "description": "The description of the Azure Credential.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Azure Credential.\n"
        }
      },
      "required": [
        "azureConnectionString",
        "name"
      ],
      "inputProperties": {
        "azureConnectionString": {
          "type": "string",
          "description": "The connection string of the Azure Credential.\n",
          "secret": true
        },
        "description": {
          "type": "string",
          "description": "The description of the Azure Credential.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Azure Credential.\n"
        }
      },
      "requiredInputs": [
        "azureConnectionString"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering AzureCredential resources.\n",
        "properties": {
          "azureConnectionString": {
            "type": "string",
            "description": "The connection string of the Azure Credential.\n",
            "secret": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Azure Credential.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Azure Credential.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/basicCredential:BasicCredential": {
      "description": "Basic Credential\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.BasicCredential(\"example\", {\n    description: \"Description for the example basic credential\",\n    password: \"example_password\",\n    user: \"example_user\",\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.BasicCredential(\"example\",\n    description=\"Description for the example basic credential\",\n    password=\"example_password\",\n    user=\"example_user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.BasicCredential(\"example\", new()\n    {\n        Description = \"Description for the example basic credential\",\n        Password = \"example_password\",\n        User = \"example_user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewBasicCredential(ctx, \"example\", &datarobot.BasicCredentialArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example basic credential\"),\n\t\t\tPassword:    pulumi.String(\"example_password\"),\n\t\t\tUser:        pulumi.String(\"example_user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.BasicCredential;\nimport com.pulumi.datarobot.BasicCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new BasicCredential(\"example\", BasicCredentialArgs.builder()\n            .description(\"Description for the example basic credential\")\n            .password(\"example_password\")\n            .user(\"example_user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:BasicCredential\n    properties:\n      description: Description for the example basic credential\n      password: example_password\n      user: example_user\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the Basic Credential.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Basic Credential.\n"
        },
        "password": {
          "type": "string",
          "description": "The password of the Basic Credential.\n",
          "secret": true
        },
        "user": {
          "type": "string",
          "description": "The user of the Basic Credential.\n",
          "secret": true
        }
      },
      "required": [
        "name",
        "password",
        "user"
      ],
      "inputProperties": {
        "description": {
          "type": "string",
          "description": "The description of the Basic Credential.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Basic Credential.\n"
        },
        "password": {
          "type": "string",
          "description": "The password of the Basic Credential.\n",
          "secret": true
        },
        "user": {
          "type": "string",
          "description": "The user of the Basic Credential.\n",
          "secret": true
        }
      },
      "requiredInputs": [
        "password",
        "user"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering BasicCredential resources.\n",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the Basic Credential.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Basic Credential.\n"
          },
          "password": {
            "type": "string",
            "description": "The password of the Basic Credential.\n",
            "secret": true
          },
          "user": {
            "type": "string",
            "description": "The user of the Basic Credential.\n",
            "secret": true
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/batchPredictionJobDefinition:BatchPredictionJobDefinition": {
      "description": "Batch Prediction Job Definition\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  example:\n    type: datarobot:BatchPredictionJobDefinition\n    properties:\n      deploymentId: ${datarobot_deployment.batch_prediction_job_definition.id}\n      intakeSettings:\n        type: s3\n        url: s3://datarobot-public-datasets-redistributable/1k_diabetes_simplified_features.csv\n        credential_id: ${datarobot_basic_credential.batch_prediction_job_definition.id}\n      # Optional parameters\n      outputSettings:\n        type: s3\n        url: s3://my-test-bucket/predictions.csv\n        credential_id: ${datarobot_basic_credential.batch_prediction_job_definition.id}\n      csvSettings:\n        delimiter: .\n        quotechar: ''''\n        encoding: utf-8\n      numConcurrent: 1\n      chunkSize: 10\n      maxExplanations: 5\n      thresholdHigh: 0.8\n      thresholdLow: 0.2\n      predictionThreshold: 0.5\n      includePredictionStatus: true\n      skipDriftTracking: true\n      passthroughColumnsSet: all\n      abortOnError: false\n      includeProbabilities: true\n      columnNamesRemapping:\n        col1: newCol1\n      schedule:\n        minute:\n          - '15'\n          - '45'\n        hour:\n          - '*'\n        month:\n          - '*'\n        day_of_month:\n          - '*'\n        day_of_week:\n          - '*'\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "abortOnError": {
          "type": "boolean",
          "description": "Default behavior is to abort the job if too many rows fail scoring. This will free up resources for other jobs that may score successfully. Set to false to unconditionally score every row no matter how many errors are encountered. Defaults to True.\n"
        },
        "chunkSize": {
          "$ref": "pulumi.json#/Any",
          "description": "Which strategy should be used to determine the chunk size. Can be either a named strategy or a fixed size in bytes.\n"
        },
        "columnNamesRemapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Mapping with column renaming for output table.\n"
        },
        "csvSettings": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionCsvSettings:BatchPredictionJobDefinitionCsvSettings",
          "description": "CSV intake and output settings.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The ID of the deployment to use for the batch prediction job.\n"
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether or not the job definition should be active on a scheduled basis. If True, schedule is required.\n"
        },
        "explanationAlgorithm": {
          "type": "string",
          "description": "Which algorithm will be used to calculate prediction explanations.\n"
        },
        "includePredictionStatus": {
          "type": "boolean",
          "description": "Include the prediction_status column in the output. Defaults to False.\n"
        },
        "includeProbabilities": {
          "type": "boolean",
          "description": "Flag that enables returning of all probability columns. Defaults to True.\n"
        },
        "includeProbabilitiesClasses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List the subset of classes if a user doesn’t want all the classes. Defaults to [].\n"
        },
        "intakeSettings": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionIntakeSettings:BatchPredictionJobDefinitionIntakeSettings",
          "description": "A dict configuring how data is coming from.\n"
        },
        "maxExplanations": {
          "type": "integer",
          "description": "Compute prediction explanations for this amount of features.\n"
        },
        "name": {
          "type": "string",
          "description": "The name you want your job to be identified with. Must be unique across the organization’s existing jobs.\n"
        },
        "numConcurrent": {
          "type": "integer",
          "description": "Number of concurrent chunks to score simultaneously. Defaults to the available number of cores of the deployment. Lower it to leave resources for real-time scoring.\n"
        },
        "outputSettings": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionOutputSettings:BatchPredictionJobDefinitionOutputSettings",
          "description": "A dict configuring how scored data is to be saved.\n"
        },
        "passthroughColumns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Keep these columns from the scoring dataset in the scored dataset. This is useful for correlating predictions with source data.\n"
        },
        "passthroughColumnsSet": {
          "type": "string",
          "description": "To pass through every column from the scoring dataset, set this to all.\n"
        },
        "predictionInstance": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionPredictionInstance:BatchPredictionJobDefinitionPredictionInstance",
          "description": "Defaults to instance specified by deployment or system configuration.\n"
        },
        "predictionThreshold": {
          "type": "number",
          "description": "Threshold is the point that sets the class boundary for a predicted value. This value can be set between 0.0 and 1.0.\n"
        },
        "predictionWarningEnabled": {
          "type": "boolean",
          "description": "Add prediction warnings to the scored data. Currently only supported for regression models. Defaults to False.\n"
        },
        "schedule": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionSchedule:BatchPredictionJobDefinitionSchedule",
          "description": "Defines at what intervals the job should run.\n"
        },
        "skipDriftTracking": {
          "type": "boolean",
          "description": "Skips drift tracking on any predictions made from this job. This is useful when running non-production workloads to not affect drift tracking and cause unnecessary alerts. Defaults to false.\n"
        },
        "thresholdHigh": {
          "type": "number",
          "description": "Only compute prediction explanations for predictions above this threshold. Can be combined with threshold_low.\n"
        },
        "thresholdLow": {
          "type": "number",
          "description": "Only compute prediction explanations for predictions below this threshold. Can be combined with threshold_high.\n"
        },
        "timeseriesSettings": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionTimeseriesSettings:BatchPredictionJobDefinitionTimeseriesSettings",
          "description": "Configuration for time-series scoring.\n"
        }
      },
      "required": [
        "abortOnError",
        "csvSettings",
        "deploymentId",
        "enabled",
        "explanationAlgorithm",
        "includePredictionStatus",
        "includeProbabilities",
        "intakeSettings",
        "maxExplanations",
        "name",
        "outputSettings",
        "predictionWarningEnabled",
        "skipDriftTracking"
      ],
      "inputProperties": {
        "abortOnError": {
          "type": "boolean",
          "description": "Default behavior is to abort the job if too many rows fail scoring. This will free up resources for other jobs that may score successfully. Set to false to unconditionally score every row no matter how many errors are encountered. Defaults to True.\n"
        },
        "chunkSize": {
          "$ref": "pulumi.json#/Any",
          "description": "Which strategy should be used to determine the chunk size. Can be either a named strategy or a fixed size in bytes.\n"
        },
        "columnNamesRemapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Mapping with column renaming for output table.\n"
        },
        "csvSettings": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionCsvSettings:BatchPredictionJobDefinitionCsvSettings",
          "description": "CSV intake and output settings.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The ID of the deployment to use for the batch prediction job.\n"
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether or not the job definition should be active on a scheduled basis. If True, schedule is required.\n"
        },
        "explanationAlgorithm": {
          "type": "string",
          "description": "Which algorithm will be used to calculate prediction explanations.\n"
        },
        "includePredictionStatus": {
          "type": "boolean",
          "description": "Include the prediction_status column in the output. Defaults to False.\n"
        },
        "includeProbabilities": {
          "type": "boolean",
          "description": "Flag that enables returning of all probability columns. Defaults to True.\n"
        },
        "includeProbabilitiesClasses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List the subset of classes if a user doesn’t want all the classes. Defaults to [].\n"
        },
        "intakeSettings": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionIntakeSettings:BatchPredictionJobDefinitionIntakeSettings",
          "description": "A dict configuring how data is coming from.\n"
        },
        "maxExplanations": {
          "type": "integer",
          "description": "Compute prediction explanations for this amount of features.\n"
        },
        "name": {
          "type": "string",
          "description": "The name you want your job to be identified with. Must be unique across the organization’s existing jobs.\n"
        },
        "numConcurrent": {
          "type": "integer",
          "description": "Number of concurrent chunks to score simultaneously. Defaults to the available number of cores of the deployment. Lower it to leave resources for real-time scoring.\n"
        },
        "outputSettings": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionOutputSettings:BatchPredictionJobDefinitionOutputSettings",
          "description": "A dict configuring how scored data is to be saved.\n"
        },
        "passthroughColumns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Keep these columns from the scoring dataset in the scored dataset. This is useful for correlating predictions with source data.\n"
        },
        "passthroughColumnsSet": {
          "type": "string",
          "description": "To pass through every column from the scoring dataset, set this to all.\n"
        },
        "predictionInstance": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionPredictionInstance:BatchPredictionJobDefinitionPredictionInstance",
          "description": "Defaults to instance specified by deployment or system configuration.\n"
        },
        "predictionThreshold": {
          "type": "number",
          "description": "Threshold is the point that sets the class boundary for a predicted value. This value can be set between 0.0 and 1.0.\n"
        },
        "predictionWarningEnabled": {
          "type": "boolean",
          "description": "Add prediction warnings to the scored data. Currently only supported for regression models. Defaults to False.\n"
        },
        "schedule": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionSchedule:BatchPredictionJobDefinitionSchedule",
          "description": "Defines at what intervals the job should run.\n"
        },
        "skipDriftTracking": {
          "type": "boolean",
          "description": "Skips drift tracking on any predictions made from this job. This is useful when running non-production workloads to not affect drift tracking and cause unnecessary alerts. Defaults to false.\n"
        },
        "thresholdHigh": {
          "type": "number",
          "description": "Only compute prediction explanations for predictions above this threshold. Can be combined with threshold_low.\n"
        },
        "thresholdLow": {
          "type": "number",
          "description": "Only compute prediction explanations for predictions below this threshold. Can be combined with threshold_high.\n"
        },
        "timeseriesSettings": {
          "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionTimeseriesSettings:BatchPredictionJobDefinitionTimeseriesSettings",
          "description": "Configuration for time-series scoring.\n"
        }
      },
      "requiredInputs": [
        "deploymentId",
        "intakeSettings"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering BatchPredictionJobDefinition resources.\n",
        "properties": {
          "abortOnError": {
            "type": "boolean",
            "description": "Default behavior is to abort the job if too many rows fail scoring. This will free up resources for other jobs that may score successfully. Set to false to unconditionally score every row no matter how many errors are encountered. Defaults to True.\n"
          },
          "chunkSize": {
            "$ref": "pulumi.json#/Any",
            "description": "Which strategy should be used to determine the chunk size. Can be either a named strategy or a fixed size in bytes.\n"
          },
          "columnNamesRemapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Mapping with column renaming for output table.\n"
          },
          "csvSettings": {
            "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionCsvSettings:BatchPredictionJobDefinitionCsvSettings",
            "description": "CSV intake and output settings.\n"
          },
          "deploymentId": {
            "type": "string",
            "description": "The ID of the deployment to use for the batch prediction job.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether or not the job definition should be active on a scheduled basis. If True, schedule is required.\n"
          },
          "explanationAlgorithm": {
            "type": "string",
            "description": "Which algorithm will be used to calculate prediction explanations.\n"
          },
          "includePredictionStatus": {
            "type": "boolean",
            "description": "Include the prediction_status column in the output. Defaults to False.\n"
          },
          "includeProbabilities": {
            "type": "boolean",
            "description": "Flag that enables returning of all probability columns. Defaults to True.\n"
          },
          "includeProbabilitiesClasses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List the subset of classes if a user doesn’t want all the classes. Defaults to [].\n"
          },
          "intakeSettings": {
            "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionIntakeSettings:BatchPredictionJobDefinitionIntakeSettings",
            "description": "A dict configuring how data is coming from.\n"
          },
          "maxExplanations": {
            "type": "integer",
            "description": "Compute prediction explanations for this amount of features.\n"
          },
          "name": {
            "type": "string",
            "description": "The name you want your job to be identified with. Must be unique across the organization’s existing jobs.\n"
          },
          "numConcurrent": {
            "type": "integer",
            "description": "Number of concurrent chunks to score simultaneously. Defaults to the available number of cores of the deployment. Lower it to leave resources for real-time scoring.\n"
          },
          "outputSettings": {
            "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionOutputSettings:BatchPredictionJobDefinitionOutputSettings",
            "description": "A dict configuring how scored data is to be saved.\n"
          },
          "passthroughColumns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Keep these columns from the scoring dataset in the scored dataset. This is useful for correlating predictions with source data.\n"
          },
          "passthroughColumnsSet": {
            "type": "string",
            "description": "To pass through every column from the scoring dataset, set this to all.\n"
          },
          "predictionInstance": {
            "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionPredictionInstance:BatchPredictionJobDefinitionPredictionInstance",
            "description": "Defaults to instance specified by deployment or system configuration.\n"
          },
          "predictionThreshold": {
            "type": "number",
            "description": "Threshold is the point that sets the class boundary for a predicted value. This value can be set between 0.0 and 1.0.\n"
          },
          "predictionWarningEnabled": {
            "type": "boolean",
            "description": "Add prediction warnings to the scored data. Currently only supported for regression models. Defaults to False.\n"
          },
          "schedule": {
            "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionSchedule:BatchPredictionJobDefinitionSchedule",
            "description": "Defines at what intervals the job should run.\n"
          },
          "skipDriftTracking": {
            "type": "boolean",
            "description": "Skips drift tracking on any predictions made from this job. This is useful when running non-production workloads to not affect drift tracking and cause unnecessary alerts. Defaults to false.\n"
          },
          "thresholdHigh": {
            "type": "number",
            "description": "Only compute prediction explanations for predictions above this threshold. Can be combined with threshold_low.\n"
          },
          "thresholdLow": {
            "type": "number",
            "description": "Only compute prediction explanations for predictions below this threshold. Can be combined with threshold_high.\n"
          },
          "timeseriesSettings": {
            "$ref": "#/types/datarobot:index/BatchPredictionJobDefinitionTimeseriesSettings:BatchPredictionJobDefinitionTimeseriesSettings",
            "description": "Configuration for time-series scoring.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/customApplication:CustomApplication": {
      "description": "Custom Application\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  exampleApplicationSource:\n    type: datarobot:ApplicationSource\n    properties:\n      files:\n        - - start-app.sh\n        - - streamlit-app.py\n  exampleCustomApplication:\n    type: datarobot:CustomApplication\n    properties:\n      sourceVersionId: ${exampleApplicationSource.versionId}\n      # optional settings\n      externalAccessEnabled: true\n      externalAccessRecipients:\n        - recipient@example.com\n      allowAutoStopping: false\n      resources:\n        - replicas: 2\n          resourceLabel: cpu.medium\n          sessionAffinity: true\n          serviceWebRequestsOnRootPath: false\noutputs:\n  datarobotCustomApplicationId: ${exampleCustomApplication.id}\n  datarobotCustomApplicationSourceId: ${exampleCustomApplication.sourceId}\n  datarobotCustomApplicationSourceVersionId: ${exampleCustomApplication.sourceVersionId}\n  datarobotCustomApplicationUrl: ${exampleCustomApplication.applicationUrl}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "allowAutoStopping": {
          "type": "boolean",
          "description": "Whether auto stopping is allowed for the Custom Application.\n"
        },
        "applicationUrl": {
          "type": "string",
          "description": "The URL of the Custom Application.\n"
        },
        "externalAccessEnabled": {
          "type": "boolean",
          "description": "Whether external access is enabled for the Custom Application.\n"
        },
        "externalAccessRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of external email addresses that have access to the Custom Application.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Application.\n"
        },
        "resources": {
          "$ref": "#/types/datarobot:index/CustomApplicationResources:CustomApplicationResources",
          "description": "The resources for the Custom Application.\n"
        },
        "sourceId": {
          "type": "string",
          "description": "The ID of the Custom Application Source.\n"
        },
        "sourceVersionId": {
          "type": "string",
          "description": "The version ID of the Custom Application Source.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Custom Application to.\n"
        }
      },
      "required": [
        "allowAutoStopping",
        "applicationUrl",
        "externalAccessEnabled",
        "name",
        "sourceId",
        "sourceVersionId"
      ],
      "inputProperties": {
        "allowAutoStopping": {
          "type": "boolean",
          "description": "Whether auto stopping is allowed for the Custom Application.\n"
        },
        "externalAccessEnabled": {
          "type": "boolean",
          "description": "Whether external access is enabled for the Custom Application.\n"
        },
        "externalAccessRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of external email addresses that have access to the Custom Application.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Application.\n"
        },
        "resources": {
          "$ref": "#/types/datarobot:index/CustomApplicationResources:CustomApplicationResources",
          "description": "The resources for the Custom Application.\n"
        },
        "sourceVersionId": {
          "type": "string",
          "description": "The version ID of the Custom Application Source.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Custom Application to.\n"
        }
      },
      "requiredInputs": [
        "sourceVersionId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering CustomApplication resources.\n",
        "properties": {
          "allowAutoStopping": {
            "type": "boolean",
            "description": "Whether auto stopping is allowed for the Custom Application.\n"
          },
          "applicationUrl": {
            "type": "string",
            "description": "The URL of the Custom Application.\n"
          },
          "externalAccessEnabled": {
            "type": "boolean",
            "description": "Whether external access is enabled for the Custom Application.\n"
          },
          "externalAccessRecipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of external email addresses that have access to the Custom Application.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Custom Application.\n"
          },
          "resources": {
            "$ref": "#/types/datarobot:index/CustomApplicationResources:CustomApplicationResources",
            "description": "The resources for the Custom Application.\n"
          },
          "sourceId": {
            "type": "string",
            "description": "The ID of the Custom Application Source.\n"
          },
          "sourceVersionId": {
            "type": "string",
            "description": "The version ID of the Custom Application Source.\n"
          },
          "useCaseIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Case IDs to add the Custom Application to.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/customApplicationFromEnvironment:CustomApplicationFromEnvironment": {
      "description": "Custom Application created from an Execution Environment.\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  example:\n    type: datarobot:CustomApplicationFromEnvironment\n    properties:\n      environmentId: ${datarobot_execution_environment.example.id}\n      # optional settings\n      externalAccessEnabled: true\n      externalAccessRecipients:\n        - recipient@example.com\n      allowAutoStopping: false\n      resources:\n        - replicas: 1\n          resourceLabel: cpu.small\n          sessionAffinity: false\n          serviceWebRequestsOnRootPath: true\noutputs:\n  datarobotCustomApplicationId: ${example.id}\n  datarobotCustomApplicationUrl: ${example.applicationUrl}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "allowAutoStopping": {
          "type": "boolean",
          "description": "Whether auto stopping is allowed for the Custom Application.\n"
        },
        "applicationUrl": {
          "type": "string",
          "description": "The URL of the Custom Application.\n"
        },
        "environmentId": {
          "type": "string",
          "description": "The ID of the Execution Environment used to create the Custom Application.\n"
        },
        "environmentVersionId": {
          "type": "string",
          "description": "The version ID of the Execution Environment used to create the Custom Application.\n"
        },
        "externalAccessEnabled": {
          "type": "boolean",
          "description": "Whether external access is enabled for the Custom Application.\n"
        },
        "externalAccessRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of external email addresses that have access to the Custom Application.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Application.\n"
        },
        "resources": {
          "$ref": "#/types/datarobot:index/CustomApplicationFromEnvironmentResources:CustomApplicationFromEnvironmentResources",
          "description": "The resources for the Custom Application.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Custom Application to.\n"
        }
      },
      "required": [
        "allowAutoStopping",
        "applicationUrl",
        "environmentId",
        "environmentVersionId",
        "externalAccessEnabled",
        "name"
      ],
      "inputProperties": {
        "allowAutoStopping": {
          "type": "boolean",
          "description": "Whether auto stopping is allowed for the Custom Application.\n"
        },
        "environmentId": {
          "type": "string",
          "description": "The ID of the Execution Environment used to create the Custom Application.\n"
        },
        "externalAccessEnabled": {
          "type": "boolean",
          "description": "Whether external access is enabled for the Custom Application.\n"
        },
        "externalAccessRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of external email addresses that have access to the Custom Application.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Application.\n"
        },
        "resources": {
          "$ref": "#/types/datarobot:index/CustomApplicationFromEnvironmentResources:CustomApplicationFromEnvironmentResources",
          "description": "The resources for the Custom Application.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Custom Application to.\n"
        }
      },
      "requiredInputs": [
        "environmentId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering CustomApplicationFromEnvironment resources.\n",
        "properties": {
          "allowAutoStopping": {
            "type": "boolean",
            "description": "Whether auto stopping is allowed for the Custom Application.\n"
          },
          "applicationUrl": {
            "type": "string",
            "description": "The URL of the Custom Application.\n"
          },
          "environmentId": {
            "type": "string",
            "description": "The ID of the Execution Environment used to create the Custom Application.\n"
          },
          "environmentVersionId": {
            "type": "string",
            "description": "The version ID of the Execution Environment used to create the Custom Application.\n"
          },
          "externalAccessEnabled": {
            "type": "boolean",
            "description": "Whether external access is enabled for the Custom Application.\n"
          },
          "externalAccessRecipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of external email addresses that have access to the Custom Application.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Custom Application.\n"
          },
          "resources": {
            "$ref": "#/types/datarobot:index/CustomApplicationFromEnvironmentResources:CustomApplicationFromEnvironmentResources",
            "description": "The resources for the Custom Application.\n"
          },
          "useCaseIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Case IDs to add the Custom Application to.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/customJob:CustomJob": {
      "description": "Custom Job\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  example:\n    type: datarobot:CustomJob\n    properties:\n      jobType: retraining\n      files:\n        - file1.py\n        - file2.py\n      environmentId: 65f9b27eab986d30d4c64268\n      # Optional\n      description: Example Custom Job Description\n      runtimeParameterValues:\n        - key: EXAMPLE_PARAM\n          type: string\n          value: val\n      egressNetworkPolicy: none\n      resourceBundleId: cpu.micro\n      schedule:\n        minute:\n          - '15'\n          - '45'\n        hour:\n          - '*'\n        month:\n          - '*'\n        day_of_month:\n          - '*'\n        day_of_week:\n          - '*'\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the Custom Job.\n"
        },
        "egressNetworkPolicy": {
          "type": "string",
          "description": "The egress network policy for the Job.\n"
        },
        "environmentId": {
          "type": "string",
          "description": "The ID of the environment to use with the Job.\n"
        },
        "environmentVersionId": {
          "type": "string",
          "description": "The ID of the environment version to use with the Job.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Job. If list is of strings, then basenames will be used for tuples.\n"
        },
        "filesHashes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The hash of file contents for each file in files.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "folderPathHash": {
          "type": "string",
          "description": "The hash of the folder path contents.\n"
        },
        "jobType": {
          "type": "string",
          "description": "The type of the Custom Job.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Job.\n"
        },
        "resourceBundleId": {
          "type": "string",
          "description": "A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomJobRuntimeParameterValue:CustomJobRuntimeParameterValue"
          },
          "description": "Additional parameters to be injected into a Job at runtime.\n"
        },
        "schedule": {
          "$ref": "#/types/datarobot:index/CustomJobSchedule:CustomJobSchedule",
          "description": "The schedule configuration for the custom job.\n"
        },
        "scheduleId": {
          "type": "string",
          "description": "The ID of the schedule associated with the custom job.\n"
        }
      },
      "required": [
        "egressNetworkPolicy",
        "environmentId",
        "environmentVersionId",
        "filesHashes",
        "folderPathHash",
        "jobType",
        "name",
        "runtimeParameterValues",
        "scheduleId"
      ],
      "inputProperties": {
        "description": {
          "type": "string",
          "description": "The description of the Custom Job.\n"
        },
        "egressNetworkPolicy": {
          "type": "string",
          "description": "The egress network policy for the Job.\n"
        },
        "environmentId": {
          "type": "string",
          "description": "The ID of the environment to use with the Job.\n"
        },
        "environmentVersionId": {
          "type": "string",
          "description": "The ID of the environment version to use with the Job.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Job. If list is of strings, then basenames will be used for tuples.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "jobType": {
          "type": "string",
          "description": "The type of the Custom Job.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Job.\n"
        },
        "resourceBundleId": {
          "type": "string",
          "description": "A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomJobRuntimeParameterValue:CustomJobRuntimeParameterValue"
          },
          "description": "Additional parameters to be injected into a Job at runtime.\n"
        },
        "schedule": {
          "$ref": "#/types/datarobot:index/CustomJobSchedule:CustomJobSchedule",
          "description": "The schedule configuration for the custom job.\n"
        },
        "scheduleId": {
          "type": "string",
          "description": "The ID of the schedule associated with the custom job.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering CustomJob resources.\n",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the Custom Job.\n"
          },
          "egressNetworkPolicy": {
            "type": "string",
            "description": "The egress network policy for the Job.\n"
          },
          "environmentId": {
            "type": "string",
            "description": "The ID of the environment to use with the Job.\n"
          },
          "environmentVersionId": {
            "type": "string",
            "description": "The ID of the environment version to use with the Job.\n"
          },
          "files": {
            "$ref": "pulumi.json#/Any",
            "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Job. If list is of strings, then basenames will be used for tuples.\n"
          },
          "filesHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The hash of file contents for each file in files.\n"
          },
          "folderPath": {
            "type": "string",
            "description": "The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.\n"
          },
          "folderPathHash": {
            "type": "string",
            "description": "The hash of the folder path contents.\n"
          },
          "jobType": {
            "type": "string",
            "description": "The type of the Custom Job.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Custom Job.\n"
          },
          "resourceBundleId": {
            "type": "string",
            "description": "A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.\n"
          },
          "runtimeParameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/CustomJobRuntimeParameterValue:CustomJobRuntimeParameterValue"
            },
            "description": "Additional parameters to be injected into a Job at runtime.\n"
          },
          "schedule": {
            "$ref": "#/types/datarobot:index/CustomJobSchedule:CustomJobSchedule",
            "description": "The schedule configuration for the custom job.\n"
          },
          "scheduleId": {
            "type": "string",
            "description": "The ID of the schedule associated with the custom job.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/customMetric:CustomMetric": {
      "description": "Custom Metric\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  example:\n    type: datarobot:CustomMetric\n    properties:\n      deploymentId: ${datarobot_deployment.example.id}\n      description: example description\n      units: dollars\n      directionality: higherIsBetter\n      type: sum\n      baselineValue: 0.5\n      isModelSpecific: true\n      isGeospatial: false\n      # Optional\n      timeStep: hour\n      timestamp:\n        column_name: timestamp_column\n        time_format: '%Y-%m-%dT%H:%M:%SZ'\n      value:\n        column_name: value_column\n      batch:\n        column_name: batch_column\n      sampleCount:\n        column_name: sample_count_column\n      associationId:\n        columnName: association_id_column\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "baselineValue": {
          "type": "number",
          "description": "The baseline value used to add “reference dots” to the values over time chart.\n"
        },
        "batch": {
          "$ref": "#/types/datarobot:index/CustomMetricBatch:CustomMetricBatch",
          "description": "A Custom Metric batch ID source when reading values from columnar dataset.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "ID of the Deployment for the Custom Metric.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the Custom Metric.\n"
        },
        "directionality": {
          "type": "string",
          "description": "Directionality of the Custom Metric\n"
        },
        "isGeospatial": {
          "type": "boolean",
          "description": "Determines whether the metric is geospatial.\n"
        },
        "isModelSpecific": {
          "type": "boolean",
          "description": "Determines whether the metric is related to the model or deployment.\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the Custom Metric.\n"
        },
        "sampleCount": {
          "$ref": "#/types/datarobot:index/CustomMetricSampleCount:CustomMetricSampleCount",
          "description": "A Custom Metric sample source when reading values from columnar dataset.\n"
        },
        "timestamp": {
          "$ref": "#/types/datarobot:index/CustomMetricTimestamp:CustomMetricTimestamp",
          "description": "A Custom Metric timestamp column source when reading values from columnar dataset.\n"
        },
        "type": {
          "type": "string",
          "description": "Aggregation type of the Custom Metric.\n"
        },
        "units": {
          "type": "string",
          "description": "The units, or the y-axis label, of the given Custom Metric.\n"
        },
        "value": {
          "$ref": "#/types/datarobot:index/CustomMetricValue:CustomMetricValue",
          "description": "A Custom Metric value source when reading values from columnar dataset.\n"
        }
      },
      "required": [
        "deploymentId",
        "directionality",
        "isGeospatial",
        "isModelSpecific",
        "name",
        "type",
        "units"
      ],
      "inputProperties": {
        "baselineValue": {
          "type": "number",
          "description": "The baseline value used to add “reference dots” to the values over time chart.\n"
        },
        "batch": {
          "$ref": "#/types/datarobot:index/CustomMetricBatch:CustomMetricBatch",
          "description": "A Custom Metric batch ID source when reading values from columnar dataset.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "ID of the Deployment for the Custom Metric.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the Custom Metric.\n"
        },
        "directionality": {
          "type": "string",
          "description": "Directionality of the Custom Metric\n"
        },
        "isGeospatial": {
          "type": "boolean",
          "description": "Determines whether the metric is geospatial.\n"
        },
        "isModelSpecific": {
          "type": "boolean",
          "description": "Determines whether the metric is related to the model or deployment.\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the Custom Metric.\n"
        },
        "sampleCount": {
          "$ref": "#/types/datarobot:index/CustomMetricSampleCount:CustomMetricSampleCount",
          "description": "A Custom Metric sample source when reading values from columnar dataset.\n"
        },
        "timestamp": {
          "$ref": "#/types/datarobot:index/CustomMetricTimestamp:CustomMetricTimestamp",
          "description": "A Custom Metric timestamp column source when reading values from columnar dataset.\n"
        },
        "type": {
          "type": "string",
          "description": "Aggregation type of the Custom Metric.\n"
        },
        "units": {
          "type": "string",
          "description": "The units, or the y-axis label, of the given Custom Metric.\n"
        },
        "value": {
          "$ref": "#/types/datarobot:index/CustomMetricValue:CustomMetricValue",
          "description": "A Custom Metric value source when reading values from columnar dataset.\n"
        }
      },
      "requiredInputs": [
        "deploymentId",
        "directionality",
        "isGeospatial",
        "isModelSpecific",
        "type",
        "units"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering CustomMetric resources.\n",
        "properties": {
          "baselineValue": {
            "type": "number",
            "description": "The baseline value used to add “reference dots” to the values over time chart.\n"
          },
          "batch": {
            "$ref": "#/types/datarobot:index/CustomMetricBatch:CustomMetricBatch",
            "description": "A Custom Metric batch ID source when reading values from columnar dataset.\n"
          },
          "deploymentId": {
            "type": "string",
            "description": "ID of the Deployment for the Custom Metric.\n"
          },
          "description": {
            "type": "string",
            "description": "Description of the Custom Metric.\n"
          },
          "directionality": {
            "type": "string",
            "description": "Directionality of the Custom Metric\n"
          },
          "isGeospatial": {
            "type": "boolean",
            "description": "Determines whether the metric is geospatial.\n"
          },
          "isModelSpecific": {
            "type": "boolean",
            "description": "Determines whether the metric is related to the model or deployment.\n"
          },
          "name": {
            "type": "string",
            "description": "Name of the Custom Metric.\n"
          },
          "sampleCount": {
            "$ref": "#/types/datarobot:index/CustomMetricSampleCount:CustomMetricSampleCount",
            "description": "A Custom Metric sample source when reading values from columnar dataset.\n"
          },
          "timestamp": {
            "$ref": "#/types/datarobot:index/CustomMetricTimestamp:CustomMetricTimestamp",
            "description": "A Custom Metric timestamp column source when reading values from columnar dataset.\n"
          },
          "type": {
            "type": "string",
            "description": "Aggregation type of the Custom Metric.\n"
          },
          "units": {
            "type": "string",
            "description": "The units, or the y-axis label, of the given Custom Metric.\n"
          },
          "value": {
            "$ref": "#/types/datarobot:index/CustomMetricValue:CustomMetricValue",
            "description": "A Custom Metric value source when reading values from columnar dataset.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/customMetricFromJob:CustomMetricFromJob": {
      "description": "Custom Metric From Job\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.CustomMetricFromJob(\"example\", {\n    deploymentId: datarobot_deployment.example.id,\n    customJobId: datarobot_custom_metric_job.example.id,\n});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.CustomMetricFromJob(\"example\",\n    deployment_id=datarobot_deployment[\"example\"][\"id\"],\n    custom_job_id=datarobot_custom_metric_job[\"example\"][\"id\"])\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.CustomMetricFromJob(\"example\", new()\n    {\n        DeploymentId = datarobot_deployment.Example.Id,\n        CustomJobId = datarobot_custom_metric_job.Example.Id,\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewCustomMetricFromJob(ctx, \"example\", &datarobot.CustomMetricFromJobArgs{\n\t\t\tDeploymentId: pulumi.Any(datarobot_deployment.Example.Id),\n\t\t\tCustomJobId:  pulumi.Any(datarobot_custom_metric_job.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.CustomMetricFromJob;\nimport com.pulumi.datarobot.CustomMetricFromJobArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new CustomMetricFromJob(\"example\", CustomMetricFromJobArgs.builder()\n            .deploymentId(datarobot_deployment.example().id())\n            .customJobId(datarobot_custom_metric_job.example().id())\n            .build());\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:CustomMetricFromJob\n    properties:\n      deploymentId: ${datarobot_deployment.example.id}\n      customJobId: ${datarobot_custom_metric_job.example.id}\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "baselineValue": {
          "type": "number",
          "description": "Baseline value for the metric.\n"
        },
        "batch": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobBatch:CustomMetricFromJobBatch",
          "description": "Batch ID source when reading values from columnar dataset like a file.\n"
        },
        "customJobId": {
          "type": "string",
          "description": "ID of the Custom Job.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "ID of the Deployment.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the metric.\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the metric.\n"
        },
        "parameterOverrides": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomMetricFromJobParameterOverride:CustomMetricFromJobParameterOverride"
          },
          "description": "Additional parameters to be injected into the Metric Job at runtime.\n"
        },
        "sampleCount": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobSampleCount:CustomMetricFromJobSampleCount",
          "description": "Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.\n"
        },
        "schedule": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobSchedule:CustomMetricFromJobSchedule",
          "description": "Defines at what intervals the metric job should run.\n"
        },
        "timestamp": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobTimestamp:CustomMetricFromJobTimestamp",
          "description": "Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.\n"
        },
        "value": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobValue:CustomMetricFromJobValue",
          "description": "Value source when reading values from columnar dataset like a file.\n"
        }
      },
      "required": [
        "customJobId",
        "deploymentId",
        "name"
      ],
      "inputProperties": {
        "baselineValue": {
          "type": "number",
          "description": "Baseline value for the metric.\n"
        },
        "batch": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobBatch:CustomMetricFromJobBatch",
          "description": "Batch ID source when reading values from columnar dataset like a file.\n"
        },
        "customJobId": {
          "type": "string",
          "description": "ID of the Custom Job.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "ID of the Deployment.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the metric.\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the metric.\n"
        },
        "parameterOverrides": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomMetricFromJobParameterOverride:CustomMetricFromJobParameterOverride"
          },
          "description": "Additional parameters to be injected into the Metric Job at runtime.\n"
        },
        "sampleCount": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobSampleCount:CustomMetricFromJobSampleCount",
          "description": "Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.\n"
        },
        "schedule": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobSchedule:CustomMetricFromJobSchedule",
          "description": "Defines at what intervals the metric job should run.\n"
        },
        "timestamp": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobTimestamp:CustomMetricFromJobTimestamp",
          "description": "Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.\n"
        },
        "value": {
          "$ref": "#/types/datarobot:index/CustomMetricFromJobValue:CustomMetricFromJobValue",
          "description": "Value source when reading values from columnar dataset like a file.\n"
        }
      },
      "requiredInputs": [
        "customJobId",
        "deploymentId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering CustomMetricFromJob resources.\n",
        "properties": {
          "baselineValue": {
            "type": "number",
            "description": "Baseline value for the metric.\n"
          },
          "batch": {
            "$ref": "#/types/datarobot:index/CustomMetricFromJobBatch:CustomMetricFromJobBatch",
            "description": "Batch ID source when reading values from columnar dataset like a file.\n"
          },
          "customJobId": {
            "type": "string",
            "description": "ID of the Custom Job.\n"
          },
          "deploymentId": {
            "type": "string",
            "description": "ID of the Deployment.\n"
          },
          "description": {
            "type": "string",
            "description": "Description of the metric.\n"
          },
          "name": {
            "type": "string",
            "description": "Name of the metric.\n"
          },
          "parameterOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/CustomMetricFromJobParameterOverride:CustomMetricFromJobParameterOverride"
            },
            "description": "Additional parameters to be injected into the Metric Job at runtime.\n"
          },
          "sampleCount": {
            "$ref": "#/types/datarobot:index/CustomMetricFromJobSampleCount:CustomMetricFromJobSampleCount",
            "description": "Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.\n"
          },
          "schedule": {
            "$ref": "#/types/datarobot:index/CustomMetricFromJobSchedule:CustomMetricFromJobSchedule",
            "description": "Defines at what intervals the metric job should run.\n"
          },
          "timestamp": {
            "$ref": "#/types/datarobot:index/CustomMetricFromJobTimestamp:CustomMetricFromJobTimestamp",
            "description": "Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.\n"
          },
          "value": {
            "$ref": "#/types/datarobot:index/CustomMetricFromJobValue:CustomMetricFromJobValue",
            "description": "Value source when reading values from columnar dataset like a file.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/customMetricJob:CustomMetricJob": {
      "description": "Custom Job\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.CustomMetricJob(\"example\", {\n    files: [\n        \"file1.py\",\n        \"file2.py\",\n    ],\n    environmentId: \"65f9b27eab986d30d4c64268\",\n    description: \"Example Custom Metric Job Description\",\n    runtimeParameterValues: [{\n        key: \"EXAMPLE_PARAM\",\n        type: \"string\",\n        value: \"val\",\n    }],\n    egressNetworkPolicy: \"none\",\n    resourceBundleId: \"cpu.micro\",\n    units: \"count\",\n    directionality: \"lowerIsBetter\",\n    type: \"sum\",\n    isModelSpecific: false,\n});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.CustomMetricJob(\"example\",\n    files=[\n        \"file1.py\",\n        \"file2.py\",\n    ],\n    environment_id=\"65f9b27eab986d30d4c64268\",\n    description=\"Example Custom Metric Job Description\",\n    runtime_parameter_values=[{\n        \"key\": \"EXAMPLE_PARAM\",\n        \"type\": \"string\",\n        \"value\": \"val\",\n    }],\n    egress_network_policy=\"none\",\n    resource_bundle_id=\"cpu.micro\",\n    units=\"count\",\n    directionality=\"lowerIsBetter\",\n    type=\"sum\",\n    is_model_specific=False)\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.CustomMetricJob(\"example\", new()\n    {\n        Files = new[]\n        {\n            \"file1.py\",\n            \"file2.py\",\n        },\n        EnvironmentId = \"65f9b27eab986d30d4c64268\",\n        Description = \"Example Custom Metric Job Description\",\n        RuntimeParameterValues = new[]\n        {\n            new Datarobot.Inputs.CustomMetricJobRuntimeParameterValueArgs\n            {\n                Key = \"EXAMPLE_PARAM\",\n                Type = \"string\",\n                Value = \"val\",\n            },\n        },\n        EgressNetworkPolicy = \"none\",\n        ResourceBundleId = \"cpu.micro\",\n        Units = \"count\",\n        Directionality = \"lowerIsBetter\",\n        Type = \"sum\",\n        IsModelSpecific = false,\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewCustomMetricJob(ctx, \"example\", &datarobot.CustomMetricJobArgs{\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t\"file1.py\",\n\t\t\t\t\"file2.py\",\n\t\t\t},\n\t\t\tEnvironmentId: pulumi.String(\"65f9b27eab986d30d4c64268\"),\n\t\t\tDescription:   pulumi.String(\"Example Custom Metric Job Description\"),\n\t\t\tRuntimeParameterValues: datarobot.CustomMetricJobRuntimeParameterValueArray{\n\t\t\t\t&datarobot.CustomMetricJobRuntimeParameterValueArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EXAMPLE_PARAM\"),\n\t\t\t\t\tType:  pulumi.String(\"string\"),\n\t\t\t\t\tValue: pulumi.String(\"val\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEgressNetworkPolicy: pulumi.String(\"none\"),\n\t\t\tResourceBundleId:    pulumi.String(\"cpu.micro\"),\n\t\t\tUnits:               pulumi.String(\"count\"),\n\t\t\tDirectionality:      pulumi.String(\"lowerIsBetter\"),\n\t\t\tType:                pulumi.String(\"sum\"),\n\t\t\tIsModelSpecific:     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.CustomMetricJob;\nimport com.pulumi.datarobot.CustomMetricJobArgs;\nimport com.pulumi.datarobot.inputs.CustomMetricJobRuntimeParameterValueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new CustomMetricJob(\"example\", CustomMetricJobArgs.builder()\n            .files(            \n                \"file1.py\",\n                \"file2.py\")\n            .environmentId(\"65f9b27eab986d30d4c64268\")\n            .description(\"Example Custom Metric Job Description\")\n            .runtimeParameterValues(CustomMetricJobRuntimeParameterValueArgs.builder()\n                .key(\"EXAMPLE_PARAM\")\n                .type(\"string\")\n                .value(\"val\")\n                .build())\n            .egressNetworkPolicy(\"none\")\n            .resourceBundleId(\"cpu.micro\")\n            .units(\"count\")\n            .directionality(\"lowerIsBetter\")\n            .type(\"sum\")\n            .isModelSpecific(false)\n            .build());\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:CustomMetricJob\n    properties:\n      files:\n        - file1.py\n        - file2.py\n      environmentId: 65f9b27eab986d30d4c64268\n      # Optional\n      description: Example Custom Metric Job Description\n      runtimeParameterValues:\n        - key: EXAMPLE_PARAM\n          type: string\n          value: val\n      egressNetworkPolicy: none\n      resourceBundleId: cpu.micro\n      units: count\n      directionality: lowerIsBetter\n      type: sum\n      isModelSpecific: false\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the Custom Metric Job.\n"
        },
        "directionality": {
          "type": "string",
          "description": "The directionality of the Custom Metric.\n"
        },
        "egressNetworkPolicy": {
          "type": "string",
          "description": "The egress network policy for the Job.\n"
        },
        "environmentId": {
          "type": "string",
          "description": "The ID of the environment to use with the Job.\n"
        },
        "environmentVersionId": {
          "type": "string",
          "description": "The ID of the environment version to use with the Job.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Job. If list is of strings, then basenames will be used for tuples.\n"
        },
        "filesHashes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The hash of file contents for each file in files.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "folderPathHash": {
          "type": "string",
          "description": "The hash of the folder path contents.\n"
        },
        "isModelSpecific": {
          "type": "boolean",
          "description": "Determines whether the metric is related to the model or deployment.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Metric Job.\n"
        },
        "resourceBundleId": {
          "type": "string",
          "description": "A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomMetricJobRuntimeParameterValue:CustomMetricJobRuntimeParameterValue"
          },
          "description": "Additional parameters to be injected into a Job at runtime.\n"
        },
        "timeStep": {
          "type": "string",
          "description": "Custom metric time bucket size.\n"
        },
        "type": {
          "type": "string",
          "description": "The aggregation type of the custom metric.\n"
        },
        "units": {
          "type": "string",
          "description": "The units, or the y-axis label, of the given custom metric.\n"
        }
      },
      "required": [
        "directionality",
        "egressNetworkPolicy",
        "environmentId",
        "environmentVersionId",
        "filesHashes",
        "folderPathHash",
        "isModelSpecific",
        "name",
        "runtimeParameterValues",
        "timeStep",
        "type",
        "units"
      ],
      "inputProperties": {
        "description": {
          "type": "string",
          "description": "The description of the Custom Metric Job.\n"
        },
        "directionality": {
          "type": "string",
          "description": "The directionality of the Custom Metric.\n"
        },
        "egressNetworkPolicy": {
          "type": "string",
          "description": "The egress network policy for the Job.\n"
        },
        "environmentId": {
          "type": "string",
          "description": "The ID of the environment to use with the Job.\n"
        },
        "environmentVersionId": {
          "type": "string",
          "description": "The ID of the environment version to use with the Job.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Job. If list is of strings, then basenames will be used for tuples.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "isModelSpecific": {
          "type": "boolean",
          "description": "Determines whether the metric is related to the model or deployment.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Metric Job.\n"
        },
        "resourceBundleId": {
          "type": "string",
          "description": "A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomMetricJobRuntimeParameterValue:CustomMetricJobRuntimeParameterValue"
          },
          "description": "Additional parameters to be injected into a Job at runtime.\n"
        },
        "timeStep": {
          "type": "string",
          "description": "Custom metric time bucket size.\n"
        },
        "type": {
          "type": "string",
          "description": "The aggregation type of the custom metric.\n"
        },
        "units": {
          "type": "string",
          "description": "The units, or the y-axis label, of the given custom metric.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering CustomMetricJob resources.\n",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the Custom Metric Job.\n"
          },
          "directionality": {
            "type": "string",
            "description": "The directionality of the Custom Metric.\n"
          },
          "egressNetworkPolicy": {
            "type": "string",
            "description": "The egress network policy for the Job.\n"
          },
          "environmentId": {
            "type": "string",
            "description": "The ID of the environment to use with the Job.\n"
          },
          "environmentVersionId": {
            "type": "string",
            "description": "The ID of the environment version to use with the Job.\n"
          },
          "files": {
            "$ref": "pulumi.json#/Any",
            "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Job. If list is of strings, then basenames will be used for tuples.\n"
          },
          "filesHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The hash of file contents for each file in files.\n"
          },
          "folderPath": {
            "type": "string",
            "description": "The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.\n"
          },
          "folderPathHash": {
            "type": "string",
            "description": "The hash of the folder path contents.\n"
          },
          "isModelSpecific": {
            "type": "boolean",
            "description": "Determines whether the metric is related to the model or deployment.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Custom Metric Job.\n"
          },
          "resourceBundleId": {
            "type": "string",
            "description": "A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.\n"
          },
          "runtimeParameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/CustomMetricJobRuntimeParameterValue:CustomMetricJobRuntimeParameterValue"
            },
            "description": "Additional parameters to be injected into a Job at runtime.\n"
          },
          "timeStep": {
            "type": "string",
            "description": "Custom metric time bucket size.\n"
          },
          "type": {
            "type": "string",
            "description": "The aggregation type of the custom metric.\n"
          },
          "units": {
            "type": "string",
            "description": "The units, or the y-axis label, of the given custom metric.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/customModel:CustomModel": {
      "description": "Custom Model\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleRemoteRepository = new datarobot.RemoteRepository(\"exampleRemoteRepository\", {\n    description: \"GitHub repository with Datarobot user models\",\n    location: \"https://github.com/datarobot/datarobot-user-models\",\n    sourceType: \"github\",\n});\n// set the credential id for private repositories\n// credential_id = datarobot_api_token_credential.example.id\nconst exampleCustomModel = new datarobot.CustomModel(\"exampleCustomModel\", {\n    description: \"An example custom model from GitHub repository\",\n    files: [\n        \"file1.py\",\n        \"file2.py\",\n    ],\n    targetType: \"Binary\",\n    targetName: \"my_label\",\n    baseEnvironmentId: \"65f9b27eab986d30d4c64268\",\n});\n// Optional\n// source_remote_repositories = [\n//   {\n//     id  = datarobot_remote_repository.example.id\n//     ref = \"master\"\n//     source_paths = [\n//       \"model_templates/python3_dummy_binary\",\n//     ]\n//   }\n// ]\n// guard_configurations = [\n//   {\n//     template_name = \"Rouge 1\"\n//     name          = \"Rouge 1 response\"\n//     stages        = [\"response\"]\n//     intervention = {\n//       action  = \"block\"\n//       message = \"response has been blocked by Rogue 1 guard\"\n//       condition = jsonencode({\n//         \"comparand\": 0.5, \n//         \"comparator\": \"greaterThan\"\n//       })\n//     }\n//   },\n// ]\n// overall_moderation_configuration = {\n//   timeout_sec    = 120\n//   timeout_action = \"score\"\n// }\n// memory_mb      = 512\n// replicas       = 2\n// network_access = \"NONE\"\nexport const exampleId = exampleCustomModel.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_remote_repository = datarobot.RemoteRepository(\"exampleRemoteRepository\",\n    description=\"GitHub repository with Datarobot user models\",\n    location=\"https://github.com/datarobot/datarobot-user-models\",\n    source_type=\"github\")\n# set the credential id for private repositories\n# credential_id = datarobot_api_token_credential.example.id\nexample_custom_model = datarobot.CustomModel(\"exampleCustomModel\",\n    description=\"An example custom model from GitHub repository\",\n    files=[\n        \"file1.py\",\n        \"file2.py\",\n    ],\n    target_type=\"Binary\",\n    target_name=\"my_label\",\n    base_environment_id=\"65f9b27eab986d30d4c64268\")\n# Optional\n# source_remote_repositories = [\n#   {\n#     id  = datarobot_remote_repository.example.id\n#     ref = \"master\"\n#     source_paths = [\n#       \"model_templates/python3_dummy_binary\",\n#     ]\n#   }\n# ]\n# guard_configurations = [\n#   {\n#     template_name = \"Rouge 1\"\n#     name          = \"Rouge 1 response\"\n#     stages        = [\"response\"]\n#     intervention = {\n#       action  = \"block\"\n#       message = \"response has been blocked by Rogue 1 guard\"\n#       condition = jsonencode({\n#         \"comparand\": 0.5, \n#         \"comparator\": \"greaterThan\"\n#       })\n#     }\n#   },\n# ]\n# overall_moderation_configuration = {\n#   timeout_sec    = 120\n#   timeout_action = \"score\"\n# }\n# memory_mb      = 512\n# replicas       = 2\n# network_access = \"NONE\"\npulumi.export(\"exampleId\", example_custom_model.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleRemoteRepository = new Datarobot.RemoteRepository(\"exampleRemoteRepository\", new()\n    {\n        Description = \"GitHub repository with Datarobot user models\",\n        Location = \"https://github.com/datarobot/datarobot-user-models\",\n        SourceType = \"github\",\n    });\n\n    // set the credential id for private repositories\n    // credential_id = datarobot_api_token_credential.example.id\n    var exampleCustomModel = new Datarobot.CustomModel(\"exampleCustomModel\", new()\n    {\n        Description = \"An example custom model from GitHub repository\",\n        Files = new[]\n        {\n            \"file1.py\",\n            \"file2.py\",\n        },\n        TargetType = \"Binary\",\n        TargetName = \"my_label\",\n        BaseEnvironmentId = \"65f9b27eab986d30d4c64268\",\n    });\n\n    // Optional\n    // source_remote_repositories = [\n    //   {\n    //     id  = datarobot_remote_repository.example.id\n    //     ref = \"master\"\n    //     source_paths = [\n    //       \"model_templates/python3_dummy_binary\",\n    //     ]\n    //   }\n    // ]\n    // guard_configurations = [\n    //   {\n    //     template_name = \"Rouge 1\"\n    //     name          = \"Rouge 1 response\"\n    //     stages        = [\"response\"]\n    //     intervention = {\n    //       action  = \"block\"\n    //       message = \"response has been blocked by Rogue 1 guard\"\n    //       condition = jsonencode({\n    //         \"comparand\": 0.5, \n    //         \"comparator\": \"greaterThan\"\n    //       })\n    //     }\n    //   },\n    // ]\n    // overall_moderation_configuration = {\n    //   timeout_sec    = 120\n    //   timeout_action = \"score\"\n    // }\n    // memory_mb      = 512\n    // replicas       = 2\n    // network_access = \"NONE\"\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = exampleCustomModel.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewRemoteRepository(ctx, \"exampleRemoteRepository\", &datarobot.RemoteRepositoryArgs{\n\t\t\tDescription: pulumi.String(\"GitHub repository with Datarobot user models\"),\n\t\t\tLocation:    pulumi.String(\"https://github.com/datarobot/datarobot-user-models\"),\n\t\t\tSourceType:  pulumi.String(\"github\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleCustomModel, err := datarobot.NewCustomModel(ctx, \"exampleCustomModel\", &datarobot.CustomModelArgs{\n\t\t\tDescription: pulumi.String(\"An example custom model from GitHub repository\"),\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t\"file1.py\",\n\t\t\t\t\"file2.py\",\n\t\t\t},\n\t\t\tTargetType:        pulumi.String(\"Binary\"),\n\t\t\tTargetName:        pulumi.String(\"my_label\"),\n\t\t\tBaseEnvironmentId: pulumi.String(\"65f9b27eab986d30d4c64268\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", exampleCustomModel.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.RemoteRepository;\nimport com.pulumi.datarobot.RemoteRepositoryArgs;\nimport com.pulumi.datarobot.CustomModel;\nimport com.pulumi.datarobot.CustomModelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRemoteRepository = new RemoteRepository(\"exampleRemoteRepository\", RemoteRepositoryArgs.builder()\n            .description(\"GitHub repository with Datarobot user models\")\n            .location(\"https://github.com/datarobot/datarobot-user-models\")\n            .sourceType(\"github\")\n            .build());\n\n        // set the credential id for private repositories\n        // credential_id = datarobot_api_token_credential.example.id\n        var exampleCustomModel = new CustomModel(\"exampleCustomModel\", CustomModelArgs.builder()\n            .description(\"An example custom model from GitHub repository\")\n            .files(            \n                \"file1.py\",\n                \"file2.py\")\n            .targetType(\"Binary\")\n            .targetName(\"my_label\")\n            .baseEnvironmentId(\"65f9b27eab986d30d4c64268\")\n            .build());\n\n        // Optional\n        // source_remote_repositories = [\n        //   {\n        //     id  = datarobot_remote_repository.example.id\n        //     ref = \"master\"\n        //     source_paths = [\n        //       \"model_templates/python3_dummy_binary\",\n        //     ]\n        //   }\n        // ]\n        // guard_configurations = [\n        //   {\n        //     template_name = \"Rouge 1\"\n        //     name          = \"Rouge 1 response\"\n        //     stages        = [\"response\"]\n        //     intervention = {\n        //       action  = \"block\"\n        //       message = \"response has been blocked by Rogue 1 guard\"\n        //       condition = jsonencode({\n        //         \"comparand\": 0.5, \n        //         \"comparator\": \"greaterThan\"\n        //       })\n        //     }\n        //   },\n        // ]\n        // overall_moderation_configuration = {\n        //   timeout_sec    = 120\n        //   timeout_action = \"score\"\n        // }\n        // memory_mb      = 512\n        // replicas       = 2\n        // network_access = \"NONE\"\n        ctx.export(\"exampleId\", exampleCustomModel.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleRemoteRepository:\n    type: datarobot:RemoteRepository\n    properties:\n      description: GitHub repository with Datarobot user models\n      location: https://github.com/datarobot/datarobot-user-models\n      sourceType: github\n  exampleCustomModel:\n    type: datarobot:CustomModel\n    properties:\n      description: An example custom model from GitHub repository\n      files:\n        - file1.py\n        - file2.py\n      targetType: Binary\n      targetName: my_label\n      baseEnvironmentId: 65f9b27eab986d30d4c64268\noutputs:\n  exampleId: ${exampleCustomModel.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "baseEnvironmentId": {
          "type": "string",
          "description": "The ID of the base environment for the Custom Model.\n"
        },
        "baseEnvironmentVersionId": {
          "type": "string",
          "description": "The ID of the base environment version for the Custom Model.\n"
        },
        "classLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Class labels for multiclass classification. Cannot be used with class*labels*file.\n"
        },
        "classLabelsFile": {
          "type": "string",
          "description": "Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.\n"
        },
        "deploymentsCount": {
          "type": "integer",
          "description": "The number of deployments for the Custom Model.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Custom Model.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.\n"
        },
        "filesHashes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The hash of file contents for each file in files.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "folderPathHash": {
          "type": "string",
          "description": "The hash of the folder path contents.\n"
        },
        "guardConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomModelGuardConfiguration:CustomModelGuardConfiguration"
          },
          "description": "The guard configurations for the Custom Model.\n"
        },
        "isProxy": {
          "type": "boolean",
          "description": "Flag indicating if the Custom Model is a proxy model.\n"
        },
        "language": {
          "type": "string",
          "description": "The language used to build the Custom Model.\n"
        },
        "memoryMb": {
          "type": "integer",
          "description": "The memory in MB for the Custom Model.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Model.\n"
        },
        "negativeClassLabel": {
          "type": "string",
          "description": "The negative class label of the Custom Model.\n"
        },
        "networkAccess": {
          "type": "string",
          "description": "The network access for the Custom Model.\n"
        },
        "overallModerationConfiguration": {
          "$ref": "#/types/datarobot:index/CustomModelOverallModerationConfiguration:CustomModelOverallModerationConfiguration",
          "description": "The overall moderation configuration for the Custom Model.\n"
        },
        "positiveClassLabel": {
          "type": "string",
          "description": "The positive class label of the Custom Model.\n"
        },
        "predictionThreshold": {
          "type": "number",
          "description": "The prediction threshold of the Custom Model.\n"
        },
        "replicas": {
          "type": "integer",
          "description": "The replicas for the Custom Model.\n"
        },
        "resourceBundleId": {
          "type": "string",
          "description": "A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomModelRuntimeParameterValue:CustomModelRuntimeParameterValue"
          },
          "description": "The runtime parameter values for the Custom Model.\n"
        },
        "sourceLlmBlueprintId": {
          "type": "string",
          "description": "The ID of the source LLM Blueprint for the Custom Model.\n"
        },
        "sourceRemoteRepositories": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomModelSourceRemoteRepository:CustomModelSourceRemoteRepository"
          },
          "description": "The source remote repositories for the Custom Model.\n"
        },
        "targetName": {
          "type": "string",
          "description": "The target name of the Custom Model.\n"
        },
        "targetType": {
          "type": "string",
          "description": "The target type of the Custom Model.\n"
        },
        "trainingDataPartitionColumn": {
          "type": "string",
          "description": "The name of the partition column in the training dataset assigned to the Custom Model.\n"
        },
        "trainingDatasetId": {
          "type": "string",
          "description": "The ID of the training dataset assigned to the Custom Model.\n"
        },
        "trainingDatasetName": {
          "type": "string",
          "description": "The name of the training dataset assigned to the Custom Model.\n"
        },
        "trainingDatasetVersionId": {
          "type": "string",
          "description": "The version ID of the training dataset assigned to the Custom Model.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Custom Model version to.\n"
        },
        "versionId": {
          "type": "string",
          "description": "The ID of the latest Custom Model version.\n"
        }
      },
      "required": [
        "baseEnvironmentId",
        "baseEnvironmentVersionId",
        "deploymentsCount",
        "description",
        "filesHashes",
        "folderPathHash",
        "isProxy",
        "memoryMb",
        "name",
        "negativeClassLabel",
        "networkAccess",
        "positiveClassLabel",
        "predictionThreshold",
        "replicas",
        "runtimeParameterValues",
        "targetName",
        "targetType",
        "trainingDatasetName",
        "trainingDatasetVersionId",
        "versionId"
      ],
      "inputProperties": {
        "baseEnvironmentId": {
          "type": "string",
          "description": "The ID of the base environment for the Custom Model.\n"
        },
        "baseEnvironmentVersionId": {
          "type": "string",
          "description": "The ID of the base environment version for the Custom Model.\n"
        },
        "classLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Class labels for multiclass classification. Cannot be used with class*labels*file.\n"
        },
        "classLabelsFile": {
          "type": "string",
          "description": "Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Custom Model.\n"
        },
        "files": {
          "$ref": "pulumi.json#/Any",
          "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.\n"
        },
        "folderPath": {
          "type": "string",
          "description": "The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.\n"
        },
        "guardConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomModelGuardConfiguration:CustomModelGuardConfiguration"
          },
          "description": "The guard configurations for the Custom Model.\n"
        },
        "isProxy": {
          "type": "boolean",
          "description": "Flag indicating if the Custom Model is a proxy model.\n"
        },
        "language": {
          "type": "string",
          "description": "The language used to build the Custom Model.\n"
        },
        "memoryMb": {
          "type": "integer",
          "description": "The memory in MB for the Custom Model.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Custom Model.\n"
        },
        "negativeClassLabel": {
          "type": "string",
          "description": "The negative class label of the Custom Model.\n"
        },
        "networkAccess": {
          "type": "string",
          "description": "The network access for the Custom Model.\n"
        },
        "overallModerationConfiguration": {
          "$ref": "#/types/datarobot:index/CustomModelOverallModerationConfiguration:CustomModelOverallModerationConfiguration",
          "description": "The overall moderation configuration for the Custom Model.\n"
        },
        "positiveClassLabel": {
          "type": "string",
          "description": "The positive class label of the Custom Model.\n"
        },
        "predictionThreshold": {
          "type": "number",
          "description": "The prediction threshold of the Custom Model.\n"
        },
        "replicas": {
          "type": "integer",
          "description": "The replicas for the Custom Model.\n"
        },
        "resourceBundleId": {
          "type": "string",
          "description": "A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomModelRuntimeParameterValue:CustomModelRuntimeParameterValue"
          },
          "description": "The runtime parameter values for the Custom Model.\n"
        },
        "sourceLlmBlueprintId": {
          "type": "string",
          "description": "The ID of the source LLM Blueprint for the Custom Model.\n"
        },
        "sourceRemoteRepositories": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/CustomModelSourceRemoteRepository:CustomModelSourceRemoteRepository"
          },
          "description": "The source remote repositories for the Custom Model.\n"
        },
        "targetName": {
          "type": "string",
          "description": "The target name of the Custom Model.\n"
        },
        "targetType": {
          "type": "string",
          "description": "The target type of the Custom Model.\n"
        },
        "trainingDataPartitionColumn": {
          "type": "string",
          "description": "The name of the partition column in the training dataset assigned to the Custom Model.\n"
        },
        "trainingDatasetId": {
          "type": "string",
          "description": "The ID of the training dataset assigned to the Custom Model.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Custom Model version to.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering CustomModel resources.\n",
        "properties": {
          "baseEnvironmentId": {
            "type": "string",
            "description": "The ID of the base environment for the Custom Model.\n"
          },
          "baseEnvironmentVersionId": {
            "type": "string",
            "description": "The ID of the base environment version for the Custom Model.\n"
          },
          "classLabels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Class labels for multiclass classification. Cannot be used with class*labels*file.\n"
          },
          "classLabelsFile": {
            "type": "string",
            "description": "Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.\n"
          },
          "deploymentsCount": {
            "type": "integer",
            "description": "The number of deployments for the Custom Model.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the Custom Model.\n"
          },
          "files": {
            "$ref": "pulumi.json#/Any",
            "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.\n"
          },
          "filesHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The hash of file contents for each file in files.\n"
          },
          "folderPath": {
            "type": "string",
            "description": "The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.\n"
          },
          "folderPathHash": {
            "type": "string",
            "description": "The hash of the folder path contents.\n"
          },
          "guardConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/CustomModelGuardConfiguration:CustomModelGuardConfiguration"
            },
            "description": "The guard configurations for the Custom Model.\n"
          },
          "isProxy": {
            "type": "boolean",
            "description": "Flag indicating if the Custom Model is a proxy model.\n"
          },
          "language": {
            "type": "string",
            "description": "The language used to build the Custom Model.\n"
          },
          "memoryMb": {
            "type": "integer",
            "description": "The memory in MB for the Custom Model.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Custom Model.\n"
          },
          "negativeClassLabel": {
            "type": "string",
            "description": "The negative class label of the Custom Model.\n"
          },
          "networkAccess": {
            "type": "string",
            "description": "The network access for the Custom Model.\n"
          },
          "overallModerationConfiguration": {
            "$ref": "#/types/datarobot:index/CustomModelOverallModerationConfiguration:CustomModelOverallModerationConfiguration",
            "description": "The overall moderation configuration for the Custom Model.\n"
          },
          "positiveClassLabel": {
            "type": "string",
            "description": "The positive class label of the Custom Model.\n"
          },
          "predictionThreshold": {
            "type": "number",
            "description": "The prediction threshold of the Custom Model.\n"
          },
          "replicas": {
            "type": "integer",
            "description": "The replicas for the Custom Model.\n"
          },
          "resourceBundleId": {
            "type": "string",
            "description": "A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.\n"
          },
          "runtimeParameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/CustomModelRuntimeParameterValue:CustomModelRuntimeParameterValue"
            },
            "description": "The runtime parameter values for the Custom Model.\n"
          },
          "sourceLlmBlueprintId": {
            "type": "string",
            "description": "The ID of the source LLM Blueprint for the Custom Model.\n"
          },
          "sourceRemoteRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/CustomModelSourceRemoteRepository:CustomModelSourceRemoteRepository"
            },
            "description": "The source remote repositories for the Custom Model.\n"
          },
          "targetName": {
            "type": "string",
            "description": "The target name of the Custom Model.\n"
          },
          "targetType": {
            "type": "string",
            "description": "The target type of the Custom Model.\n"
          },
          "trainingDataPartitionColumn": {
            "type": "string",
            "description": "The name of the partition column in the training dataset assigned to the Custom Model.\n"
          },
          "trainingDatasetId": {
            "type": "string",
            "description": "The ID of the training dataset assigned to the Custom Model.\n"
          },
          "trainingDatasetName": {
            "type": "string",
            "description": "The name of the training dataset assigned to the Custom Model.\n"
          },
          "trainingDatasetVersionId": {
            "type": "string",
            "description": "The version ID of the training dataset assigned to the Custom Model.\n"
          },
          "useCaseIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Case IDs to add the Custom Model version to.\n"
          },
          "versionId": {
            "type": "string",
            "description": "The ID of the latest Custom Model version.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/customModelLlmValidation:CustomModelLlmValidation": {
      "description": "Custom Model LLM Validation\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.CustomModelLlmValidation(\"example\", {\n    deploymentId: datarobot_deployment.example.id,\n    promptColumnName: \"promptText\",\n    targetColumnName: \"resultText\",\n    chatModelId: \"111111111111\",\n    predictionTimeout: 100,\n    useCaseId: datarobot.use_case.example.id,\n});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.CustomModelLlmValidation(\"example\",\n    deployment_id=datarobot_deployment[\"example\"][\"id\"],\n    prompt_column_name=\"promptText\",\n    target_column_name=\"resultText\",\n    chat_model_id=\"111111111111\",\n    prediction_timeout=100,\n    use_case_id=datarobot[\"use_case\"][\"example\"][\"id\"])\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.CustomModelLlmValidation(\"example\", new()\n    {\n        DeploymentId = datarobot_deployment.Example.Id,\n        PromptColumnName = \"promptText\",\n        TargetColumnName = \"resultText\",\n        ChatModelId = \"111111111111\",\n        PredictionTimeout = 100,\n        UseCaseId = datarobot.Use_case.Example.Id,\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewCustomModelLlmValidation(ctx, \"example\", &datarobot.CustomModelLlmValidationArgs{\n\t\t\tDeploymentId:      pulumi.Any(datarobot_deployment.Example.Id),\n\t\t\tPromptColumnName:  pulumi.String(\"promptText\"),\n\t\t\tTargetColumnName:  pulumi.String(\"resultText\"),\n\t\t\tChatModelId:       pulumi.String(\"111111111111\"),\n\t\t\tPredictionTimeout: pulumi.Int(100),\n\t\t\tUseCaseId:         pulumi.Any(datarobot.Use_case.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.CustomModelLlmValidation;\nimport com.pulumi.datarobot.CustomModelLlmValidationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new CustomModelLlmValidation(\"example\", CustomModelLlmValidationArgs.builder()\n            .deploymentId(datarobot_deployment.example().id())\n            .promptColumnName(\"promptText\")\n            .targetColumnName(\"resultText\")\n            .chatModelId(\"111111111111\")\n            .predictionTimeout(100)\n            .useCaseId(datarobot.use_case().example().id())\n            .build());\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:CustomModelLlmValidation\n    properties:\n      deploymentId: ${datarobot_deployment.example.id}\n      # Optional\n      promptColumnName: promptText\n      targetColumnName: resultText\n      chatModelId: '111111111111'\n      predictionTimeout: 100\n      useCaseId: ${datarobot.use_case.example.id}\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "chatModelId": {
          "type": "string",
          "description": "The ID of the chat model to use for the custom model LLM validation.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The ID of the custom model deployment.\n"
        },
        "modelId": {
          "type": "string",
          "description": "The ID of the model used in the deployment.\n"
        },
        "name": {
          "type": "string",
          "description": "The name to use for the validated custom model.\n"
        },
        "predictionTimeout": {
          "type": "integer",
          "description": "The timeout in seconds for the prediction when validating a custom model. Defaults to 300.\n"
        },
        "promptColumnName": {
          "type": "string",
          "description": "The name of the column the custom model uses for prompt text input.\n"
        },
        "targetColumnName": {
          "type": "string",
          "description": "The name of the column the custom model uses for prediction output.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The ID of the use case to associate with the validated custom model.\n"
        }
      },
      "required": [
        "deploymentId",
        "modelId",
        "name",
        "predictionTimeout"
      ],
      "inputProperties": {
        "chatModelId": {
          "type": "string",
          "description": "The ID of the chat model to use for the custom model LLM validation.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The ID of the custom model deployment.\n"
        },
        "modelId": {
          "type": "string",
          "description": "The ID of the model used in the deployment.\n"
        },
        "name": {
          "type": "string",
          "description": "The name to use for the validated custom model.\n"
        },
        "predictionTimeout": {
          "type": "integer",
          "description": "The timeout in seconds for the prediction when validating a custom model. Defaults to 300.\n"
        },
        "promptColumnName": {
          "type": "string",
          "description": "The name of the column the custom model uses for prompt text input.\n"
        },
        "targetColumnName": {
          "type": "string",
          "description": "The name of the column the custom model uses for prediction output.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The ID of the use case to associate with the validated custom model.\n"
        }
      },
      "requiredInputs": [
        "deploymentId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering CustomModelLlmValidation resources.\n",
        "properties": {
          "chatModelId": {
            "type": "string",
            "description": "The ID of the chat model to use for the custom model LLM validation.\n"
          },
          "deploymentId": {
            "type": "string",
            "description": "The ID of the custom model deployment.\n"
          },
          "modelId": {
            "type": "string",
            "description": "The ID of the model used in the deployment.\n"
          },
          "name": {
            "type": "string",
            "description": "The name to use for the validated custom model.\n"
          },
          "predictionTimeout": {
            "type": "integer",
            "description": "The timeout in seconds for the prediction when validating a custom model. Defaults to 300.\n"
          },
          "promptColumnName": {
            "type": "string",
            "description": "The name of the column the custom model uses for prompt text input.\n"
          },
          "targetColumnName": {
            "type": "string",
            "description": "The name of the column the custom model uses for prediction output.\n"
          },
          "useCaseId": {
            "type": "string",
            "description": "The ID of the use case to associate with the validated custom model.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/datasetFromDatasource:DatasetFromDatasource": {
      "description": "Data Set from Data Source.\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.DatasetFromDatasource(\"example\", {\n    datasourceId: datarobot_datasource.example.id,\n    credentialId: datarobot_credential.example.id,\n    doSnapshot: false,\n    persistDataAfterIngestion: false,\n    useKerberos: true,\n    categories: [\"TRAINING\"],\n    useCaseIds: [datarobot_use_case.example.id],\n});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.DatasetFromDatasource(\"example\",\n    datasource_id=datarobot_datasource[\"example\"][\"id\"],\n    credential_id=datarobot_credential[\"example\"][\"id\"],\n    do_snapshot=False,\n    persist_data_after_ingestion=False,\n    use_kerberos=True,\n    categories=[\"TRAINING\"],\n    use_case_ids=[datarobot_use_case[\"example\"][\"id\"]])\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.DatasetFromDatasource(\"example\", new()\n    {\n        DatasourceId = datarobot_datasource.Example.Id,\n        CredentialId = datarobot_credential.Example.Id,\n        DoSnapshot = false,\n        PersistDataAfterIngestion = false,\n        UseKerberos = true,\n        Categories = new[]\n        {\n            \"TRAINING\",\n        },\n        UseCaseIds = new[]\n        {\n            datarobot_use_case.Example.Id,\n        },\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewDatasetFromDatasource(ctx, \"example\", &datarobot.DatasetFromDatasourceArgs{\n\t\t\tDatasourceId:              pulumi.Any(datarobot_datasource.Example.Id),\n\t\t\tCredentialId:              pulumi.Any(datarobot_credential.Example.Id),\n\t\t\tDoSnapshot:                pulumi.Bool(false),\n\t\t\tPersistDataAfterIngestion: pulumi.Bool(false),\n\t\t\tUseKerberos:               pulumi.Bool(true),\n\t\t\tCategories: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"TRAINING\"),\n\t\t\t},\n\t\t\tUseCaseIds: pulumi.StringArray{\n\t\t\t\tdatarobot_use_case.Example.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.DatasetFromDatasource;\nimport com.pulumi.datarobot.DatasetFromDatasourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DatasetFromDatasource(\"example\", DatasetFromDatasourceArgs.builder()\n            .datasourceId(datarobot_datasource.example().id())\n            .credentialId(datarobot_credential.example().id())\n            .doSnapshot(false)\n            .persistDataAfterIngestion(false)\n            .useKerberos(true)\n            .categories(\"TRAINING\")\n            .useCaseIds(datarobot_use_case.example().id())\n            .build());\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:DatasetFromDatasource\n    properties:\n      datasourceId: ${datarobot_datasource.example.id}\n      credentialId: ${datarobot_credential.example.id}\n      # Optional\n      doSnapshot: false\n      persistDataAfterIngestion: false\n      useKerberos: true\n      categories:\n        - TRAINING\n      useCaseIds:\n        - ${datarobot_use_case.example.id}\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings describing the intended use of the dataset.\n"
        },
        "credentialId": {
          "type": "string",
          "description": "The ID of the set of credentials to use.\n"
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID for the DataSource to use as the source of data.\n"
        },
        "doSnapshot": {
          "type": "boolean",
          "description": "If unset, uses the server default: True. If true, creates a snapshot dataset; if false, creates a remote dataset.\n"
        },
        "persistDataAfterIngestion": {
          "type": "boolean",
          "description": "If unset, uses the server default: True. If true, will enforce saving all data (for download and sampling) and will allow a user to view extended data profile (which includes data statistics like min/max/median/mean, histogram, etc.). If false, will not enforce saving data. The data schema (feature names and types) still will be available.\n"
        },
        "sampleSizeRows": {
          "type": "integer",
          "description": "The number of rows fetched during dataset registration.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Dataset to.\n"
        },
        "useKerberos": {
          "type": "boolean",
          "description": "If unset, uses the server default: False. If true, use kerberos authentication for database authentication.\n"
        }
      },
      "required": [
        "credentialId",
        "dataSourceId",
        "doSnapshot",
        "persistDataAfterIngestion",
        "useKerberos"
      ],
      "inputProperties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of strings describing the intended use of the dataset.\n"
        },
        "credentialId": {
          "type": "string",
          "description": "The ID of the set of credentials to use.\n"
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID for the DataSource to use as the source of data.\n"
        },
        "doSnapshot": {
          "type": "boolean",
          "description": "If unset, uses the server default: True. If true, creates a snapshot dataset; if false, creates a remote dataset.\n"
        },
        "persistDataAfterIngestion": {
          "type": "boolean",
          "description": "If unset, uses the server default: True. If true, will enforce saving all data (for download and sampling) and will allow a user to view extended data profile (which includes data statistics like min/max/median/mean, histogram, etc.). If false, will not enforce saving data. The data schema (feature names and types) still will be available.\n"
        },
        "sampleSizeRows": {
          "type": "integer",
          "description": "The number of rows fetched during dataset registration.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Dataset to.\n"
        },
        "useKerberos": {
          "type": "boolean",
          "description": "If unset, uses the server default: False. If true, use kerberos authentication for database authentication.\n"
        }
      },
      "requiredInputs": [
        "credentialId",
        "dataSourceId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering DatasetFromDatasource resources.\n",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings describing the intended use of the dataset.\n"
          },
          "credentialId": {
            "type": "string",
            "description": "The ID of the set of credentials to use.\n"
          },
          "dataSourceId": {
            "type": "string",
            "description": "The ID for the DataSource to use as the source of data.\n"
          },
          "doSnapshot": {
            "type": "boolean",
            "description": "If unset, uses the server default: True. If true, creates a snapshot dataset; if false, creates a remote dataset.\n"
          },
          "persistDataAfterIngestion": {
            "type": "boolean",
            "description": "If unset, uses the server default: True. If true, will enforce saving all data (for download and sampling) and will allow a user to view extended data profile (which includes data statistics like min/max/median/mean, histogram, etc.). If false, will not enforce saving data. The data schema (feature names and types) still will be available.\n"
          },
          "sampleSizeRows": {
            "type": "integer",
            "description": "The number of rows fetched during dataset registration.\n"
          },
          "useCaseIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Case IDs to add the Dataset to.\n"
          },
          "useKerberos": {
            "type": "boolean",
            "description": "If unset, uses the server default: False. If true, use kerberos authentication for database authentication.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/datasetFromFile:DatasetFromFile": {
      "description": "Data set from file\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.DatasetFromFile(\"example\", {\n    filePath: \"[Path to file to upload]\",\n    useCaseIds: [datarobot_use_case.example.id],\n});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.DatasetFromFile(\"example\",\n    file_path=\"[Path to file to upload]\",\n    use_case_ids=[datarobot_use_case[\"example\"][\"id\"]])\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.DatasetFromFile(\"example\", new()\n    {\n        FilePath = \"[Path to file to upload]\",\n        UseCaseIds = new[]\n        {\n            datarobot_use_case.Example.Id,\n        },\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewDatasetFromFile(ctx, \"example\", &datarobot.DatasetFromFileArgs{\n\t\t\tFilePath: pulumi.String(\"[Path to file to upload]\"),\n\t\t\tUseCaseIds: pulumi.StringArray{\n\t\t\t\tdatarobot_use_case.Example.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.DatasetFromFile;\nimport com.pulumi.datarobot.DatasetFromFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DatasetFromFile(\"example\", DatasetFromFileArgs.builder()\n            .filePath(\"[Path to file to upload]\")\n            .useCaseIds(datarobot_use_case.example().id())\n            .build());\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:DatasetFromFile\n    properties:\n      filePath: '[Path to file to upload]'\n      useCaseIds:\n        - ${datarobot_use_case.example.id}\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "fileHash": {
          "type": "string",
          "description": "The hash of the file contents.\n"
        },
        "filePath": {
          "type": "string",
          "description": "The path to the file to upload.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Dataset. Defaults to the file name.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Dataset to.\n"
        }
      },
      "required": [
        "fileHash",
        "filePath",
        "name"
      ],
      "inputProperties": {
        "filePath": {
          "type": "string",
          "description": "The path to the file to upload.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Dataset. Defaults to the file name.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Dataset to.\n"
        }
      },
      "requiredInputs": [
        "filePath"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering DatasetFromFile resources.\n",
        "properties": {
          "fileHash": {
            "type": "string",
            "description": "The hash of the file contents.\n"
          },
          "filePath": {
            "type": "string",
            "description": "The path to the file to upload.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Dataset. Defaults to the file name.\n"
          },
          "useCaseIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Case IDs to add the Dataset to.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/datasetFromUrl:DatasetFromUrl": {
      "description": "Data set from file\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.DatasetFromUrl(\"example\", {\n    url: \"[URL to upload from]\",\n    useCaseIds: [datarobot_use_case.example.id],\n});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.DatasetFromUrl(\"example\",\n    url=\"[URL to upload from]\",\n    use_case_ids=[datarobot_use_case[\"example\"][\"id\"]])\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.DatasetFromUrl(\"example\", new()\n    {\n        Url = \"[URL to upload from]\",\n        UseCaseIds = new[]\n        {\n            datarobot_use_case.Example.Id,\n        },\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewDatasetFromUrl(ctx, \"example\", &datarobot.DatasetFromUrlArgs{\n\t\t\tUrl: pulumi.String(\"[URL to upload from]\"),\n\t\t\tUseCaseIds: pulumi.StringArray{\n\t\t\t\tdatarobot_use_case.Example.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.DatasetFromUrl;\nimport com.pulumi.datarobot.DatasetFromUrlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DatasetFromUrl(\"example\", DatasetFromUrlArgs.builder()\n            .url(\"[URL to upload from]\")\n            .useCaseIds(datarobot_use_case.example().id())\n            .build());\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:DatasetFromUrl\n    properties:\n      url: '[URL to upload from]'\n      useCaseIds:\n        - ${datarobot_use_case.example.id}\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the Dataset.\n"
        },
        "url": {
          "type": "string",
          "description": "The URL to upload the Dataset from.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Dataset to.\n"
        }
      },
      "required": [
        "name",
        "url"
      ],
      "inputProperties": {
        "name": {
          "type": "string",
          "description": "The name of the Dataset.\n"
        },
        "url": {
          "type": "string",
          "description": "The URL to upload the Dataset from.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Dataset to.\n"
        }
      },
      "requiredInputs": [
        "url"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering DatasetFromUrl resources.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Dataset.\n"
          },
          "url": {
            "type": "string",
            "description": "The URL to upload the Dataset from.\n"
          },
          "useCaseIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Case IDs to add the Dataset to.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/datasource:Datasource": {
      "description": "Data source\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  exampleDatabaseTable:\n    type: datarobot:Datasource\n    properties:\n      canonicalName: Example Database Table Data Source\n      dataSourceType: dr-database-v1\n      params:\n        data_store_id: ${datarobot_datastore.example_database.id}\n        catalog: my-catalog\n        schema: my-schema\n        table: my-table\n  exampleDatabaseQuery:\n    type: datarobot:Datasource\n    properties:\n      canonicalName: Example Database Query Data Source\n      dataSourceType: dr-database-v1\n      params:\n        data_store_id: ${datarobot_datastore.example_database.id}\n        query: SELECT * FROM my-table\n  exampleConnector:\n    type: datarobot:Datasource\n    properties:\n      canonicalName: Example Connector Data Source\n      dataSourceType: dr-connector-v1\n      params:\n        data_store_id: ${datarobot_datastore.example_connector.id}\n        path: /my-folder/my-file.csv\noutputs:\n  exampleId: ${exampleDatabaseTable.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "canonicalName": {
          "type": "string",
          "description": "The user-friendly name of the data source.\n"
        },
        "dataSourceType": {
          "type": "string",
          "description": "The type of data source.\n"
        },
        "params": {
          "$ref": "#/types/datarobot:index/DatasourceParams:DatasourceParams",
          "description": "The data source parameters.\n"
        }
      },
      "required": [
        "canonicalName",
        "dataSourceType",
        "params"
      ],
      "inputProperties": {
        "canonicalName": {
          "type": "string",
          "description": "The user-friendly name of the data source.\n"
        },
        "dataSourceType": {
          "type": "string",
          "description": "The type of data source.\n"
        },
        "params": {
          "$ref": "#/types/datarobot:index/DatasourceParams:DatasourceParams",
          "description": "The data source parameters.\n"
        }
      },
      "requiredInputs": [
        "canonicalName",
        "dataSourceType",
        "params"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Datasource resources.\n",
        "properties": {
          "canonicalName": {
            "type": "string",
            "description": "The user-friendly name of the data source.\n"
          },
          "dataSourceType": {
            "type": "string",
            "description": "The type of data source.\n"
          },
          "params": {
            "$ref": "#/types/datarobot:index/DatasourceParams:DatasourceParams",
            "description": "The data source parameters.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/datastore:Datastore": {
      "description": "Data store\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleConnector = new datarobot.Datastore(\"exampleConnector\", {\n    canonicalName: \"Example Connector Datastore\",\n    dataStoreType: \"dr-connector-v1\",\n    connectorId: \"65538041dde6a1d664d0b2ec\",\n    fields: [{\n        id: \"fs.defaultFS\",\n        name: \"Bucket Name\",\n        value: \"my-bucket\",\n    }],\n});\nconst exampleJdbc = new datarobot.Datastore(\"exampleJdbc\", {\n    canonicalName: \"Example JDBC Datastore\",\n    dataStoreType: \"jdbc\",\n    driverId: \"5b4752844bf542000175dbea\",\n    fields: [\n        {\n            name: \"address\",\n            value: \"my-address\",\n        },\n        {\n            name: \"database\",\n            value: \"my-database\",\n        },\n    ],\n});\nconst exampleDatabase = new datarobot.Datastore(\"exampleDatabase\", {\n    canonicalName: \"Example Database Datastore\",\n    dataStoreType: \"dr-database-v1\",\n    driverId: \"64a288a50636598d75df7f82\",\n    fields: [{\n        id: \"bq.project_id\",\n        name: \"Project Id\",\n        value: \"project-id\",\n    }],\n});\nexport const exampleConnectorId = exampleConnector.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_connector = datarobot.Datastore(\"exampleConnector\",\n    canonical_name=\"Example Connector Datastore\",\n    data_store_type=\"dr-connector-v1\",\n    connector_id=\"65538041dde6a1d664d0b2ec\",\n    fields=[{\n        \"id\": \"fs.defaultFS\",\n        \"name\": \"Bucket Name\",\n        \"value\": \"my-bucket\",\n    }])\nexample_jdbc = datarobot.Datastore(\"exampleJdbc\",\n    canonical_name=\"Example JDBC Datastore\",\n    data_store_type=\"jdbc\",\n    driver_id=\"5b4752844bf542000175dbea\",\n    fields=[\n        {\n            \"name\": \"address\",\n            \"value\": \"my-address\",\n        },\n        {\n            \"name\": \"database\",\n            \"value\": \"my-database\",\n        },\n    ])\nexample_database = datarobot.Datastore(\"exampleDatabase\",\n    canonical_name=\"Example Database Datastore\",\n    data_store_type=\"dr-database-v1\",\n    driver_id=\"64a288a50636598d75df7f82\",\n    fields=[{\n        \"id\": \"bq.project_id\",\n        \"name\": \"Project Id\",\n        \"value\": \"project-id\",\n    }])\npulumi.export(\"exampleConnectorId\", example_connector.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleConnector = new Datarobot.Datastore(\"exampleConnector\", new()\n    {\n        CanonicalName = \"Example Connector Datastore\",\n        DataStoreType = \"dr-connector-v1\",\n        ConnectorId = \"65538041dde6a1d664d0b2ec\",\n        Fields = new[]\n        {\n            \n            {\n                { \"id\", \"fs.defaultFS\" },\n                { \"name\", \"Bucket Name\" },\n                { \"value\", \"my-bucket\" },\n            },\n        },\n    });\n\n    var exampleJdbc = new Datarobot.Datastore(\"exampleJdbc\", new()\n    {\n        CanonicalName = \"Example JDBC Datastore\",\n        DataStoreType = \"jdbc\",\n        DriverId = \"5b4752844bf542000175dbea\",\n        Fields = new[]\n        {\n            \n            {\n                { \"name\", \"address\" },\n                { \"value\", \"my-address\" },\n            },\n            \n            {\n                { \"name\", \"database\" },\n                { \"value\", \"my-database\" },\n            },\n        },\n    });\n\n    var exampleDatabase = new Datarobot.Datastore(\"exampleDatabase\", new()\n    {\n        CanonicalName = \"Example Database Datastore\",\n        DataStoreType = \"dr-database-v1\",\n        DriverId = \"64a288a50636598d75df7f82\",\n        Fields = new[]\n        {\n            \n            {\n                { \"id\", \"bq.project_id\" },\n                { \"name\", \"Project Id\" },\n                { \"value\", \"project-id\" },\n            },\n        },\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"exampleConnectorId\"] = exampleConnector.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleConnector, err := datarobot.NewDatastore(ctx, \"exampleConnector\", &datarobot.DatastoreArgs{\n\t\t\tCanonicalName: pulumi.String(\"Example Connector Datastore\"),\n\t\t\tDataStoreType: pulumi.String(\"dr-connector-v1\"),\n\t\t\tConnectorId:   pulumi.String(\"65538041dde6a1d664d0b2ec\"),\n\t\t\tFields: pulumi.StringMapArray{\n\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\"id\":    pulumi.String(\"fs.defaultFS\"),\n\t\t\t\t\t\"name\":  pulumi.String(\"Bucket Name\"),\n\t\t\t\t\t\"value\": pulumi.String(\"my-bucket\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewDatastore(ctx, \"exampleJdbc\", &datarobot.DatastoreArgs{\n\t\t\tCanonicalName: pulumi.String(\"Example JDBC Datastore\"),\n\t\t\tDataStoreType: pulumi.String(\"jdbc\"),\n\t\t\tDriverId:      pulumi.String(\"5b4752844bf542000175dbea\"),\n\t\t\tFields: pulumi.StringMapArray{\n\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\"name\":  pulumi.String(\"address\"),\n\t\t\t\t\t\"value\": pulumi.String(\"my-address\"),\n\t\t\t\t},\n\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\"name\":  pulumi.String(\"database\"),\n\t\t\t\t\t\"value\": pulumi.String(\"my-database\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewDatastore(ctx, \"exampleDatabase\", &datarobot.DatastoreArgs{\n\t\t\tCanonicalName: pulumi.String(\"Example Database Datastore\"),\n\t\t\tDataStoreType: pulumi.String(\"dr-database-v1\"),\n\t\t\tDriverId:      pulumi.String(\"64a288a50636598d75df7f82\"),\n\t\t\tFields: pulumi.StringMapArray{\n\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\"id\":    pulumi.String(\"bq.project_id\"),\n\t\t\t\t\t\"name\":  pulumi.String(\"Project Id\"),\n\t\t\t\t\t\"value\": pulumi.String(\"project-id\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleConnectorId\", exampleConnector.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.Datastore;\nimport com.pulumi.datarobot.DatastoreArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleConnector = new Datastore(\"exampleConnector\", DatastoreArgs.builder()\n            .canonicalName(\"Example Connector Datastore\")\n            .dataStoreType(\"dr-connector-v1\")\n            .connectorId(\"65538041dde6a1d664d0b2ec\")\n            .fields(Map.ofEntries(\n                Map.entry(\"id\", \"fs.defaultFS\"),\n                Map.entry(\"name\", \"Bucket Name\"),\n                Map.entry(\"value\", \"my-bucket\")\n            ))\n            .build());\n\n        var exampleJdbc = new Datastore(\"exampleJdbc\", DatastoreArgs.builder()\n            .canonicalName(\"Example JDBC Datastore\")\n            .dataStoreType(\"jdbc\")\n            .driverId(\"5b4752844bf542000175dbea\")\n            .fields(            \n                Map.ofEntries(\n                    Map.entry(\"name\", \"address\"),\n                    Map.entry(\"value\", \"my-address\")\n                ),\n                Map.ofEntries(\n                    Map.entry(\"name\", \"database\"),\n                    Map.entry(\"value\", \"my-database\")\n                ))\n            .build());\n\n        var exampleDatabase = new Datastore(\"exampleDatabase\", DatastoreArgs.builder()\n            .canonicalName(\"Example Database Datastore\")\n            .dataStoreType(\"dr-database-v1\")\n            .driverId(\"64a288a50636598d75df7f82\")\n            .fields(Map.ofEntries(\n                Map.entry(\"id\", \"bq.project_id\"),\n                Map.entry(\"name\", \"Project Id\"),\n                Map.entry(\"value\", \"project-id\")\n            ))\n            .build());\n\n        ctx.export(\"exampleConnectorId\", exampleConnector.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleConnector:\n    type: datarobot:Datastore\n    properties:\n      canonicalName: Example Connector Datastore\n      dataStoreType: dr-connector-v1\n      connectorId: 65538041dde6a1d664d0b2ec\n      fields:\n        - id: fs.defaultFS\n          name: Bucket Name\n          value: my-bucket\n  exampleJdbc:\n    type: datarobot:Datastore\n    properties:\n      canonicalName: Example JDBC Datastore\n      dataStoreType: jdbc\n      driverId: 5b4752844bf542000175dbea\n      fields:\n        - name: address\n          value: my-address\n        - name: database\n          value: my-database\n  exampleDatabase:\n    type: datarobot:Datastore\n    properties:\n      canonicalName: Example Database Datastore\n      dataStoreType: dr-database-v1\n      driverId: 64a288a50636598d75df7f82\n      fields:\n        - id: bq.project_id\n          name: Project Id\n          value: project-id\noutputs:\n  exampleConnectorId: ${exampleConnector.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "canonicalName": {
          "type": "string",
          "description": "The user-friendly name of the data store.\n"
        },
        "connectorId": {
          "type": "string",
          "description": "The identifier of the Connector if data*store*type is DR*CONNECTOR*V1\n"
        },
        "dataStoreType": {
          "type": "string",
          "description": "The type of data store.\n"
        },
        "driverId": {
          "type": "string",
          "description": "The identifier of the DataDriver if data*store*type is JDBC or DR*DATABASE*V1\n"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": "If the type is dr-database-v1, then the fields specify the configuration.\n"
        },
        "jdbcUrl": {
          "type": "string",
          "description": "The full JDBC URL (for example: jdbc:postgresql://my.dbaddress.org:5432/my_db).\n"
        }
      },
      "required": [
        "canonicalName",
        "dataStoreType"
      ],
      "inputProperties": {
        "canonicalName": {
          "type": "string",
          "description": "The user-friendly name of the data store.\n"
        },
        "connectorId": {
          "type": "string",
          "description": "The identifier of the Connector if data*store*type is DR*CONNECTOR*V1\n"
        },
        "dataStoreType": {
          "type": "string",
          "description": "The type of data store.\n"
        },
        "driverId": {
          "type": "string",
          "description": "The identifier of the DataDriver if data*store*type is JDBC or DR*DATABASE*V1\n"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": "If the type is dr-database-v1, then the fields specify the configuration.\n"
        },
        "jdbcUrl": {
          "type": "string",
          "description": "The full JDBC URL (for example: jdbc:postgresql://my.dbaddress.org:5432/my_db).\n"
        }
      },
      "requiredInputs": [
        "canonicalName",
        "dataStoreType"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Datastore resources.\n",
        "properties": {
          "canonicalName": {
            "type": "string",
            "description": "The user-friendly name of the data store.\n"
          },
          "connectorId": {
            "type": "string",
            "description": "The identifier of the Connector if data*store*type is DR*CONNECTOR*V1\n"
          },
          "dataStoreType": {
            "type": "string",
            "description": "The type of data store.\n"
          },
          "driverId": {
            "type": "string",
            "description": "The identifier of the DataDriver if data*store*type is JDBC or DR*DATABASE*V1\n"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "If the type is dr-database-v1, then the fields specify the configuration.\n"
          },
          "jdbcUrl": {
            "type": "string",
            "description": "The full JDBC URL (for example: jdbc:postgresql://my.dbaddress.org:5432/my_db).\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/deployment:Deployment": {
      "description": "Deployment\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleCustomModel = new datarobot.CustomModel(\"exampleCustomModel\", {\n    description: \"Description for the example custom model\",\n    targetType: \"Binary\",\n    targetName: \"my_label\",\n    baseEnvironmentId: \"65f9b27eab986d30d4c64268\",\n    files: [\"example.py\"],\n});\nconst exampleRegisteredModel = new datarobot.RegisteredModel(\"exampleRegisteredModel\", {\n    customModelVersionId: exampleCustomModel.versionId,\n    description: \"Description for the example registered model\",\n});\nconst examplePredictionEnvironment = new datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", {\n    description: \"Description for the example prediction environment\",\n    platform: \"datarobotServerless\",\n});\nconst exampleDeployment = new datarobot.Deployment(\"exampleDeployment\", {\n    label: \"An example deployment\",\n    predictionEnvironmentId: examplePredictionEnvironment.id,\n    registeredModelVersionId: exampleRegisteredModel.versionId,\n    challengerModelsSettings: {},\n    challengerReplaySettings: {},\n    segmentAnalysisSettings: {},\n    biasAndFairnessSettings: {},\n    predictionsByForecastDateSettings: {},\n    driftTrackingSettings: {},\n    associationIdSettings: {},\n    predictionsDataCollectionSettings: {},\n    predictionWarningSettings: {},\n    predictionIntervalsSettings: {},\n    predictionsSettings: {},\n    featureCacheSettings: {},\n    healthSettings: {},\n    runtimeParameterValues: [{\n        key: \"EXAMPLE_PARAM\",\n        type: \"string\",\n        value: \"val\",\n    }],\n    retrainingSettings: {},\n});\n// Note: Deployment operations can take significant time, especially for GPU provisioning.\n// Use DATAROBOT_TIMEOUT_MINUTES environment variable to increase the default 30-minute timeout:\n// export DATAROBOT_TIMEOUT_MINUTES=\"120\"  # 2 hours for GPU deployments\nexport const datarobotDeploymentId = exampleDeployment.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_custom_model = datarobot.CustomModel(\"exampleCustomModel\",\n    description=\"Description for the example custom model\",\n    target_type=\"Binary\",\n    target_name=\"my_label\",\n    base_environment_id=\"65f9b27eab986d30d4c64268\",\n    files=[\"example.py\"])\nexample_registered_model = datarobot.RegisteredModel(\"exampleRegisteredModel\",\n    custom_model_version_id=example_custom_model.version_id,\n    description=\"Description for the example registered model\")\nexample_prediction_environment = datarobot.PredictionEnvironment(\"examplePredictionEnvironment\",\n    description=\"Description for the example prediction environment\",\n    platform=\"datarobotServerless\")\nexample_deployment = datarobot.Deployment(\"exampleDeployment\",\n    label=\"An example deployment\",\n    prediction_environment_id=example_prediction_environment.id,\n    registered_model_version_id=example_registered_model.version_id,\n    challenger_models_settings={},\n    challenger_replay_settings={},\n    segment_analysis_settings={},\n    bias_and_fairness_settings={},\n    predictions_by_forecast_date_settings={},\n    drift_tracking_settings={},\n    association_id_settings={},\n    predictions_data_collection_settings={},\n    prediction_warning_settings={},\n    prediction_intervals_settings={},\n    predictions_settings={},\n    feature_cache_settings={},\n    health_settings={},\n    runtime_parameter_values=[{\n        \"key\": \"EXAMPLE_PARAM\",\n        \"type\": \"string\",\n        \"value\": \"val\",\n    }],\n    retraining_settings={})\n# Note: Deployment operations can take significant time, especially for GPU provisioning.\n# Use DATAROBOT_TIMEOUT_MINUTES environment variable to increase the default 30-minute timeout:\n# export DATAROBOT_TIMEOUT_MINUTES=\"120\"  # 2 hours for GPU deployments\npulumi.export(\"datarobotDeploymentId\", example_deployment.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleCustomModel = new Datarobot.CustomModel(\"exampleCustomModel\", new()\n    {\n        Description = \"Description for the example custom model\",\n        TargetType = \"Binary\",\n        TargetName = \"my_label\",\n        BaseEnvironmentId = \"65f9b27eab986d30d4c64268\",\n        Files = new[]\n        {\n            \"example.py\",\n        },\n    });\n\n    var exampleRegisteredModel = new Datarobot.RegisteredModel(\"exampleRegisteredModel\", new()\n    {\n        CustomModelVersionId = exampleCustomModel.VersionId,\n        Description = \"Description for the example registered model\",\n    });\n\n    var examplePredictionEnvironment = new Datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", new()\n    {\n        Description = \"Description for the example prediction environment\",\n        Platform = \"datarobotServerless\",\n    });\n\n    var exampleDeployment = new Datarobot.Deployment(\"exampleDeployment\", new()\n    {\n        Label = \"An example deployment\",\n        PredictionEnvironmentId = examplePredictionEnvironment.Id,\n        RegisteredModelVersionId = exampleRegisteredModel.VersionId,\n        ChallengerModelsSettings = null,\n        ChallengerReplaySettings = null,\n        SegmentAnalysisSettings = null,\n        BiasAndFairnessSettings = null,\n        PredictionsByForecastDateSettings = null,\n        DriftTrackingSettings = null,\n        AssociationIdSettings = null,\n        PredictionsDataCollectionSettings = null,\n        PredictionWarningSettings = null,\n        PredictionIntervalsSettings = null,\n        PredictionsSettings = null,\n        FeatureCacheSettings = null,\n        HealthSettings = null,\n        RuntimeParameterValues = new[]\n        {\n            new Datarobot.Inputs.DeploymentRuntimeParameterValueArgs\n            {\n                Key = \"EXAMPLE_PARAM\",\n                Type = \"string\",\n                Value = \"val\",\n            },\n        },\n        RetrainingSettings = null,\n    });\n\n    // Note: Deployment operations can take significant time, especially for GPU provisioning.\n    // Use DATAROBOT_TIMEOUT_MINUTES environment variable to increase the default 30-minute timeout:\n    // export DATAROBOT_TIMEOUT_MINUTES=\"120\"  # 2 hours for GPU deployments\n    return new Dictionary<string, object?>\n    {\n        [\"datarobotDeploymentId\"] = exampleDeployment.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomModel, err := datarobot.NewCustomModel(ctx, \"exampleCustomModel\", &datarobot.CustomModelArgs{\n\t\t\tDescription:       pulumi.String(\"Description for the example custom model\"),\n\t\t\tTargetType:        pulumi.String(\"Binary\"),\n\t\t\tTargetName:        pulumi.String(\"my_label\"),\n\t\t\tBaseEnvironmentId: pulumi.String(\"65f9b27eab986d30d4c64268\"),\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t\"example.py\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRegisteredModel, err := datarobot.NewRegisteredModel(ctx, \"exampleRegisteredModel\", &datarobot.RegisteredModelArgs{\n\t\t\tCustomModelVersionId: exampleCustomModel.VersionId,\n\t\t\tDescription:          pulumi.String(\"Description for the example registered model\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePredictionEnvironment, err := datarobot.NewPredictionEnvironment(ctx, \"examplePredictionEnvironment\", &datarobot.PredictionEnvironmentArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example prediction environment\"),\n\t\t\tPlatform:    pulumi.String(\"datarobotServerless\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDeployment, err := datarobot.NewDeployment(ctx, \"exampleDeployment\", &datarobot.DeploymentArgs{\n\t\t\tLabel:                             pulumi.String(\"An example deployment\"),\n\t\t\tPredictionEnvironmentId:           examplePredictionEnvironment.ID(),\n\t\t\tRegisteredModelVersionId:          exampleRegisteredModel.VersionId,\n\t\t\tChallengerModelsSettings:          &datarobot.DeploymentChallengerModelsSettingsArgs{},\n\t\t\tChallengerReplaySettings:          &datarobot.DeploymentChallengerReplaySettingsArgs{},\n\t\t\tSegmentAnalysisSettings:           &datarobot.DeploymentSegmentAnalysisSettingsArgs{},\n\t\t\tBiasAndFairnessSettings:           &datarobot.DeploymentBiasAndFairnessSettingsArgs{},\n\t\t\tPredictionsByForecastDateSettings: &datarobot.DeploymentPredictionsByForecastDateSettingsArgs{},\n\t\t\tDriftTrackingSettings:             &datarobot.DeploymentDriftTrackingSettingsArgs{},\n\t\t\tAssociationIdSettings:             &datarobot.DeploymentAssociationIdSettingsArgs{},\n\t\t\tPredictionsDataCollectionSettings: &datarobot.DeploymentPredictionsDataCollectionSettingsArgs{},\n\t\t\tPredictionWarningSettings:         &datarobot.DeploymentPredictionWarningSettingsArgs{},\n\t\t\tPredictionIntervalsSettings:       &datarobot.DeploymentPredictionIntervalsSettingsArgs{},\n\t\t\tPredictionsSettings:               &datarobot.DeploymentPredictionsSettingsArgs{},\n\t\t\tFeatureCacheSettings:              &datarobot.DeploymentFeatureCacheSettingsArgs{},\n\t\t\tHealthSettings:                    &datarobot.DeploymentHealthSettingsArgs{},\n\t\t\tRuntimeParameterValues: datarobot.DeploymentRuntimeParameterValueArray{\n\t\t\t\t&datarobot.DeploymentRuntimeParameterValueArgs{\n\t\t\t\t\tKey:   pulumi.String(\"EXAMPLE_PARAM\"),\n\t\t\t\t\tType:  pulumi.String(\"string\"),\n\t\t\t\t\tValue: pulumi.String(\"val\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRetrainingSettings: &datarobot.DeploymentRetrainingSettingsArgs{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotDeploymentId\", exampleDeployment.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.CustomModel;\nimport com.pulumi.datarobot.CustomModelArgs;\nimport com.pulumi.datarobot.RegisteredModel;\nimport com.pulumi.datarobot.RegisteredModelArgs;\nimport com.pulumi.datarobot.PredictionEnvironment;\nimport com.pulumi.datarobot.PredictionEnvironmentArgs;\nimport com.pulumi.datarobot.Deployment;\nimport com.pulumi.datarobot.DeploymentArgs;\nimport com.pulumi.datarobot.inputs.DeploymentChallengerModelsSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentChallengerReplaySettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentSegmentAnalysisSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentBiasAndFairnessSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentPredictionsByForecastDateSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentDriftTrackingSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentAssociationIdSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentPredictionsDataCollectionSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentPredictionWarningSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentPredictionIntervalsSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentPredictionsSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentFeatureCacheSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentHealthSettingsArgs;\nimport com.pulumi.datarobot.inputs.DeploymentRuntimeParameterValueArgs;\nimport com.pulumi.datarobot.inputs.DeploymentRetrainingSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCustomModel = new CustomModel(\"exampleCustomModel\", CustomModelArgs.builder()\n            .description(\"Description for the example custom model\")\n            .targetType(\"Binary\")\n            .targetName(\"my_label\")\n            .baseEnvironmentId(\"65f9b27eab986d30d4c64268\")\n            .files(\"example.py\")\n            .build());\n\n        var exampleRegisteredModel = new RegisteredModel(\"exampleRegisteredModel\", RegisteredModelArgs.builder()\n            .customModelVersionId(exampleCustomModel.versionId())\n            .description(\"Description for the example registered model\")\n            .build());\n\n        var examplePredictionEnvironment = new PredictionEnvironment(\"examplePredictionEnvironment\", PredictionEnvironmentArgs.builder()\n            .description(\"Description for the example prediction environment\")\n            .platform(\"datarobotServerless\")\n            .build());\n\n        var exampleDeployment = new Deployment(\"exampleDeployment\", DeploymentArgs.builder()\n            .label(\"An example deployment\")\n            .predictionEnvironmentId(examplePredictionEnvironment.id())\n            .registeredModelVersionId(exampleRegisteredModel.versionId())\n            .challengerModelsSettings(DeploymentChallengerModelsSettingsArgs.builder()\n                .build())\n            .challengerReplaySettings(DeploymentChallengerReplaySettingsArgs.builder()\n                .build())\n            .segmentAnalysisSettings(DeploymentSegmentAnalysisSettingsArgs.builder()\n                .build())\n            .biasAndFairnessSettings(DeploymentBiasAndFairnessSettingsArgs.builder()\n                .build())\n            .predictionsByForecastDateSettings(DeploymentPredictionsByForecastDateSettingsArgs.builder()\n                .build())\n            .driftTrackingSettings(DeploymentDriftTrackingSettingsArgs.builder()\n                .build())\n            .associationIdSettings(DeploymentAssociationIdSettingsArgs.builder()\n                .build())\n            .predictionsDataCollectionSettings(DeploymentPredictionsDataCollectionSettingsArgs.builder()\n                .build())\n            .predictionWarningSettings(DeploymentPredictionWarningSettingsArgs.builder()\n                .build())\n            .predictionIntervalsSettings(DeploymentPredictionIntervalsSettingsArgs.builder()\n                .build())\n            .predictionsSettings(DeploymentPredictionsSettingsArgs.builder()\n                .build())\n            .featureCacheSettings(DeploymentFeatureCacheSettingsArgs.builder()\n                .build())\n            .healthSettings(DeploymentHealthSettingsArgs.builder()\n                .build())\n            .runtimeParameterValues(DeploymentRuntimeParameterValueArgs.builder()\n                .key(\"EXAMPLE_PARAM\")\n                .type(\"string\")\n                .value(\"val\")\n                .build())\n            .retrainingSettings(DeploymentRetrainingSettingsArgs.builder()\n                .build())\n            .build());\n\n        // Note: Deployment operations can take significant time, especially for GPU provisioning.\n        // Use DATAROBOT_TIMEOUT_MINUTES environment variable to increase the default 30-minute timeout:\n        // export DATAROBOT_TIMEOUT_MINUTES=\"120\"  # 2 hours for GPU deployments\n        ctx.export(\"datarobotDeploymentId\", exampleDeployment.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomModel:\n    type: datarobot:CustomModel\n    properties:\n      description: Description for the example custom model\n      targetType: Binary\n      targetName: my_label\n      baseEnvironmentId: 65f9b27eab986d30d4c64268\n      files:\n        - example.py\n  exampleRegisteredModel:\n    type: datarobot:RegisteredModel\n    properties:\n      customModelVersionId: ${exampleCustomModel.versionId}\n      description: Description for the example registered model\n  examplePredictionEnvironment:\n    type: datarobot:PredictionEnvironment\n    properties:\n      description: Description for the example prediction environment\n      platform: datarobotServerless\n  exampleDeployment:\n    type: datarobot:Deployment\n    properties:\n      label: An example deployment\n      predictionEnvironmentId: ${examplePredictionEnvironment.id}\n      registeredModelVersionId: ${exampleRegisteredModel.versionId}\n      # Optional settings\n      challengerModelsSettings: {}\n      challengerReplaySettings: {}\n      segmentAnalysisSettings: {}\n      biasAndFairnessSettings: {}\n      predictionsByForecastDateSettings: {}\n      driftTrackingSettings: {}\n      associationIdSettings: {}\n      predictionsDataCollectionSettings: {}\n      predictionWarningSettings: {}\n      predictionIntervalsSettings: {}\n      predictionsSettings: {}\n      featureCacheSettings: {}\n      healthSettings: {}\n      runtimeParameterValues:\n        - key: EXAMPLE_PARAM\n          type: string\n          value: val\n      retrainingSettings: {}\noutputs:\n  datarobotDeploymentId: ${exampleDeployment.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "associationIdSettings": {
          "$ref": "#/types/datarobot:index/DeploymentAssociationIdSettings:DeploymentAssociationIdSettings",
          "description": "Association ID settings for this Deployment.\n"
        },
        "batchMonitoringSettings": {
          "$ref": "#/types/datarobot:index/DeploymentBatchMonitoringSettings:DeploymentBatchMonitoringSettings",
          "description": "The batch monitoring settings for the Deployment.\n"
        },
        "biasAndFairnessSettings": {
          "$ref": "#/types/datarobot:index/DeploymentBiasAndFairnessSettings:DeploymentBiasAndFairnessSettings",
          "description": "Bias and fairness settings for the Deployment.\n"
        },
        "challengerModelsSettings": {
          "$ref": "#/types/datarobot:index/DeploymentChallengerModelsSettings:DeploymentChallengerModelsSettings",
          "description": "The challenger models settings for the Deployment.\n"
        },
        "challengerReplaySettings": {
          "$ref": "#/types/datarobot:index/DeploymentChallengerReplaySettings:DeploymentChallengerReplaySettings",
          "description": "The challenger replay settings for the Deployment.\n"
        },
        "driftTrackingSettings": {
          "$ref": "#/types/datarobot:index/DeploymentDriftTrackingSettings:DeploymentDriftTrackingSettings",
          "description": "The drift tracking settings for the Deployment.\n"
        },
        "featureCacheSettings": {
          "$ref": "#/types/datarobot:index/DeploymentFeatureCacheSettings:DeploymentFeatureCacheSettings",
          "description": "The feature cache settings for this Deployment.\n"
        },
        "healthSettings": {
          "$ref": "#/types/datarobot:index/DeploymentHealthSettings:DeploymentHealthSettings",
          "description": "The health settings for this Deployment.\n"
        },
        "importance": {
          "type": "string",
          "description": "The importance of the Deployment.\n"
        },
        "label": {
          "type": "string",
          "description": "The label of the Deployment.\n"
        },
        "predictionEnvironmentId": {
          "type": "string",
          "description": "The ID of the predication environment for this Deployment.\n"
        },
        "predictionIntervalsSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionIntervalsSettings:DeploymentPredictionIntervalsSettings",
          "description": "The prediction intervals settings for this Deployment.\n"
        },
        "predictionWarningSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionWarningSettings:DeploymentPredictionWarningSettings",
          "description": "The prediction warning settings for the Deployment.\n"
        },
        "predictionsByForecastDateSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionsByForecastDateSettings:DeploymentPredictionsByForecastDateSettings",
          "description": "The predictions by forecase date settings for the Deployment.\n"
        },
        "predictionsDataCollectionSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionsDataCollectionSettings:DeploymentPredictionsDataCollectionSettings",
          "description": "The predictions data collection settings for the Deployment.\n"
        },
        "predictionsSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionsSettings:DeploymentPredictionsSettings",
          "description": "Settings for the predictions.\n"
        },
        "registeredModelVersionId": {
          "type": "string",
          "description": "The ID of the registered model version for this Deployment.\n"
        },
        "retrainingSettings": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingSettings:DeploymentRetrainingSettings",
          "description": "The retraining settings for this Deployment.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/DeploymentRuntimeParameterValue:DeploymentRuntimeParameterValue"
          },
          "description": "The runtime parameter values for the Deployment.\n"
        },
        "segmentAnalysisSettings": {
          "$ref": "#/types/datarobot:index/DeploymentSegmentAnalysisSettings:DeploymentSegmentAnalysisSettings",
          "description": "The segment analysis settings for the Deployment.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Deployment to.\n"
        }
      },
      "required": [
        "importance",
        "label",
        "predictionEnvironmentId",
        "registeredModelVersionId"
      ],
      "inputProperties": {
        "associationIdSettings": {
          "$ref": "#/types/datarobot:index/DeploymentAssociationIdSettings:DeploymentAssociationIdSettings",
          "description": "Association ID settings for this Deployment.\n"
        },
        "batchMonitoringSettings": {
          "$ref": "#/types/datarobot:index/DeploymentBatchMonitoringSettings:DeploymentBatchMonitoringSettings",
          "description": "The batch monitoring settings for the Deployment.\n"
        },
        "biasAndFairnessSettings": {
          "$ref": "#/types/datarobot:index/DeploymentBiasAndFairnessSettings:DeploymentBiasAndFairnessSettings",
          "description": "Bias and fairness settings for the Deployment.\n"
        },
        "challengerModelsSettings": {
          "$ref": "#/types/datarobot:index/DeploymentChallengerModelsSettings:DeploymentChallengerModelsSettings",
          "description": "The challenger models settings for the Deployment.\n"
        },
        "challengerReplaySettings": {
          "$ref": "#/types/datarobot:index/DeploymentChallengerReplaySettings:DeploymentChallengerReplaySettings",
          "description": "The challenger replay settings for the Deployment.\n"
        },
        "driftTrackingSettings": {
          "$ref": "#/types/datarobot:index/DeploymentDriftTrackingSettings:DeploymentDriftTrackingSettings",
          "description": "The drift tracking settings for the Deployment.\n"
        },
        "featureCacheSettings": {
          "$ref": "#/types/datarobot:index/DeploymentFeatureCacheSettings:DeploymentFeatureCacheSettings",
          "description": "The feature cache settings for this Deployment.\n"
        },
        "healthSettings": {
          "$ref": "#/types/datarobot:index/DeploymentHealthSettings:DeploymentHealthSettings",
          "description": "The health settings for this Deployment.\n"
        },
        "importance": {
          "type": "string",
          "description": "The importance of the Deployment.\n"
        },
        "label": {
          "type": "string",
          "description": "The label of the Deployment.\n"
        },
        "predictionEnvironmentId": {
          "type": "string",
          "description": "The ID of the predication environment for this Deployment.\n"
        },
        "predictionIntervalsSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionIntervalsSettings:DeploymentPredictionIntervalsSettings",
          "description": "The prediction intervals settings for this Deployment.\n"
        },
        "predictionWarningSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionWarningSettings:DeploymentPredictionWarningSettings",
          "description": "The prediction warning settings for the Deployment.\n"
        },
        "predictionsByForecastDateSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionsByForecastDateSettings:DeploymentPredictionsByForecastDateSettings",
          "description": "The predictions by forecase date settings for the Deployment.\n"
        },
        "predictionsDataCollectionSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionsDataCollectionSettings:DeploymentPredictionsDataCollectionSettings",
          "description": "The predictions data collection settings for the Deployment.\n"
        },
        "predictionsSettings": {
          "$ref": "#/types/datarobot:index/DeploymentPredictionsSettings:DeploymentPredictionsSettings",
          "description": "Settings for the predictions.\n"
        },
        "registeredModelVersionId": {
          "type": "string",
          "description": "The ID of the registered model version for this Deployment.\n"
        },
        "retrainingSettings": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingSettings:DeploymentRetrainingSettings",
          "description": "The retraining settings for this Deployment.\n"
        },
        "runtimeParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/DeploymentRuntimeParameterValue:DeploymentRuntimeParameterValue"
          },
          "description": "The runtime parameter values for the Deployment.\n"
        },
        "segmentAnalysisSettings": {
          "$ref": "#/types/datarobot:index/DeploymentSegmentAnalysisSettings:DeploymentSegmentAnalysisSettings",
          "description": "The segment analysis settings for the Deployment.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Deployment to.\n"
        }
      },
      "requiredInputs": [
        "label",
        "predictionEnvironmentId",
        "registeredModelVersionId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Deployment resources.\n",
        "properties": {
          "associationIdSettings": {
            "$ref": "#/types/datarobot:index/DeploymentAssociationIdSettings:DeploymentAssociationIdSettings",
            "description": "Association ID settings for this Deployment.\n"
          },
          "batchMonitoringSettings": {
            "$ref": "#/types/datarobot:index/DeploymentBatchMonitoringSettings:DeploymentBatchMonitoringSettings",
            "description": "The batch monitoring settings for the Deployment.\n"
          },
          "biasAndFairnessSettings": {
            "$ref": "#/types/datarobot:index/DeploymentBiasAndFairnessSettings:DeploymentBiasAndFairnessSettings",
            "description": "Bias and fairness settings for the Deployment.\n"
          },
          "challengerModelsSettings": {
            "$ref": "#/types/datarobot:index/DeploymentChallengerModelsSettings:DeploymentChallengerModelsSettings",
            "description": "The challenger models settings for the Deployment.\n"
          },
          "challengerReplaySettings": {
            "$ref": "#/types/datarobot:index/DeploymentChallengerReplaySettings:DeploymentChallengerReplaySettings",
            "description": "The challenger replay settings for the Deployment.\n"
          },
          "driftTrackingSettings": {
            "$ref": "#/types/datarobot:index/DeploymentDriftTrackingSettings:DeploymentDriftTrackingSettings",
            "description": "The drift tracking settings for the Deployment.\n"
          },
          "featureCacheSettings": {
            "$ref": "#/types/datarobot:index/DeploymentFeatureCacheSettings:DeploymentFeatureCacheSettings",
            "description": "The feature cache settings for this Deployment.\n"
          },
          "healthSettings": {
            "$ref": "#/types/datarobot:index/DeploymentHealthSettings:DeploymentHealthSettings",
            "description": "The health settings for this Deployment.\n"
          },
          "importance": {
            "type": "string",
            "description": "The importance of the Deployment.\n"
          },
          "label": {
            "type": "string",
            "description": "The label of the Deployment.\n"
          },
          "predictionEnvironmentId": {
            "type": "string",
            "description": "The ID of the predication environment for this Deployment.\n"
          },
          "predictionIntervalsSettings": {
            "$ref": "#/types/datarobot:index/DeploymentPredictionIntervalsSettings:DeploymentPredictionIntervalsSettings",
            "description": "The prediction intervals settings for this Deployment.\n"
          },
          "predictionWarningSettings": {
            "$ref": "#/types/datarobot:index/DeploymentPredictionWarningSettings:DeploymentPredictionWarningSettings",
            "description": "The prediction warning settings for the Deployment.\n"
          },
          "predictionsByForecastDateSettings": {
            "$ref": "#/types/datarobot:index/DeploymentPredictionsByForecastDateSettings:DeploymentPredictionsByForecastDateSettings",
            "description": "The predictions by forecase date settings for the Deployment.\n"
          },
          "predictionsDataCollectionSettings": {
            "$ref": "#/types/datarobot:index/DeploymentPredictionsDataCollectionSettings:DeploymentPredictionsDataCollectionSettings",
            "description": "The predictions data collection settings for the Deployment.\n"
          },
          "predictionsSettings": {
            "$ref": "#/types/datarobot:index/DeploymentPredictionsSettings:DeploymentPredictionsSettings",
            "description": "Settings for the predictions.\n"
          },
          "registeredModelVersionId": {
            "type": "string",
            "description": "The ID of the registered model version for this Deployment.\n"
          },
          "retrainingSettings": {
            "$ref": "#/types/datarobot:index/DeploymentRetrainingSettings:DeploymentRetrainingSettings",
            "description": "The retraining settings for this Deployment.\n"
          },
          "runtimeParameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/DeploymentRuntimeParameterValue:DeploymentRuntimeParameterValue"
            },
            "description": "The runtime parameter values for the Deployment.\n"
          },
          "segmentAnalysisSettings": {
            "$ref": "#/types/datarobot:index/DeploymentSegmentAnalysisSettings:DeploymentSegmentAnalysisSettings",
            "description": "The segment analysis settings for the Deployment.\n"
          },
          "useCaseIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Case IDs to add the Deployment to.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/deploymentRetrainingPolicy:DeploymentRetrainingPolicy": {
      "description": "Deployment Retraining Policy\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  example:\n    type: datarobot:DeploymentRetrainingPolicy\n    properties:\n      deploymentId: ${datarobot_deployment.example.id}\n      description: Example Description\n      # Optional\n      action: create_model_package\n      modelSelectionStrategy: custom_job\n      featureListStrategy: informative_features\n      projectOptionsStrategy: custom\n      trigger:\n        custom_job_id: ${datarobot_custom_job.example.id}\n      autopilotOptions: {}\n      projectOptions: {}\n      timeSeriesOptions: {}\n      useCaseId: ${datarobot_use_case.example.id}\noutputs:\n  datarobotDeploymentRetrainingPolicyId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "action": {
          "type": "string",
          "description": "The the action to take on the resultant new model.\n"
        },
        "autopilotOptions": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyAutopilotOptions:DeploymentRetrainingPolicyAutopilotOptions",
          "description": "Options for projects used to build new models.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The ID of the Deployment for the Retraining Policy.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Retraining Policy.\n"
        },
        "featureListStrategy": {
          "type": "string",
          "description": "The feature list strategy used for modeling.\n"
        },
        "modelSelectionStrategy": {
          "type": "string",
          "description": "Determines how the new model is selected when the retraining policy runs.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Retraining Policy.\n"
        },
        "projectOptions": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyProjectOptions:DeploymentRetrainingPolicyProjectOptions",
          "description": "Options for projects used to build new models.\n"
        },
        "projectOptionsStrategy": {
          "type": "string",
          "description": "The project option strategy used for modeling.\n"
        },
        "timeSeriesOptions": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyTimeSeriesOptions:DeploymentRetrainingPolicyTimeSeriesOptions",
          "description": "Time Series project options used to build new models.\n"
        },
        "trigger": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyTrigger:DeploymentRetrainingPolicyTrigger",
          "description": "Retraining policy trigger.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The ID of the use case to which the retraining policy belongs.\n"
        }
      },
      "required": [
        "action",
        "autopilotOptions",
        "deploymentId",
        "description",
        "featureListStrategy",
        "modelSelectionStrategy",
        "name",
        "projectOptions",
        "projectOptionsStrategy"
      ],
      "inputProperties": {
        "action": {
          "type": "string",
          "description": "The the action to take on the resultant new model.\n"
        },
        "autopilotOptions": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyAutopilotOptions:DeploymentRetrainingPolicyAutopilotOptions",
          "description": "Options for projects used to build new models.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The ID of the Deployment for the Retraining Policy.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Retraining Policy.\n"
        },
        "featureListStrategy": {
          "type": "string",
          "description": "The feature list strategy used for modeling.\n"
        },
        "modelSelectionStrategy": {
          "type": "string",
          "description": "Determines how the new model is selected when the retraining policy runs.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Retraining Policy.\n"
        },
        "projectOptions": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyProjectOptions:DeploymentRetrainingPolicyProjectOptions",
          "description": "Options for projects used to build new models.\n"
        },
        "projectOptionsStrategy": {
          "type": "string",
          "description": "The project option strategy used for modeling.\n"
        },
        "timeSeriesOptions": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyTimeSeriesOptions:DeploymentRetrainingPolicyTimeSeriesOptions",
          "description": "Time Series project options used to build new models.\n"
        },
        "trigger": {
          "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyTrigger:DeploymentRetrainingPolicyTrigger",
          "description": "Retraining policy trigger.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The ID of the use case to which the retraining policy belongs.\n"
        }
      },
      "requiredInputs": [
        "deploymentId",
        "description"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering DeploymentRetrainingPolicy resources.\n",
        "properties": {
          "action": {
            "type": "string",
            "description": "The the action to take on the resultant new model.\n"
          },
          "autopilotOptions": {
            "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyAutopilotOptions:DeploymentRetrainingPolicyAutopilotOptions",
            "description": "Options for projects used to build new models.\n"
          },
          "deploymentId": {
            "type": "string",
            "description": "The ID of the Deployment for the Retraining Policy.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the Retraining Policy.\n"
          },
          "featureListStrategy": {
            "type": "string",
            "description": "The feature list strategy used for modeling.\n"
          },
          "modelSelectionStrategy": {
            "type": "string",
            "description": "Determines how the new model is selected when the retraining policy runs.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Retraining Policy.\n"
          },
          "projectOptions": {
            "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyProjectOptions:DeploymentRetrainingPolicyProjectOptions",
            "description": "Options for projects used to build new models.\n"
          },
          "projectOptionsStrategy": {
            "type": "string",
            "description": "The project option strategy used for modeling.\n"
          },
          "timeSeriesOptions": {
            "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyTimeSeriesOptions:DeploymentRetrainingPolicyTimeSeriesOptions",
            "description": "Time Series project options used to build new models.\n"
          },
          "trigger": {
            "$ref": "#/types/datarobot:index/DeploymentRetrainingPolicyTrigger:DeploymentRetrainingPolicyTrigger",
            "description": "Retraining policy trigger.\n"
          },
          "useCaseId": {
            "type": "string",
            "description": "The ID of the use case to which the retraining policy belongs.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/executionEnvironment:ExecutionEnvironment": {
      "description": "Execution Environment\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.ExecutionEnvironment(\"example\", {\n    programmingLanguage: \"python\",\n    description: \"Example Execution Environment Description\",\n    dockerContextPath: \"docker_context.zip\",\n    dockerImage: \"docker_image.tar\",\n    useCases: [\"customModel\"],\n});\nexport const datarobotExecutionEnvironmentId = example.id;\nexport const datarobotExecutionEnvironmentVersionId = example.versionId;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.ExecutionEnvironment(\"example\",\n    programming_language=\"python\",\n    description=\"Example Execution Environment Description\",\n    docker_context_path=\"docker_context.zip\",\n    docker_image=\"docker_image.tar\",\n    use_cases=[\"customModel\"])\npulumi.export(\"datarobotExecutionEnvironmentId\", example.id)\npulumi.export(\"datarobotExecutionEnvironmentVersionId\", example.version_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.ExecutionEnvironment(\"example\", new()\n    {\n        ProgrammingLanguage = \"python\",\n        Description = \"Example Execution Environment Description\",\n        DockerContextPath = \"docker_context.zip\",\n        DockerImage = \"docker_image.tar\",\n        UseCases = new[]\n        {\n            \"customModel\",\n        },\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"datarobotExecutionEnvironmentId\"] = example.Id,\n        [\"datarobotExecutionEnvironmentVersionId\"] = example.VersionId,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewExecutionEnvironment(ctx, \"example\", &datarobot.ExecutionEnvironmentArgs{\n\t\t\tProgrammingLanguage: pulumi.String(\"python\"),\n\t\t\tDescription:         pulumi.String(\"Example Execution Environment Description\"),\n\t\t\tDockerContextPath:   pulumi.String(\"docker_context.zip\"),\n\t\t\tDockerImage:         pulumi.String(\"docker_image.tar\"),\n\t\t\tUseCases: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"customModel\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotExecutionEnvironmentId\", example.ID())\n\t\tctx.Export(\"datarobotExecutionEnvironmentVersionId\", example.VersionId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.ExecutionEnvironment;\nimport com.pulumi.datarobot.ExecutionEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ExecutionEnvironment(\"example\", ExecutionEnvironmentArgs.builder()\n            .programmingLanguage(\"python\")\n            .description(\"Example Execution Environment Description\")\n            .dockerContextPath(\"docker_context.zip\")\n            .dockerImage(\"docker_image.tar\")\n            .useCases(\"customModel\")\n            .build());\n\n        ctx.export(\"datarobotExecutionEnvironmentId\", example.id());\n        ctx.export(\"datarobotExecutionEnvironmentVersionId\", example.versionId());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:ExecutionEnvironment\n    properties:\n      programmingLanguage: python\n      # Optional\n      description: Example Execution Environment Description\n      dockerContextPath: docker_context.zip\n      dockerImage: docker_image.tar\n      useCases:\n        - customModel\noutputs:\n  datarobotExecutionEnvironmentId: ${example.id}\n  datarobotExecutionEnvironmentVersionId: ${example.versionId}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "buildStatus": {
          "type": "string",
          "description": "The status of the Execution Environment version build.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Execution Environment.\n"
        },
        "dockerContextHash": {
          "type": "string",
          "description": "The hash of the docker context contents.\n"
        },
        "dockerContextPath": {
          "type": "string",
          "description": "The path to a docker context archive or folder\n"
        },
        "dockerImage": {
          "type": "string",
          "description": "A prebuilt environment image saved as a tarball using the Docker save command.\n"
        },
        "dockerImageHash": {
          "type": "string",
          "description": "The hash of the docker image file\n"
        },
        "dockerImageUri": {
          "type": "string",
          "description": "The URI of a pre-built environment image (e.g., in a remote Docker registry).\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Execution Environment.\n"
        },
        "programmingLanguage": {
          "type": "string",
          "description": "The programming language of the Execution Environment.\n"
        },
        "useCases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Cases that the Execution Environment supports.\n"
        },
        "versionDescription": {
          "type": "string",
          "description": "The description of the Execution Environment version.\n"
        },
        "versionId": {
          "type": "string",
          "description": "The ID of the Execution Environment Version.\n"
        }
      },
      "required": [
        "buildStatus",
        "dockerContextHash",
        "dockerImageHash",
        "name",
        "programmingLanguage",
        "useCases",
        "versionId"
      ],
      "inputProperties": {
        "description": {
          "type": "string",
          "description": "The description of the Execution Environment.\n"
        },
        "dockerContextPath": {
          "type": "string",
          "description": "The path to a docker context archive or folder\n"
        },
        "dockerImage": {
          "type": "string",
          "description": "A prebuilt environment image saved as a tarball using the Docker save command.\n"
        },
        "dockerImageUri": {
          "type": "string",
          "description": "The URI of a pre-built environment image (e.g., in a remote Docker registry).\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Execution Environment.\n"
        },
        "programmingLanguage": {
          "type": "string",
          "description": "The programming language of the Execution Environment.\n"
        },
        "useCases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Cases that the Execution Environment supports.\n"
        },
        "versionDescription": {
          "type": "string",
          "description": "The description of the Execution Environment version.\n"
        }
      },
      "requiredInputs": [
        "programmingLanguage",
        "useCases"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ExecutionEnvironment resources.\n",
        "properties": {
          "buildStatus": {
            "type": "string",
            "description": "The status of the Execution Environment version build.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the Execution Environment.\n"
          },
          "dockerContextHash": {
            "type": "string",
            "description": "The hash of the docker context contents.\n"
          },
          "dockerContextPath": {
            "type": "string",
            "description": "The path to a docker context archive or folder\n"
          },
          "dockerImage": {
            "type": "string",
            "description": "A prebuilt environment image saved as a tarball using the Docker save command.\n"
          },
          "dockerImageHash": {
            "type": "string",
            "description": "The hash of the docker image file\n"
          },
          "dockerImageUri": {
            "type": "string",
            "description": "The URI of a pre-built environment image (e.g., in a remote Docker registry).\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Execution Environment.\n"
          },
          "programmingLanguage": {
            "type": "string",
            "description": "The programming language of the Execution Environment.\n"
          },
          "useCases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Cases that the Execution Environment supports.\n"
          },
          "versionDescription": {
            "type": "string",
            "description": "The description of the Execution Environment version.\n"
          },
          "versionId": {
            "type": "string",
            "description": "The ID of the Execution Environment Version.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/googleCloudCredential:GoogleCloudCredential": {
      "description": "Api Token Credential\n",
      "properties": {
        "gcpKey": {
          "type": "string",
          "description": "The GCP key in JSON format.\n",
          "secret": true
        },
        "gcpKeyFile": {
          "type": "string",
          "description": "The file that has the GCP key. Cannot be used with `gcp_key`.\n"
        },
        "gcpKeyFileHash": {
          "type": "string",
          "description": "The hash of the GCP key file contents.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Google Cloud Credential.\n"
        }
      },
      "required": [
        "gcpKeyFileHash",
        "name"
      ],
      "inputProperties": {
        "gcpKey": {
          "type": "string",
          "description": "The GCP key in JSON format.\n",
          "secret": true
        },
        "gcpKeyFile": {
          "type": "string",
          "description": "The file that has the GCP key. Cannot be used with `gcp_key`.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Google Cloud Credential.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering GoogleCloudCredential resources.\n",
        "properties": {
          "gcpKey": {
            "type": "string",
            "description": "The GCP key in JSON format.\n",
            "secret": true
          },
          "gcpKeyFile": {
            "type": "string",
            "description": "The file that has the GCP key. Cannot be used with `gcp_key`.\n"
          },
          "gcpKeyFileHash": {
            "type": "string",
            "description": "The hash of the GCP key file contents.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Google Cloud Credential.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/llmBlueprint:LlmBlueprint": {
      "description": "LLMBlueprint\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```yaml\nresources:\n  exampleUseCase:\n    type: datarobot:UseCase\n  examplePlayground:\n    type: datarobot:Playground\n    properties:\n      description: Description for the example playground\n      useCaseId: ${exampleUseCase.id}\n  exampleLlmBlueprint:\n    type: datarobot:LlmBlueprint\n    properties:\n      description: Description for the example LLM blueprint\n      playgroundId: ${examplePlayground.id}\n      llmId: azure-openai-gpt-4-o-mini\n      promptType: ONE_TIME_PROMPT\n      # Optional\n      llmSettings:\n        max_completion_length: 1000\n        temperature: 0.5\n        top_p: 0.9\n        system_prompt: 'My Prompt:'\n      customModelLlmSettings:\n        external_llm_context_size: 100\n        system_prompt: 'My Prompt:'\n        validation_id: '111111111111'\n      vectorDatabaseSettings:\n        max_documents_retrieved_per_prompt: 5\n        max_tokens: 1000\noutputs:\n  exampleId: ${exampleLlmBlueprint.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "customModelLlmSettings": {
          "$ref": "#/types/datarobot:index/LlmBlueprintCustomModelLlmSettings:LlmBlueprintCustomModelLlmSettings",
          "description": "The custom model LLM settings for the LLM Blueprint.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the LLM Blueprint.\n"
        },
        "llmId": {
          "type": "string",
          "description": "The id of the LLM for the LLM Blueprint. If custom*model*llm_settings is set, this value must be 'custom-model'.\n"
        },
        "llmSettings": {
          "$ref": "#/types/datarobot:index/LlmBlueprintLlmSettings:LlmBlueprintLlmSettings",
          "description": "The LLM settings for the LLM Blueprint.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the LLM Blueprint.\n"
        },
        "playgroundId": {
          "type": "string",
          "description": "The id of the Playground for the LLM Blueprint.\n"
        },
        "promptType": {
          "type": "string",
          "description": "The prompt type for the LLM Blueprint.\n"
        },
        "vectorDatabaseId": {
          "type": "string",
          "description": "The id of the Vector Database for the LLM Blueprint.\n"
        },
        "vectorDatabaseSettings": {
          "$ref": "#/types/datarobot:index/LlmBlueprintVectorDatabaseSettings:LlmBlueprintVectorDatabaseSettings",
          "description": "The Vector Database settings for the LLM Blueprint.\n"
        }
      },
      "required": [
        "name",
        "playgroundId",
        "promptType"
      ],
      "inputProperties": {
        "customModelLlmSettings": {
          "$ref": "#/types/datarobot:index/LlmBlueprintCustomModelLlmSettings:LlmBlueprintCustomModelLlmSettings",
          "description": "The custom model LLM settings for the LLM Blueprint.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the LLM Blueprint.\n"
        },
        "llmId": {
          "type": "string",
          "description": "The id of the LLM for the LLM Blueprint. If custom*model*llm_settings is set, this value must be 'custom-model'.\n"
        },
        "llmSettings": {
          "$ref": "#/types/datarobot:index/LlmBlueprintLlmSettings:LlmBlueprintLlmSettings",
          "description": "The LLM settings for the LLM Blueprint.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the LLM Blueprint.\n"
        },
        "playgroundId": {
          "type": "string",
          "description": "The id of the Playground for the LLM Blueprint.\n"
        },
        "promptType": {
          "type": "string",
          "description": "The prompt type for the LLM Blueprint.\n"
        },
        "vectorDatabaseId": {
          "type": "string",
          "description": "The id of the Vector Database for the LLM Blueprint.\n"
        },
        "vectorDatabaseSettings": {
          "$ref": "#/types/datarobot:index/LlmBlueprintVectorDatabaseSettings:LlmBlueprintVectorDatabaseSettings",
          "description": "The Vector Database settings for the LLM Blueprint.\n"
        }
      },
      "requiredInputs": [
        "playgroundId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering LlmBlueprint resources.\n",
        "properties": {
          "customModelLlmSettings": {
            "$ref": "#/types/datarobot:index/LlmBlueprintCustomModelLlmSettings:LlmBlueprintCustomModelLlmSettings",
            "description": "The custom model LLM settings for the LLM Blueprint.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the LLM Blueprint.\n"
          },
          "llmId": {
            "type": "string",
            "description": "The id of the LLM for the LLM Blueprint. If custom*model*llm_settings is set, this value must be 'custom-model'.\n"
          },
          "llmSettings": {
            "$ref": "#/types/datarobot:index/LlmBlueprintLlmSettings:LlmBlueprintLlmSettings",
            "description": "The LLM settings for the LLM Blueprint.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the LLM Blueprint.\n"
          },
          "playgroundId": {
            "type": "string",
            "description": "The id of the Playground for the LLM Blueprint.\n"
          },
          "promptType": {
            "type": "string",
            "description": "The prompt type for the LLM Blueprint.\n"
          },
          "vectorDatabaseId": {
            "type": "string",
            "description": "The id of the Vector Database for the LLM Blueprint.\n"
          },
          "vectorDatabaseSettings": {
            "$ref": "#/types/datarobot:index/LlmBlueprintVectorDatabaseSettings:LlmBlueprintVectorDatabaseSettings",
            "description": "The Vector Database settings for the LLM Blueprint.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/notebook:Notebook": {
      "description": "Notebook resource for importing and managing Jupyter notebooks in DataRobot.\n\n**NOTE**\n\nThe synchronization of the file hash is one way. The provider will track changes of the Notebook file on disk\nand update _only_ when that changes. If the remote Notebook changes, the provider will not update the local file.\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleUseCase = new datarobot.UseCase(\"exampleUseCase\", {});\nconst exampleNotebook = new datarobot.Notebook(\"exampleNotebook\", {\n    filePath: \"/path/to/your/notebook.ipynb\",\n    useCaseId: exampleUseCase.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_use_case = datarobot.UseCase(\"exampleUseCase\")\nexample_notebook = datarobot.Notebook(\"exampleNotebook\",\n    file_path=\"/path/to/your/notebook.ipynb\",\n    use_case_id=example_use_case.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleUseCase = new Datarobot.UseCase(\"exampleUseCase\");\n\n    var exampleNotebook = new Datarobot.Notebook(\"exampleNotebook\", new()\n    {\n        FilePath = \"/path/to/your/notebook.ipynb\",\n        UseCaseId = exampleUseCase.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUseCase, err := datarobot.NewUseCase(ctx, \"exampleUseCase\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewNotebook(ctx, \"exampleNotebook\", &datarobot.NotebookArgs{\n\t\t\tFilePath:  pulumi.String(\"/path/to/your/notebook.ipynb\"),\n\t\t\tUseCaseId: exampleUseCase.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.UseCase;\nimport com.pulumi.datarobot.Notebook;\nimport com.pulumi.datarobot.NotebookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUseCase = new UseCase(\"exampleUseCase\");\n\n        var exampleNotebook = new Notebook(\"exampleNotebook\", NotebookArgs.builder()\n            .filePath(\"/path/to/your/notebook.ipynb\")\n            .useCaseId(exampleUseCase.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleUseCase:\n    type: datarobot:UseCase\n  exampleNotebook:\n    type: datarobot:Notebook\n    properties:\n      filePath: /path/to/your/notebook.ipynb\n      useCaseId: ${exampleUseCase.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "fileHash": {
          "type": "string",
          "description": "The SHA-256 hash of the file contents.\n"
        },
        "filePath": {
          "type": "string",
          "description": "The path to the .ipynb file to import.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Notebook.\n"
        },
        "url": {
          "type": "string",
          "description": "The URL to the Notebook.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The Use Case ID to add the Notebook to.\n"
        }
      },
      "required": [
        "fileHash",
        "filePath",
        "name",
        "url"
      ],
      "inputProperties": {
        "filePath": {
          "type": "string",
          "description": "The path to the .ipynb file to import.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The Use Case ID to add the Notebook to.\n"
        }
      },
      "requiredInputs": [
        "filePath"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Notebook resources.\n",
        "properties": {
          "fileHash": {
            "type": "string",
            "description": "The SHA-256 hash of the file contents.\n"
          },
          "filePath": {
            "type": "string",
            "description": "The path to the .ipynb file to import.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Notebook.\n"
          },
          "url": {
            "type": "string",
            "description": "The URL to the Notebook.\n"
          },
          "useCaseId": {
            "type": "string",
            "description": "The Use Case ID to add the Notebook to.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/notificationChannel:NotificationChannel": {
      "description": "Notification Channel\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.NotificationChannel(\"example\", {\n    channelType: \"DataRobotUser\",\n    relatedEntityId: datarobot_deployment.example.id,\n    relatedEntityType: \"deployment\",\n    contentType: \"application/json\",\n    customHeaders: [{\n        name: \"header1\",\n        value: \"value1\",\n    }],\n    drEntities: [{\n        id: \"11111111111111\",\n        name: \"example user\",\n    }],\n    languageCode: \"en\",\n    emailAddress: \"example@datarobot.com\",\n    payloadUrl: \"https://example.com\",\n    secretToken: \"example_secret_token\",\n    validateSsl: true,\n    verificationCode: \"11111\",\n});\nexport const datarobotNotificationPolicyId = datarobot_notification_policy.example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.NotificationChannel(\"example\",\n    channel_type=\"DataRobotUser\",\n    related_entity_id=datarobot_deployment[\"example\"][\"id\"],\n    related_entity_type=\"deployment\",\n    content_type=\"application/json\",\n    custom_headers=[{\n        \"name\": \"header1\",\n        \"value\": \"value1\",\n    }],\n    dr_entities=[{\n        \"id\": \"11111111111111\",\n        \"name\": \"example user\",\n    }],\n    language_code=\"en\",\n    email_address=\"example@datarobot.com\",\n    payload_url=\"https://example.com\",\n    secret_token=\"example_secret_token\",\n    validate_ssl=True,\n    verification_code=\"11111\")\npulumi.export(\"datarobotNotificationPolicyId\", datarobot_notification_policy[\"example\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.NotificationChannel(\"example\", new()\n    {\n        ChannelType = \"DataRobotUser\",\n        RelatedEntityId = datarobot_deployment.Example.Id,\n        RelatedEntityType = \"deployment\",\n        ContentType = \"application/json\",\n        CustomHeaders = new[]\n        {\n            new Datarobot.Inputs.NotificationChannelCustomHeaderArgs\n            {\n                Name = \"header1\",\n                Value = \"value1\",\n            },\n        },\n        DrEntities = new[]\n        {\n            new Datarobot.Inputs.NotificationChannelDrEntityArgs\n            {\n                Id = \"11111111111111\",\n                Name = \"example user\",\n            },\n        },\n        LanguageCode = \"en\",\n        EmailAddress = \"example@datarobot.com\",\n        PayloadUrl = \"https://example.com\",\n        SecretToken = \"example_secret_token\",\n        ValidateSsl = true,\n        VerificationCode = \"11111\",\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"datarobotNotificationPolicyId\"] = datarobot_notification_policy.Example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewNotificationChannel(ctx, \"example\", &datarobot.NotificationChannelArgs{\n\t\t\tChannelType:       pulumi.String(\"DataRobotUser\"),\n\t\t\tRelatedEntityId:   pulumi.Any(datarobot_deployment.Example.Id),\n\t\t\tRelatedEntityType: pulumi.String(\"deployment\"),\n\t\t\tContentType:       pulumi.String(\"application/json\"),\n\t\t\tCustomHeaders: datarobot.NotificationChannelCustomHeaderArray{\n\t\t\t\t&datarobot.NotificationChannelCustomHeaderArgs{\n\t\t\t\t\tName:  pulumi.String(\"header1\"),\n\t\t\t\t\tValue: pulumi.String(\"value1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDrEntities: datarobot.NotificationChannelDrEntityArray{\n\t\t\t\t&datarobot.NotificationChannelDrEntityArgs{\n\t\t\t\t\tId:   pulumi.String(\"11111111111111\"),\n\t\t\t\t\tName: pulumi.String(\"example user\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tLanguageCode:     pulumi.String(\"en\"),\n\t\t\tEmailAddress:     pulumi.String(\"example@datarobot.com\"),\n\t\t\tPayloadUrl:       pulumi.String(\"https://example.com\"),\n\t\t\tSecretToken:      pulumi.String(\"example_secret_token\"),\n\t\t\tValidateSsl:      pulumi.Bool(true),\n\t\t\tVerificationCode: pulumi.String(\"11111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotNotificationPolicyId\", datarobot_notification_policy.Example.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.NotificationChannel;\nimport com.pulumi.datarobot.NotificationChannelArgs;\nimport com.pulumi.datarobot.inputs.NotificationChannelCustomHeaderArgs;\nimport com.pulumi.datarobot.inputs.NotificationChannelDrEntityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationChannel(\"example\", NotificationChannelArgs.builder()\n            .channelType(\"DataRobotUser\")\n            .relatedEntityId(datarobot_deployment.example().id())\n            .relatedEntityType(\"deployment\")\n            .contentType(\"application/json\")\n            .customHeaders(NotificationChannelCustomHeaderArgs.builder()\n                .name(\"header1\")\n                .value(\"value1\")\n                .build())\n            .drEntities(NotificationChannelDrEntityArgs.builder()\n                .id(\"11111111111111\")\n                .name(\"example user\")\n                .build())\n            .languageCode(\"en\")\n            .emailAddress(\"example@datarobot.com\")\n            .payloadUrl(\"https://example.com\")\n            .secretToken(\"example_secret_token\")\n            .validateSsl(true)\n            .verificationCode(\"11111\")\n            .build());\n\n        ctx.export(\"datarobotNotificationPolicyId\", datarobot_notification_policy.example().id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:NotificationChannel\n    properties:\n      channelType: DataRobotUser\n      relatedEntityId: ${datarobot_deployment.example.id}\n      relatedEntityType: deployment\n      # Optional\n      contentType: application/json\n      customHeaders:\n        - name: header1\n          value: value1\n      drEntities:\n        - id: '11111111111111'\n          name: example user\n      languageCode: en\n      emailAddress: example@datarobot.com\n      payloadUrl: https://example.com\n      secretToken: example_secret_token\n      validateSsl: true\n      verificationCode: '11111'\noutputs:\n  datarobotNotificationPolicyId: ${datarobot_notification_policy.example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "channelType": {
          "type": "string",
          "description": "The Type of Notification Channel.\n"
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the messages of the Notification Channel.\n"
        },
        "customHeaders": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/NotificationChannelCustomHeader:NotificationChannelCustomHeader"
          },
          "description": "Custom headers and their values to be sent in the Notification Channel.\n"
        },
        "drEntities": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/NotificationChannelDrEntity:NotificationChannelDrEntity"
          },
          "description": "The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.\n"
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address to be used in the Notification Channel.\n"
        },
        "languageCode": {
          "type": "string",
          "description": "The preferred language code.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Notification Channel.\n"
        },
        "payloadUrl": {
          "type": "string",
          "description": "The payload URL of the Notification Channel.\n"
        },
        "relatedEntityId": {
          "type": "string",
          "description": "The ID of related entity.\n"
        },
        "relatedEntityType": {
          "type": "string",
          "description": "The type of related entity.\n"
        },
        "secretToken": {
          "type": "string",
          "description": "The secret token to be used for the Notification Channel.\n"
        },
        "validateSsl": {
          "type": "boolean",
          "description": "Defines if validate ssl or not in the Notification Channel.\n"
        },
        "verificationCode": {
          "type": "string",
          "description": "Required if the channel type is email.\n"
        }
      },
      "required": [
        "channelType",
        "languageCode",
        "name",
        "relatedEntityId",
        "relatedEntityType"
      ],
      "inputProperties": {
        "channelType": {
          "type": "string",
          "description": "The Type of Notification Channel.\n"
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the messages of the Notification Channel.\n"
        },
        "customHeaders": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/NotificationChannelCustomHeader:NotificationChannelCustomHeader"
          },
          "description": "Custom headers and their values to be sent in the Notification Channel.\n"
        },
        "drEntities": {
          "type": "array",
          "items": {
            "$ref": "#/types/datarobot:index/NotificationChannelDrEntity:NotificationChannelDrEntity"
          },
          "description": "The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.\n"
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address to be used in the Notification Channel.\n"
        },
        "languageCode": {
          "type": "string",
          "description": "The preferred language code.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Notification Channel.\n"
        },
        "payloadUrl": {
          "type": "string",
          "description": "The payload URL of the Notification Channel.\n"
        },
        "relatedEntityId": {
          "type": "string",
          "description": "The ID of related entity.\n"
        },
        "relatedEntityType": {
          "type": "string",
          "description": "The type of related entity.\n"
        },
        "secretToken": {
          "type": "string",
          "description": "The secret token to be used for the Notification Channel.\n"
        },
        "validateSsl": {
          "type": "boolean",
          "description": "Defines if validate ssl or not in the Notification Channel.\n"
        },
        "verificationCode": {
          "type": "string",
          "description": "Required if the channel type is email.\n"
        }
      },
      "requiredInputs": [
        "channelType",
        "relatedEntityId",
        "relatedEntityType"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering NotificationChannel resources.\n",
        "properties": {
          "channelType": {
            "type": "string",
            "description": "The Type of Notification Channel.\n"
          },
          "contentType": {
            "type": "string",
            "description": "The content type of the messages of the Notification Channel.\n"
          },
          "customHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/NotificationChannelCustomHeader:NotificationChannelCustomHeader"
            },
            "description": "Custom headers and their values to be sent in the Notification Channel.\n"
          },
          "drEntities": {
            "type": "array",
            "items": {
              "$ref": "#/types/datarobot:index/NotificationChannelDrEntity:NotificationChannelDrEntity"
            },
            "description": "The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.\n"
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address to be used in the Notification Channel.\n"
          },
          "languageCode": {
            "type": "string",
            "description": "The preferred language code.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Notification Channel.\n"
          },
          "payloadUrl": {
            "type": "string",
            "description": "The payload URL of the Notification Channel.\n"
          },
          "relatedEntityId": {
            "type": "string",
            "description": "The ID of related entity.\n"
          },
          "relatedEntityType": {
            "type": "string",
            "description": "The type of related entity.\n"
          },
          "secretToken": {
            "type": "string",
            "description": "The secret token to be used for the Notification Channel.\n"
          },
          "validateSsl": {
            "type": "boolean",
            "description": "Defines if validate ssl or not in the Notification Channel.\n"
          },
          "verificationCode": {
            "type": "string",
            "description": "Required if the channel type is email.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/notificationPolicy:NotificationPolicy": {
      "description": "Notification Policy\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.NotificationPolicy(\"example\", {\n    channelId: \"11111111111111\",\n    channelScope: \"template\",\n    eventGroup: \"model_deployments.all\",\n    relatedEntityId: datarobot_deployment.example.id,\n    relatedEntityType: \"deployment\",\n    eventType: \"model_deployments.accuracy_green\",\n    maximalFrequency: \"PT1H\",\n});\nexport const datarobotNotificationPolicyId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.NotificationPolicy(\"example\",\n    channel_id=\"11111111111111\",\n    channel_scope=\"template\",\n    event_group=\"model_deployments.all\",\n    related_entity_id=datarobot_deployment[\"example\"][\"id\"],\n    related_entity_type=\"deployment\",\n    event_type=\"model_deployments.accuracy_green\",\n    maximal_frequency=\"PT1H\")\npulumi.export(\"datarobotNotificationPolicyId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.NotificationPolicy(\"example\", new()\n    {\n        ChannelId = \"11111111111111\",\n        ChannelScope = \"template\",\n        EventGroup = \"model_deployments.all\",\n        RelatedEntityId = datarobot_deployment.Example.Id,\n        RelatedEntityType = \"deployment\",\n        EventType = \"model_deployments.accuracy_green\",\n        MaximalFrequency = \"PT1H\",\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"datarobotNotificationPolicyId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewNotificationPolicy(ctx, \"example\", &datarobot.NotificationPolicyArgs{\n\t\t\tChannelId:         pulumi.String(\"11111111111111\"),\n\t\t\tChannelScope:      pulumi.String(\"template\"),\n\t\t\tEventGroup:        pulumi.String(\"model_deployments.all\"),\n\t\t\tRelatedEntityId:   pulumi.Any(datarobot_deployment.Example.Id),\n\t\t\tRelatedEntityType: pulumi.String(\"deployment\"),\n\t\t\tEventType:         pulumi.String(\"model_deployments.accuracy_green\"),\n\t\t\tMaximalFrequency:  pulumi.String(\"PT1H\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotNotificationPolicyId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.NotificationPolicy;\nimport com.pulumi.datarobot.NotificationPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationPolicy(\"example\", NotificationPolicyArgs.builder()\n            .channelId(\"11111111111111\")\n            .channelScope(\"template\")\n            .eventGroup(\"model_deployments.all\")\n            .relatedEntityId(datarobot_deployment.example().id())\n            .relatedEntityType(\"deployment\")\n            .eventType(\"model_deployments.accuracy_green\")\n            .maximalFrequency(\"PT1H\")\n            .build());\n\n        ctx.export(\"datarobotNotificationPolicyId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:NotificationPolicy\n    properties:\n      channelId: '11111111111111'\n      channelScope: template\n      eventGroup: model_deployments.all\n      relatedEntityId: ${datarobot_deployment.example.id}\n      relatedEntityType: deployment\n      # Optional\n      eventType: model_deployments.accuracy_green\n      maximalFrequency: PT1H\noutputs:\n  datarobotNotificationPolicyId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether or not the Notification Policy is active.\n"
        },
        "channelId": {
          "type": "string",
          "description": "The Channel ID of the Notification Policy.\n"
        },
        "channelScope": {
          "type": "string",
          "description": "The Channel scope of the Notification Policy.\n"
        },
        "eventGroup": {
          "type": "string",
          "description": "The group of the events that trigger the Notification.\n"
        },
        "eventType": {
          "type": "string",
          "description": "The group of the event that triggers the Notification.\n"
        },
        "maximalFrequency": {
          "type": "string",
          "description": "The maximal frequency between policy runs in ISO 8601 duration string.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Notification Policy.\n"
        },
        "relatedEntityId": {
          "type": "string",
          "description": "The ID of the related entity for the Notification Policy.\n"
        },
        "relatedEntityType": {
          "type": "string",
          "description": "The Type of the related entity for the Notification Policy.\n"
        }
      },
      "required": [
        "active",
        "channelId",
        "channelScope",
        "name",
        "relatedEntityId",
        "relatedEntityType"
      ],
      "inputProperties": {
        "active": {
          "type": "boolean",
          "description": "Whether or not the Notification Policy is active.\n"
        },
        "channelId": {
          "type": "string",
          "description": "The Channel ID of the Notification Policy.\n"
        },
        "channelScope": {
          "type": "string",
          "description": "The Channel scope of the Notification Policy.\n"
        },
        "eventGroup": {
          "type": "string",
          "description": "The group of the events that trigger the Notification.\n"
        },
        "eventType": {
          "type": "string",
          "description": "The group of the event that triggers the Notification.\n"
        },
        "maximalFrequency": {
          "type": "string",
          "description": "The maximal frequency between policy runs in ISO 8601 duration string.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Notification Policy.\n"
        },
        "relatedEntityId": {
          "type": "string",
          "description": "The ID of the related entity for the Notification Policy.\n"
        },
        "relatedEntityType": {
          "type": "string",
          "description": "The Type of the related entity for the Notification Policy.\n"
        }
      },
      "requiredInputs": [
        "channelId",
        "channelScope",
        "relatedEntityId",
        "relatedEntityType"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering NotificationPolicy resources.\n",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Whether or not the Notification Policy is active.\n"
          },
          "channelId": {
            "type": "string",
            "description": "The Channel ID of the Notification Policy.\n"
          },
          "channelScope": {
            "type": "string",
            "description": "The Channel scope of the Notification Policy.\n"
          },
          "eventGroup": {
            "type": "string",
            "description": "The group of the events that trigger the Notification.\n"
          },
          "eventType": {
            "type": "string",
            "description": "The group of the event that triggers the Notification.\n"
          },
          "maximalFrequency": {
            "type": "string",
            "description": "The maximal frequency between policy runs in ISO 8601 duration string.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Notification Policy.\n"
          },
          "relatedEntityId": {
            "type": "string",
            "description": "The ID of the related entity for the Notification Policy.\n"
          },
          "relatedEntityType": {
            "type": "string",
            "description": "The Type of the related entity for the Notification Policy.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/playground:Playground": {
      "description": "Playground\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleUseCase = new datarobot.UseCase(\"exampleUseCase\", {});\nconst examplePlayground = new datarobot.Playground(\"examplePlayground\", {useCaseId: exampleUseCase.id});\nexport const exampleId = examplePlayground.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_use_case = datarobot.UseCase(\"exampleUseCase\")\nexample_playground = datarobot.Playground(\"examplePlayground\", use_case_id=example_use_case.id)\npulumi.export(\"exampleId\", example_playground.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleUseCase = new Datarobot.UseCase(\"exampleUseCase\");\n\n    var examplePlayground = new Datarobot.Playground(\"examplePlayground\", new()\n    {\n        UseCaseId = exampleUseCase.Id,\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = examplePlayground.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUseCase, err := datarobot.NewUseCase(ctx, \"exampleUseCase\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePlayground, err := datarobot.NewPlayground(ctx, \"examplePlayground\", &datarobot.PlaygroundArgs{\n\t\t\tUseCaseId: exampleUseCase.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", examplePlayground.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.UseCase;\nimport com.pulumi.datarobot.Playground;\nimport com.pulumi.datarobot.PlaygroundArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUseCase = new UseCase(\"exampleUseCase\");\n\n        var examplePlayground = new Playground(\"examplePlayground\", PlaygroundArgs.builder()\n            .useCaseId(exampleUseCase.id())\n            .build());\n\n        ctx.export(\"exampleId\", examplePlayground.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleUseCase:\n    type: datarobot:UseCase\n  examplePlayground:\n    type: datarobot:Playground\n    properties:\n      useCaseId: ${exampleUseCase.id}\noutputs:\n  exampleId: ${examplePlayground.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the Playground.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Playground.\n"
        },
        "playgroundType": {
          "type": "string",
          "description": "The type of the Playground, either 'rag' (default) or 'agentic'.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The id of the Playground.\n"
        }
      },
      "required": [
        "name",
        "playgroundType",
        "useCaseId"
      ],
      "inputProperties": {
        "description": {
          "type": "string",
          "description": "The description of the Playground.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Playground.\n"
        },
        "playgroundType": {
          "type": "string",
          "description": "The type of the Playground, either 'rag' (default) or 'agentic'.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The id of the Playground.\n"
        }
      },
      "requiredInputs": [
        "useCaseId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Playground resources.\n",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the Playground.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Playground.\n"
          },
          "playgroundType": {
            "type": "string",
            "description": "The type of the Playground, either 'rag' (default) or 'agentic'.\n"
          },
          "useCaseId": {
            "type": "string",
            "description": "The id of the Playground.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/predictionEnvironment:PredictionEnvironment": {
      "description": "prediction environment\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.PredictionEnvironment(\"example\", {\n    batchJobsMaxConcurrent: 20,\n    batchJobsPriority: \"high\",\n    credentialId: \"<credential_id>\",\n    datastoreId: \"<datastore_id>\",\n    description: \"Description for the example prediction environment\",\n    managedBy: \"selfManaged\",\n    platform: \"datarobotServerless\",\n    supportedModelFormats: [\n        \"datarobot\",\n        \"customModel\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.PredictionEnvironment(\"example\",\n    batch_jobs_max_concurrent=20,\n    batch_jobs_priority=\"high\",\n    credential_id=\"<credential_id>\",\n    datastore_id=\"<datastore_id>\",\n    description=\"Description for the example prediction environment\",\n    managed_by=\"selfManaged\",\n    platform=\"datarobotServerless\",\n    supported_model_formats=[\n        \"datarobot\",\n        \"customModel\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.PredictionEnvironment(\"example\", new()\n    {\n        BatchJobsMaxConcurrent = 20,\n        BatchJobsPriority = \"high\",\n        CredentialId = \"<credential_id>\",\n        DatastoreId = \"<datastore_id>\",\n        Description = \"Description for the example prediction environment\",\n        ManagedBy = \"selfManaged\",\n        Platform = \"datarobotServerless\",\n        SupportedModelFormats = new[]\n        {\n            \"datarobot\",\n            \"customModel\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewPredictionEnvironment(ctx, \"example\", &datarobot.PredictionEnvironmentArgs{\n\t\t\tBatchJobsMaxConcurrent: pulumi.Int(20),\n\t\t\tBatchJobsPriority:      pulumi.String(\"high\"),\n\t\t\tCredentialId:           pulumi.String(\"<credential_id>\"),\n\t\t\tDatastoreId:            pulumi.String(\"<datastore_id>\"),\n\t\t\tDescription:            pulumi.String(\"Description for the example prediction environment\"),\n\t\t\tManagedBy:              pulumi.String(\"selfManaged\"),\n\t\t\tPlatform:               pulumi.String(\"datarobotServerless\"),\n\t\t\tSupportedModelFormats: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"datarobot\"),\n\t\t\t\tpulumi.String(\"customModel\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.PredictionEnvironment;\nimport com.pulumi.datarobot.PredictionEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new PredictionEnvironment(\"example\", PredictionEnvironmentArgs.builder()\n            .batchJobsMaxConcurrent(20)\n            .batchJobsPriority(\"high\")\n            .credentialId(\"<credential_id>\")\n            .datastoreId(\"<datastore_id>\")\n            .description(\"Description for the example prediction environment\")\n            .managedBy(\"selfManaged\")\n            .platform(\"datarobotServerless\")\n            .supportedModelFormats(            \n                \"datarobot\",\n                \"customModel\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:PredictionEnvironment\n    properties:\n      # Optional\n      batchJobsMaxConcurrent: 20\n      batchJobsPriority: high\n      credentialId: <credential_id>\n      datastoreId: <datastore_id>\n      description: Description for the example prediction environment\n      managedBy: selfManaged\n      platform: datarobotServerless\n      supportedModelFormats:\n        - datarobot\n        - customModel\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "batchJobsMaxConcurrent": {
          "type": "integer",
          "description": "The maximum number of concurrent batch prediction jobs.\n"
        },
        "batchJobsPriority": {
          "type": "string",
          "description": "The importance of batch jobs.\n"
        },
        "credentialId": {
          "type": "string",
          "description": "The ID of the credential associated with the data connection. Only applicable for external prediction environments managed by DataRobot.\n"
        },
        "datastoreId": {
          "type": "string",
          "description": "The ID of the data store connection configuration. Only applicable for external prediction environments managed by DataRobot.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Prediction Environment.\n"
        },
        "managedBy": {
          "type": "string",
          "description": "Determines if the prediction environment should be managed by the management agent, datarobot, or self-managed. Self-managed by default.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Prediction Environment.\n"
        },
        "platform": {
          "type": "string",
          "description": "The platform for the Prediction Environment.\n"
        },
        "supportedModelFormats": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of supported model formats.\n"
        }
      },
      "required": [
        "managedBy",
        "name",
        "platform"
      ],
      "inputProperties": {
        "batchJobsMaxConcurrent": {
          "type": "integer",
          "description": "The maximum number of concurrent batch prediction jobs.\n"
        },
        "batchJobsPriority": {
          "type": "string",
          "description": "The importance of batch jobs.\n"
        },
        "credentialId": {
          "type": "string",
          "description": "The ID of the credential associated with the data connection. Only applicable for external prediction environments managed by DataRobot.\n"
        },
        "datastoreId": {
          "type": "string",
          "description": "The ID of the data store connection configuration. Only applicable for external prediction environments managed by DataRobot.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Prediction Environment.\n"
        },
        "managedBy": {
          "type": "string",
          "description": "Determines if the prediction environment should be managed by the management agent, datarobot, or self-managed. Self-managed by default.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Prediction Environment.\n"
        },
        "platform": {
          "type": "string",
          "description": "The platform for the Prediction Environment.\n"
        },
        "supportedModelFormats": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of supported model formats.\n"
        }
      },
      "requiredInputs": [
        "platform"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering PredictionEnvironment resources.\n",
        "properties": {
          "batchJobsMaxConcurrent": {
            "type": "integer",
            "description": "The maximum number of concurrent batch prediction jobs.\n"
          },
          "batchJobsPriority": {
            "type": "string",
            "description": "The importance of batch jobs.\n"
          },
          "credentialId": {
            "type": "string",
            "description": "The ID of the credential associated with the data connection. Only applicable for external prediction environments managed by DataRobot.\n"
          },
          "datastoreId": {
            "type": "string",
            "description": "The ID of the data store connection configuration. Only applicable for external prediction environments managed by DataRobot.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the Prediction Environment.\n"
          },
          "managedBy": {
            "type": "string",
            "description": "Determines if the prediction environment should be managed by the management agent, datarobot, or self-managed. Self-managed by default.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Prediction Environment.\n"
          },
          "platform": {
            "type": "string",
            "description": "The platform for the Prediction Environment.\n"
          },
          "supportedModelFormats": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of supported model formats.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/qaApplication:QaApplication": {
      "description": "Q&A Application\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleCustomModel = new datarobot.CustomModel(\"exampleCustomModel\", {\n    description: \"Description for the example custom model\",\n    targetType: \"Binary\",\n    targetName: \"my_label\",\n    baseEnvironmentId: \"65f9b27eab986d30d4c64268\",\n    files: [\"example.py\"],\n});\nconst exampleRegisteredModel = new datarobot.RegisteredModel(\"exampleRegisteredModel\", {\n    customModelVersionId: exampleCustomModel.versionId,\n    description: \"Description for the example registered model\",\n});\nconst examplePredictionEnvironment = new datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", {\n    description: \"Description for the example prediction environment\",\n    platform: \"datarobotServerless\",\n});\nconst exampleDeployment = new datarobot.Deployment(\"exampleDeployment\", {\n    label: \"An example deployment\",\n    predictionEnvironmentId: examplePredictionEnvironment.id,\n    registeredModelVersionId: exampleRegisteredModel.versionId,\n});\nconst exampleQaApplication = new datarobot.QaApplication(\"exampleQaApplication\", {\n    deploymentId: exampleDeployment.id,\n    externalAccessEnabled: true,\n    externalAccessRecipients: [\"recipient@example.com\"],\n    allowAutoStopping: false,\n});\nexport const datarobotQaApplicationId = exampleQaApplication.id;\nexport const datarobotQaApplicationSourceId = exampleQaApplication.sourceId;\nexport const datarobotQaApplicationSourceVersionId = exampleQaApplication.sourceVersionId;\nexport const datarobotQaApplicationUrl = exampleQaApplication.applicationUrl;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_custom_model = datarobot.CustomModel(\"exampleCustomModel\",\n    description=\"Description for the example custom model\",\n    target_type=\"Binary\",\n    target_name=\"my_label\",\n    base_environment_id=\"65f9b27eab986d30d4c64268\",\n    files=[\"example.py\"])\nexample_registered_model = datarobot.RegisteredModel(\"exampleRegisteredModel\",\n    custom_model_version_id=example_custom_model.version_id,\n    description=\"Description for the example registered model\")\nexample_prediction_environment = datarobot.PredictionEnvironment(\"examplePredictionEnvironment\",\n    description=\"Description for the example prediction environment\",\n    platform=\"datarobotServerless\")\nexample_deployment = datarobot.Deployment(\"exampleDeployment\",\n    label=\"An example deployment\",\n    prediction_environment_id=example_prediction_environment.id,\n    registered_model_version_id=example_registered_model.version_id)\nexample_qa_application = datarobot.QaApplication(\"exampleQaApplication\",\n    deployment_id=example_deployment.id,\n    external_access_enabled=True,\n    external_access_recipients=[\"recipient@example.com\"],\n    allow_auto_stopping=False)\npulumi.export(\"datarobotQaApplicationId\", example_qa_application.id)\npulumi.export(\"datarobotQaApplicationSourceId\", example_qa_application.source_id)\npulumi.export(\"datarobotQaApplicationSourceVersionId\", example_qa_application.source_version_id)\npulumi.export(\"datarobotQaApplicationUrl\", example_qa_application.application_url)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleCustomModel = new Datarobot.CustomModel(\"exampleCustomModel\", new()\n    {\n        Description = \"Description for the example custom model\",\n        TargetType = \"Binary\",\n        TargetName = \"my_label\",\n        BaseEnvironmentId = \"65f9b27eab986d30d4c64268\",\n        Files = new[]\n        {\n            \"example.py\",\n        },\n    });\n\n    var exampleRegisteredModel = new Datarobot.RegisteredModel(\"exampleRegisteredModel\", new()\n    {\n        CustomModelVersionId = exampleCustomModel.VersionId,\n        Description = \"Description for the example registered model\",\n    });\n\n    var examplePredictionEnvironment = new Datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", new()\n    {\n        Description = \"Description for the example prediction environment\",\n        Platform = \"datarobotServerless\",\n    });\n\n    var exampleDeployment = new Datarobot.Deployment(\"exampleDeployment\", new()\n    {\n        Label = \"An example deployment\",\n        PredictionEnvironmentId = examplePredictionEnvironment.Id,\n        RegisteredModelVersionId = exampleRegisteredModel.VersionId,\n    });\n\n    var exampleQaApplication = new Datarobot.QaApplication(\"exampleQaApplication\", new()\n    {\n        DeploymentId = exampleDeployment.Id,\n        ExternalAccessEnabled = true,\n        ExternalAccessRecipients = new[]\n        {\n            \"recipient@example.com\",\n        },\n        AllowAutoStopping = false,\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"datarobotQaApplicationId\"] = exampleQaApplication.Id,\n        [\"datarobotQaApplicationSourceId\"] = exampleQaApplication.SourceId,\n        [\"datarobotQaApplicationSourceVersionId\"] = exampleQaApplication.SourceVersionId,\n        [\"datarobotQaApplicationUrl\"] = exampleQaApplication.ApplicationUrl,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomModel, err := datarobot.NewCustomModel(ctx, \"exampleCustomModel\", &datarobot.CustomModelArgs{\n\t\t\tDescription:       pulumi.String(\"Description for the example custom model\"),\n\t\t\tTargetType:        pulumi.String(\"Binary\"),\n\t\t\tTargetName:        pulumi.String(\"my_label\"),\n\t\t\tBaseEnvironmentId: pulumi.String(\"65f9b27eab986d30d4c64268\"),\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t\"example.py\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRegisteredModel, err := datarobot.NewRegisteredModel(ctx, \"exampleRegisteredModel\", &datarobot.RegisteredModelArgs{\n\t\t\tCustomModelVersionId: exampleCustomModel.VersionId,\n\t\t\tDescription:          pulumi.String(\"Description for the example registered model\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePredictionEnvironment, err := datarobot.NewPredictionEnvironment(ctx, \"examplePredictionEnvironment\", &datarobot.PredictionEnvironmentArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example prediction environment\"),\n\t\t\tPlatform:    pulumi.String(\"datarobotServerless\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDeployment, err := datarobot.NewDeployment(ctx, \"exampleDeployment\", &datarobot.DeploymentArgs{\n\t\t\tLabel:                    pulumi.String(\"An example deployment\"),\n\t\t\tPredictionEnvironmentId:  examplePredictionEnvironment.ID(),\n\t\t\tRegisteredModelVersionId: exampleRegisteredModel.VersionId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQaApplication, err := datarobot.NewQaApplication(ctx, \"exampleQaApplication\", &datarobot.QaApplicationArgs{\n\t\t\tDeploymentId:          exampleDeployment.ID(),\n\t\t\tExternalAccessEnabled: pulumi.Bool(true),\n\t\t\tExternalAccessRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"recipient@example.com\"),\n\t\t\t},\n\t\t\tAllowAutoStopping: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotQaApplicationId\", exampleQaApplication.ID())\n\t\tctx.Export(\"datarobotQaApplicationSourceId\", exampleQaApplication.SourceId)\n\t\tctx.Export(\"datarobotQaApplicationSourceVersionId\", exampleQaApplication.SourceVersionId)\n\t\tctx.Export(\"datarobotQaApplicationUrl\", exampleQaApplication.ApplicationUrl)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.CustomModel;\nimport com.pulumi.datarobot.CustomModelArgs;\nimport com.pulumi.datarobot.RegisteredModel;\nimport com.pulumi.datarobot.RegisteredModelArgs;\nimport com.pulumi.datarobot.PredictionEnvironment;\nimport com.pulumi.datarobot.PredictionEnvironmentArgs;\nimport com.pulumi.datarobot.Deployment;\nimport com.pulumi.datarobot.DeploymentArgs;\nimport com.pulumi.datarobot.QaApplication;\nimport com.pulumi.datarobot.QaApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCustomModel = new CustomModel(\"exampleCustomModel\", CustomModelArgs.builder()\n            .description(\"Description for the example custom model\")\n            .targetType(\"Binary\")\n            .targetName(\"my_label\")\n            .baseEnvironmentId(\"65f9b27eab986d30d4c64268\")\n            .files(\"example.py\")\n            .build());\n\n        var exampleRegisteredModel = new RegisteredModel(\"exampleRegisteredModel\", RegisteredModelArgs.builder()\n            .customModelVersionId(exampleCustomModel.versionId())\n            .description(\"Description for the example registered model\")\n            .build());\n\n        var examplePredictionEnvironment = new PredictionEnvironment(\"examplePredictionEnvironment\", PredictionEnvironmentArgs.builder()\n            .description(\"Description for the example prediction environment\")\n            .platform(\"datarobotServerless\")\n            .build());\n\n        var exampleDeployment = new Deployment(\"exampleDeployment\", DeploymentArgs.builder()\n            .label(\"An example deployment\")\n            .predictionEnvironmentId(examplePredictionEnvironment.id())\n            .registeredModelVersionId(exampleRegisteredModel.versionId())\n            .build());\n\n        var exampleQaApplication = new QaApplication(\"exampleQaApplication\", QaApplicationArgs.builder()\n            .deploymentId(exampleDeployment.id())\n            .externalAccessEnabled(true)\n            .externalAccessRecipients(\"recipient@example.com\")\n            .allowAutoStopping(false)\n            .build());\n\n        ctx.export(\"datarobotQaApplicationId\", exampleQaApplication.id());\n        ctx.export(\"datarobotQaApplicationSourceId\", exampleQaApplication.sourceId());\n        ctx.export(\"datarobotQaApplicationSourceVersionId\", exampleQaApplication.sourceVersionId());\n        ctx.export(\"datarobotQaApplicationUrl\", exampleQaApplication.applicationUrl());\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomModel:\n    type: datarobot:CustomModel\n    properties:\n      description: Description for the example custom model\n      targetType: Binary\n      targetName: my_label\n      baseEnvironmentId: 65f9b27eab986d30d4c64268\n      files:\n        - example.py\n  exampleRegisteredModel:\n    type: datarobot:RegisteredModel\n    properties:\n      customModelVersionId: ${exampleCustomModel.versionId}\n      description: Description for the example registered model\n  examplePredictionEnvironment:\n    type: datarobot:PredictionEnvironment\n    properties:\n      description: Description for the example prediction environment\n      platform: datarobotServerless\n  exampleDeployment:\n    type: datarobot:Deployment\n    properties:\n      label: An example deployment\n      predictionEnvironmentId: ${examplePredictionEnvironment.id}\n      registeredModelVersionId: ${exampleRegisteredModel.versionId}\n  exampleQaApplication:\n    type: datarobot:QaApplication\n    properties:\n      deploymentId: ${exampleDeployment.id}\n      # Optional\n      externalAccessEnabled: true\n      externalAccessRecipients:\n        - recipient@example.com\n      allowAutoStopping: false\noutputs:\n  datarobotQaApplicationId: ${exampleQaApplication.id}\n  datarobotQaApplicationSourceId: ${exampleQaApplication.sourceId}\n  datarobotQaApplicationSourceVersionId: ${exampleQaApplication.sourceVersionId}\n  datarobotQaApplicationUrl: ${exampleQaApplication.applicationUrl}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "allowAutoStopping": {
          "type": "boolean",
          "description": "Whether auto stopping is allowed for the Q&A Application.\n"
        },
        "applicationUrl": {
          "type": "string",
          "description": "The URL of the Q&A Application.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The deployment ID of the Q&A Application.\n"
        },
        "externalAccessEnabled": {
          "type": "boolean",
          "description": "Whether external access is enabled for the Q&A Application.\n"
        },
        "externalAccessRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of external email addresses that have access to the Q&A Application.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Q&A Application.\n"
        },
        "sourceId": {
          "type": "string",
          "description": "The ID of the Q&A Application Source.\n"
        },
        "sourceVersionId": {
          "type": "string",
          "description": "The version ID of the Q&A Application Source.\n"
        }
      },
      "required": [
        "allowAutoStopping",
        "applicationUrl",
        "deploymentId",
        "externalAccessEnabled",
        "name",
        "sourceId",
        "sourceVersionId"
      ],
      "inputProperties": {
        "allowAutoStopping": {
          "type": "boolean",
          "description": "Whether auto stopping is allowed for the Q&A Application.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The deployment ID of the Q&A Application.\n"
        },
        "externalAccessEnabled": {
          "type": "boolean",
          "description": "Whether external access is enabled for the Q&A Application.\n"
        },
        "externalAccessRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of external email addresses that have access to the Q&A Application.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Q&A Application.\n"
        }
      },
      "requiredInputs": [
        "deploymentId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering QaApplication resources.\n",
        "properties": {
          "allowAutoStopping": {
            "type": "boolean",
            "description": "Whether auto stopping is allowed for the Q&A Application.\n"
          },
          "applicationUrl": {
            "type": "string",
            "description": "The URL of the Q&A Application.\n"
          },
          "deploymentId": {
            "type": "string",
            "description": "The deployment ID of the Q&A Application.\n"
          },
          "externalAccessEnabled": {
            "type": "boolean",
            "description": "Whether external access is enabled for the Q&A Application.\n"
          },
          "externalAccessRecipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of external email addresses that have access to the Q&A Application.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Q&A Application.\n"
          },
          "sourceId": {
            "type": "string",
            "description": "The ID of the Q&A Application Source.\n"
          },
          "sourceVersionId": {
            "type": "string",
            "description": "The version ID of the Q&A Application Source.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/registeredModel:RegisteredModel": {
      "description": "registered model\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleCustomModel = new datarobot.CustomModel(\"exampleCustomModel\", {\n    description: \"Description for the example custom model\",\n    targetType: \"Binary\",\n    targetName: \"my_label\",\n    baseEnvironmentId: \"65f9b27eab986d30d4c64268\",\n    files: [\"example.py\"],\n});\nconst exampleRegisteredModel = new datarobot.RegisteredModel(\"exampleRegisteredModel\", {\n    customModelVersionId: exampleCustomModel.versionId,\n    description: \"Description for the example registered model\",\n});\nexport const datarobotRegisteredModelId = exampleRegisteredModel.id;\nexport const datarobotRegisteredModelVersionId = exampleRegisteredModel.versionId;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_custom_model = datarobot.CustomModel(\"exampleCustomModel\",\n    description=\"Description for the example custom model\",\n    target_type=\"Binary\",\n    target_name=\"my_label\",\n    base_environment_id=\"65f9b27eab986d30d4c64268\",\n    files=[\"example.py\"])\nexample_registered_model = datarobot.RegisteredModel(\"exampleRegisteredModel\",\n    custom_model_version_id=example_custom_model.version_id,\n    description=\"Description for the example registered model\")\npulumi.export(\"datarobotRegisteredModelId\", example_registered_model.id)\npulumi.export(\"datarobotRegisteredModelVersionId\", example_registered_model.version_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleCustomModel = new Datarobot.CustomModel(\"exampleCustomModel\", new()\n    {\n        Description = \"Description for the example custom model\",\n        TargetType = \"Binary\",\n        TargetName = \"my_label\",\n        BaseEnvironmentId = \"65f9b27eab986d30d4c64268\",\n        Files = new[]\n        {\n            \"example.py\",\n        },\n    });\n\n    var exampleRegisteredModel = new Datarobot.RegisteredModel(\"exampleRegisteredModel\", new()\n    {\n        CustomModelVersionId = exampleCustomModel.VersionId,\n        Description = \"Description for the example registered model\",\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"datarobotRegisteredModelId\"] = exampleRegisteredModel.Id,\n        [\"datarobotRegisteredModelVersionId\"] = exampleRegisteredModel.VersionId,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomModel, err := datarobot.NewCustomModel(ctx, \"exampleCustomModel\", &datarobot.CustomModelArgs{\n\t\t\tDescription:       pulumi.String(\"Description for the example custom model\"),\n\t\t\tTargetType:        pulumi.String(\"Binary\"),\n\t\t\tTargetName:        pulumi.String(\"my_label\"),\n\t\t\tBaseEnvironmentId: pulumi.String(\"65f9b27eab986d30d4c64268\"),\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t\"example.py\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRegisteredModel, err := datarobot.NewRegisteredModel(ctx, \"exampleRegisteredModel\", &datarobot.RegisteredModelArgs{\n\t\t\tCustomModelVersionId: exampleCustomModel.VersionId,\n\t\t\tDescription:          pulumi.String(\"Description for the example registered model\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotRegisteredModelId\", exampleRegisteredModel.ID())\n\t\tctx.Export(\"datarobotRegisteredModelVersionId\", exampleRegisteredModel.VersionId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.CustomModel;\nimport com.pulumi.datarobot.CustomModelArgs;\nimport com.pulumi.datarobot.RegisteredModel;\nimport com.pulumi.datarobot.RegisteredModelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCustomModel = new CustomModel(\"exampleCustomModel\", CustomModelArgs.builder()\n            .description(\"Description for the example custom model\")\n            .targetType(\"Binary\")\n            .targetName(\"my_label\")\n            .baseEnvironmentId(\"65f9b27eab986d30d4c64268\")\n            .files(\"example.py\")\n            .build());\n\n        var exampleRegisteredModel = new RegisteredModel(\"exampleRegisteredModel\", RegisteredModelArgs.builder()\n            .customModelVersionId(exampleCustomModel.versionId())\n            .description(\"Description for the example registered model\")\n            .build());\n\n        ctx.export(\"datarobotRegisteredModelId\", exampleRegisteredModel.id());\n        ctx.export(\"datarobotRegisteredModelVersionId\", exampleRegisteredModel.versionId());\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomModel:\n    type: datarobot:CustomModel\n    properties:\n      description: Description for the example custom model\n      targetType: Binary\n      targetName: my_label\n      baseEnvironmentId: 65f9b27eab986d30d4c64268\n      files:\n        - example.py\n  exampleRegisteredModel:\n    type: datarobot:RegisteredModel\n    properties:\n      customModelVersionId: ${exampleCustomModel.versionId}\n      description: Description for the example registered model\noutputs:\n  datarobotRegisteredModelId: ${exampleRegisteredModel.id}\n  datarobotRegisteredModelVersionId: ${exampleRegisteredModel.versionId}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "customModelVersionId": {
          "type": "string",
          "description": "The ID of the custom model version for this Registered Model.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Registered Model.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Registered Model.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Registered Model version to.\n"
        },
        "versionId": {
          "type": "string",
          "description": "The ID of the Registered Model Version.\n"
        },
        "versionName": {
          "type": "string",
          "description": "The name of the Registered Model Version.\n"
        }
      },
      "required": [
        "customModelVersionId",
        "name",
        "versionId",
        "versionName"
      ],
      "inputProperties": {
        "customModelVersionId": {
          "type": "string",
          "description": "The ID of the custom model version for this Registered Model.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Registered Model.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Registered Model.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Registered Model version to.\n"
        },
        "versionName": {
          "type": "string",
          "description": "The name of the Registered Model Version.\n"
        }
      },
      "requiredInputs": [
        "customModelVersionId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering RegisteredModel resources.\n",
        "properties": {
          "customModelVersionId": {
            "type": "string",
            "description": "The ID of the custom model version for this Registered Model.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the Registered Model.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Registered Model.\n"
          },
          "useCaseIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Case IDs to add the Registered Model version to.\n"
          },
          "versionId": {
            "type": "string",
            "description": "The ID of the Registered Model Version.\n"
          },
          "versionName": {
            "type": "string",
            "description": "The name of the Registered Model Version.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/registeredModelFromLeaderboard:RegisteredModelFromLeaderboard": {
      "description": "registered model from leaderboard\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.RegisteredModelFromLeaderboard(\"example\", {\n    modelId: \"111111111111\",\n    description: \"example description\",\n    versionName: \"example version name\",\n    predictionThreshold: 0.5,\n    computeAllTsIntervals: true,\n    distributionPredictionModelId: \"222222222222\",\n    useCaseIds: [datarobot_use_case.example.id],\n});\nexport const datarobotRegisteredModelFromLeaderboardId = example.id;\nexport const datarobotRegisteredModelFromLeaderboardVersionId = example.versionId;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.RegisteredModelFromLeaderboard(\"example\",\n    model_id=\"111111111111\",\n    description=\"example description\",\n    version_name=\"example version name\",\n    prediction_threshold=0.5,\n    compute_all_ts_intervals=True,\n    distribution_prediction_model_id=\"222222222222\",\n    use_case_ids=[datarobot_use_case[\"example\"][\"id\"]])\npulumi.export(\"datarobotRegisteredModelFromLeaderboardId\", example.id)\npulumi.export(\"datarobotRegisteredModelFromLeaderboardVersionId\", example.version_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.RegisteredModelFromLeaderboard(\"example\", new()\n    {\n        ModelId = \"111111111111\",\n        Description = \"example description\",\n        VersionName = \"example version name\",\n        PredictionThreshold = 0.5,\n        ComputeAllTsIntervals = true,\n        DistributionPredictionModelId = \"222222222222\",\n        UseCaseIds = new[]\n        {\n            datarobot_use_case.Example.Id,\n        },\n    });\n\n    return new Dictionary<string, object?>\n    {\n        [\"datarobotRegisteredModelFromLeaderboardId\"] = example.Id,\n        [\"datarobotRegisteredModelFromLeaderboardVersionId\"] = example.VersionId,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewRegisteredModelFromLeaderboard(ctx, \"example\", &datarobot.RegisteredModelFromLeaderboardArgs{\n\t\t\tModelId:                       pulumi.String(\"111111111111\"),\n\t\t\tDescription:                   pulumi.String(\"example description\"),\n\t\t\tVersionName:                   pulumi.String(\"example version name\"),\n\t\t\tPredictionThreshold:           pulumi.Float64(0.5),\n\t\t\tComputeAllTsIntervals:         pulumi.Bool(true),\n\t\t\tDistributionPredictionModelId: pulumi.String(\"222222222222\"),\n\t\t\tUseCaseIds: pulumi.StringArray{\n\t\t\t\tdatarobot_use_case.Example.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotRegisteredModelFromLeaderboardId\", example.ID())\n\t\tctx.Export(\"datarobotRegisteredModelFromLeaderboardVersionId\", example.VersionId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.RegisteredModelFromLeaderboard;\nimport com.pulumi.datarobot.RegisteredModelFromLeaderboardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RegisteredModelFromLeaderboard(\"example\", RegisteredModelFromLeaderboardArgs.builder()\n            .modelId(\"111111111111\")\n            .description(\"example description\")\n            .versionName(\"example version name\")\n            .predictionThreshold(0.5)\n            .computeAllTsIntervals(true)\n            .distributionPredictionModelId(\"222222222222\")\n            .useCaseIds(datarobot_use_case.example().id())\n            .build());\n\n        ctx.export(\"datarobotRegisteredModelFromLeaderboardId\", example.id());\n        ctx.export(\"datarobotRegisteredModelFromLeaderboardVersionId\", example.versionId());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:RegisteredModelFromLeaderboard\n    properties:\n      modelId: '111111111111'\n      # Optional\n      description: example description\n      versionName: example version name\n      predictionThreshold: 0.5\n      computeAllTsIntervals: true\n      distributionPredictionModelId: '222222222222'\n      useCaseIds:\n        - ${datarobot_use_case.example.id}\noutputs:\n  datarobotRegisteredModelFromLeaderboardId: ${example.id}\n  datarobotRegisteredModelFromLeaderboardVersionId: ${example.versionId}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "computeAllTsIntervals": {
          "type": "boolean",
          "description": "Whether to compute all time series intervals (1-100 percentiles).\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Registered Model.\n"
        },
        "distributionPredictionModelId": {
          "type": "string",
          "description": "The ID of the DataRobot distribution prediction model trained on predictions from the DataRobot model.\n"
        },
        "modelId": {
          "type": "string",
          "description": "The ID of the DataRobot model for this Registered Model.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Registered Model.\n"
        },
        "predictionThreshold": {
          "type": "number",
          "description": "The prediction threshold for the model.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Registered Model version to.\n"
        },
        "versionId": {
          "type": "string",
          "description": "The ID of the Registered Model Version.\n"
        },
        "versionName": {
          "type": "string",
          "description": "The name of the Registered Model Version.\n"
        }
      },
      "required": [
        "modelId",
        "name",
        "versionId",
        "versionName"
      ],
      "inputProperties": {
        "computeAllTsIntervals": {
          "type": "boolean",
          "description": "Whether to compute all time series intervals (1-100 percentiles).\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Registered Model.\n"
        },
        "distributionPredictionModelId": {
          "type": "string",
          "description": "The ID of the DataRobot distribution prediction model trained on predictions from the DataRobot model.\n"
        },
        "modelId": {
          "type": "string",
          "description": "The ID of the DataRobot model for this Registered Model.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Registered Model.\n"
        },
        "predictionThreshold": {
          "type": "number",
          "description": "The prediction threshold for the model.\n"
        },
        "useCaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Use Case IDs to add the Registered Model version to.\n"
        },
        "versionName": {
          "type": "string",
          "description": "The name of the Registered Model Version.\n"
        }
      },
      "requiredInputs": [
        "modelId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering RegisteredModelFromLeaderboard resources.\n",
        "properties": {
          "computeAllTsIntervals": {
            "type": "boolean",
            "description": "Whether to compute all time series intervals (1-100 percentiles).\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the Registered Model.\n"
          },
          "distributionPredictionModelId": {
            "type": "string",
            "description": "The ID of the DataRobot distribution prediction model trained on predictions from the DataRobot model.\n"
          },
          "modelId": {
            "type": "string",
            "description": "The ID of the DataRobot model for this Registered Model.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Registered Model.\n"
          },
          "predictionThreshold": {
            "type": "number",
            "description": "The prediction threshold for the model.\n"
          },
          "useCaseIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Use Case IDs to add the Registered Model version to.\n"
          },
          "versionId": {
            "type": "string",
            "description": "The ID of the Registered Model Version.\n"
          },
          "versionName": {
            "type": "string",
            "description": "The name of the Registered Model Version.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/remoteRepository:RemoteRepository": {
      "description": "remote repository\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst githubExample = new datarobot.RemoteRepository(\"githubExample\", {\n    description: \"Description for the example remote repository\",\n    location: \"https://github.com/datarobot/datarobot-user-models\",\n    sourceType: \"github\",\n});\nconst gitlabExample = new datarobot.RemoteRepository(\"gitlabExample\", {\n    location: \"https://gitlab.yourcompany.com/username/repository\",\n    personalAccessToken: \"your_personal_access_token\",\n    sourceType: \"gitlab-cloud\",\n});\nconst bitbucketExample = new datarobot.RemoteRepository(\"bitbucketExample\", {\n    location: \"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\",\n    sourceType: \"bitbucket-server\",\n});\nconst s3Example = new datarobot.RemoteRepository(\"s3Example\", {\n    location: \"my-s3-bucket\",\n    sourceType: \"s3\",\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\ngithub_example = datarobot.RemoteRepository(\"githubExample\",\n    description=\"Description for the example remote repository\",\n    location=\"https://github.com/datarobot/datarobot-user-models\",\n    source_type=\"github\")\ngitlab_example = datarobot.RemoteRepository(\"gitlabExample\",\n    location=\"https://gitlab.yourcompany.com/username/repository\",\n    personal_access_token=\"your_personal_access_token\",\n    source_type=\"gitlab-cloud\")\nbitbucket_example = datarobot.RemoteRepository(\"bitbucketExample\",\n    location=\"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\",\n    source_type=\"bitbucket-server\")\ns3_example = datarobot.RemoteRepository(\"s3Example\",\n    location=\"my-s3-bucket\",\n    source_type=\"s3\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var githubExample = new Datarobot.RemoteRepository(\"githubExample\", new()\n    {\n        Description = \"Description for the example remote repository\",\n        Location = \"https://github.com/datarobot/datarobot-user-models\",\n        SourceType = \"github\",\n    });\n\n    var gitlabExample = new Datarobot.RemoteRepository(\"gitlabExample\", new()\n    {\n        Location = \"https://gitlab.yourcompany.com/username/repository\",\n        PersonalAccessToken = \"your_personal_access_token\",\n        SourceType = \"gitlab-cloud\",\n    });\n\n    var bitbucketExample = new Datarobot.RemoteRepository(\"bitbucketExample\", new()\n    {\n        Location = \"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\",\n        SourceType = \"bitbucket-server\",\n    });\n\n    var s3Example = new Datarobot.RemoteRepository(\"s3Example\", new()\n    {\n        Location = \"my-s3-bucket\",\n        SourceType = \"s3\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewRemoteRepository(ctx, \"githubExample\", &datarobot.RemoteRepositoryArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example remote repository\"),\n\t\t\tLocation:    pulumi.String(\"https://github.com/datarobot/datarobot-user-models\"),\n\t\t\tSourceType:  pulumi.String(\"github\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewRemoteRepository(ctx, \"gitlabExample\", &datarobot.RemoteRepositoryArgs{\n\t\t\tLocation:            pulumi.String(\"https://gitlab.yourcompany.com/username/repository\"),\n\t\t\tPersonalAccessToken: pulumi.String(\"your_personal_access_token\"),\n\t\t\tSourceType:          pulumi.String(\"gitlab-cloud\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewRemoteRepository(ctx, \"bitbucketExample\", &datarobot.RemoteRepositoryArgs{\n\t\t\tLocation:   pulumi.String(\"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\"),\n\t\t\tSourceType: pulumi.String(\"bitbucket-server\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewRemoteRepository(ctx, \"s3Example\", &datarobot.RemoteRepositoryArgs{\n\t\t\tLocation:   pulumi.String(\"my-s3-bucket\"),\n\t\t\tSourceType: pulumi.String(\"s3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.RemoteRepository;\nimport com.pulumi.datarobot.RemoteRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var githubExample = new RemoteRepository(\"githubExample\", RemoteRepositoryArgs.builder()\n            .description(\"Description for the example remote repository\")\n            .location(\"https://github.com/datarobot/datarobot-user-models\")\n            .sourceType(\"github\")\n            .build());\n\n        var gitlabExample = new RemoteRepository(\"gitlabExample\", RemoteRepositoryArgs.builder()\n            .location(\"https://gitlab.yourcompany.com/username/repository\")\n            .personalAccessToken(\"your_personal_access_token\")\n            .sourceType(\"gitlab-cloud\")\n            .build());\n\n        var bitbucketExample = new RemoteRepository(\"bitbucketExample\", RemoteRepositoryArgs.builder()\n            .location(\"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\")\n            .sourceType(\"bitbucket-server\")\n            .build());\n\n        var s3Example = new RemoteRepository(\"s3Example\", RemoteRepositoryArgs.builder()\n            .location(\"my-s3-bucket\")\n            .sourceType(\"s3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  githubExample:\n    type: datarobot:RemoteRepository\n    properties:\n      description: Description for the example remote repository\n      location: https://github.com/datarobot/datarobot-user-models\n      sourceType: github\n  gitlabExample:\n    type: datarobot:RemoteRepository\n    properties:\n      location: https://gitlab.yourcompany.com/username/repository\n      personalAccessToken: your_personal_access_token\n      sourceType: gitlab-cloud\n  bitbucketExample:\n    type: datarobot:RemoteRepository\n    properties:\n      location: https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\n      sourceType: bitbucket-server\n  s3Example:\n    type: datarobot:RemoteRepository\n    properties:\n      location: my-s3-bucket\n      sourceType: s3\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "awsAccessKeyId": {
          "type": "string",
          "description": "The AWS access key ID for the Remote Repository.\n"
        },
        "awsSecretAccessKey": {
          "type": "string",
          "description": "The AWS secret access key for the Remote Repository.\n"
        },
        "awsSessionToken": {
          "type": "string",
          "description": "The AWS session token for the Remote Repository.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Remote Repository.\n"
        },
        "location": {
          "type": "string",
          "description": "The location of the Remote Repository. (Bucket name for S3)\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Remote Repository.\n"
        },
        "personalAccessToken": {
          "type": "string",
          "description": "The personal access token for the Remote Repository.\n"
        },
        "sourceType": {
          "type": "string",
          "description": "The source type of the Remote Repository.\n"
        }
      },
      "required": [
        "location",
        "name",
        "sourceType"
      ],
      "inputProperties": {
        "awsAccessKeyId": {
          "type": "string",
          "description": "The AWS access key ID for the Remote Repository.\n"
        },
        "awsSecretAccessKey": {
          "type": "string",
          "description": "The AWS secret access key for the Remote Repository.\n"
        },
        "awsSessionToken": {
          "type": "string",
          "description": "The AWS session token for the Remote Repository.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the Remote Repository.\n"
        },
        "location": {
          "type": "string",
          "description": "The location of the Remote Repository. (Bucket name for S3)\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Remote Repository.\n"
        },
        "personalAccessToken": {
          "type": "string",
          "description": "The personal access token for the Remote Repository.\n"
        },
        "sourceType": {
          "type": "string",
          "description": "The source type of the Remote Repository.\n"
        }
      },
      "requiredInputs": [
        "location",
        "sourceType"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering RemoteRepository resources.\n",
        "properties": {
          "awsAccessKeyId": {
            "type": "string",
            "description": "The AWS access key ID for the Remote Repository.\n"
          },
          "awsSecretAccessKey": {
            "type": "string",
            "description": "The AWS secret access key for the Remote Repository.\n"
          },
          "awsSessionToken": {
            "type": "string",
            "description": "The AWS session token for the Remote Repository.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the Remote Repository.\n"
          },
          "location": {
            "type": "string",
            "description": "The location of the Remote Repository. (Bucket name for S3)\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Remote Repository.\n"
          },
          "personalAccessToken": {
            "type": "string",
            "description": "The personal access token for the Remote Repository.\n"
          },
          "sourceType": {
            "type": "string",
            "description": "The source type of the Remote Repository.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/useCase:UseCase": {
      "description": "Use case\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.UseCase(\"example\", {});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.UseCase(\"example\")\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = new Datarobot.UseCase(\"example\");\n\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewUseCase(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.UseCase;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new UseCase(\"example\");\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:UseCase\noutputs:\n  exampleId: ${example.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the Use Case.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Use Case.\n"
        }
      },
      "required": [
        "name"
      ],
      "inputProperties": {
        "description": {
          "type": "string",
          "description": "The description of the Use Case.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the Use Case.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering UseCase resources.\n",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the Use Case.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Use Case.\n"
          }
        },
        "type": "object"
      }
    },
    "datarobot:index/vectorDatabase:VectorDatabase": {
      "description": "Vector database\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleUseCase = new datarobot.UseCase(\"exampleUseCase\", {description: \"Description for the example use case\"});\nconst exampleDatasetFromFile = new datarobot.DatasetFromFile(\"exampleDatasetFromFile\", {\n    filePath: \"[Path to file to upload]\",\n    useCaseIds: [exampleUseCase.id],\n});\nconst exampleVectorDatabase = new datarobot.VectorDatabase(\"exampleVectorDatabase\", {\n    useCaseId: exampleUseCase.id,\n    datasetId: exampleDatasetFromFile.id,\n});\n// Optional\n// chunking_parameters = {\n//   chunk_overlap_percentage = 0\n//   chunk_size               = 512\n//   chunking_method          = \"recursive\"\n//   embedding_model          = \"jinaai/jina-embedding-t-en-v1\"\n//   separators               = [\"\\n\", \" \"]\n// }\nexport const exampleId = exampleVectorDatabase.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_use_case = datarobot.UseCase(\"exampleUseCase\", description=\"Description for the example use case\")\nexample_dataset_from_file = datarobot.DatasetFromFile(\"exampleDatasetFromFile\",\n    file_path=\"[Path to file to upload]\",\n    use_case_ids=[example_use_case.id])\nexample_vector_database = datarobot.VectorDatabase(\"exampleVectorDatabase\",\n    use_case_id=example_use_case.id,\n    dataset_id=example_dataset_from_file.id)\n# Optional\n# chunking_parameters = {\n#   chunk_overlap_percentage = 0\n#   chunk_size               = 512\n#   chunking_method          = \"recursive\"\n#   embedding_model          = \"jinaai/jina-embedding-t-en-v1\"\n#   separators               = [\"\\n\", \" \"]\n# }\npulumi.export(\"exampleId\", example_vector_database.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleUseCase = new Datarobot.UseCase(\"exampleUseCase\", new()\n    {\n        Description = \"Description for the example use case\",\n    });\n\n    var exampleDatasetFromFile = new Datarobot.DatasetFromFile(\"exampleDatasetFromFile\", new()\n    {\n        FilePath = \"[Path to file to upload]\",\n        UseCaseIds = new[]\n        {\n            exampleUseCase.Id,\n        },\n    });\n\n    var exampleVectorDatabase = new Datarobot.VectorDatabase(\"exampleVectorDatabase\", new()\n    {\n        UseCaseId = exampleUseCase.Id,\n        DatasetId = exampleDatasetFromFile.Id,\n    });\n\n    // Optional\n    // chunking_parameters = {\n    //   chunk_overlap_percentage = 0\n    //   chunk_size               = 512\n    //   chunking_method          = \"recursive\"\n    //   embedding_model          = \"jinaai/jina-embedding-t-en-v1\"\n    //   separators               = [\"\\n\", \" \"]\n    // }\n    return new Dictionary<string, object?>\n    {\n        [\"exampleId\"] = exampleVectorDatabase.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUseCase, err := datarobot.NewUseCase(ctx, \"exampleUseCase\", &datarobot.UseCaseArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example use case\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDatasetFromFile, err := datarobot.NewDatasetFromFile(ctx, \"exampleDatasetFromFile\", &datarobot.DatasetFromFileArgs{\n\t\t\tFilePath: pulumi.String(\"[Path to file to upload]\"),\n\t\t\tUseCaseIds: pulumi.StringArray{\n\t\t\t\texampleUseCase.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleVectorDatabase, err := datarobot.NewVectorDatabase(ctx, \"exampleVectorDatabase\", &datarobot.VectorDatabaseArgs{\n\t\t\tUseCaseId: exampleUseCase.ID(),\n\t\t\tDatasetId: exampleDatasetFromFile.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", exampleVectorDatabase.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.UseCase;\nimport com.pulumi.datarobot.UseCaseArgs;\nimport com.pulumi.datarobot.DatasetFromFile;\nimport com.pulumi.datarobot.DatasetFromFileArgs;\nimport com.pulumi.datarobot.VectorDatabase;\nimport com.pulumi.datarobot.VectorDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUseCase = new UseCase(\"exampleUseCase\", UseCaseArgs.builder()\n            .description(\"Description for the example use case\")\n            .build());\n\n        var exampleDatasetFromFile = new DatasetFromFile(\"exampleDatasetFromFile\", DatasetFromFileArgs.builder()\n            .filePath(\"[Path to file to upload]\")\n            .useCaseIds(exampleUseCase.id())\n            .build());\n\n        var exampleVectorDatabase = new VectorDatabase(\"exampleVectorDatabase\", VectorDatabaseArgs.builder()\n            .useCaseId(exampleUseCase.id())\n            .datasetId(exampleDatasetFromFile.id())\n            .build());\n\n        // Optional\n        // chunking_parameters = {\n        //   chunk_overlap_percentage = 0\n        //   chunk_size               = 512\n        //   chunking_method          = \"recursive\"\n        //   embedding_model          = \"jinaai/jina-embedding-t-en-v1\"\n        //   separators               = [\"\\n\", \" \"]\n        // }\n        ctx.export(\"exampleId\", exampleVectorDatabase.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleUseCase:\n    type: datarobot:UseCase\n    properties:\n      description: Description for the example use case\n  exampleDatasetFromFile:\n    type: datarobot:DatasetFromFile\n    properties:\n      filePath: '[Path to file to upload]'\n      useCaseIds:\n        - ${exampleUseCase.id}\n  exampleVectorDatabase:\n    type: datarobot:VectorDatabase\n    properties:\n      useCaseId: ${exampleUseCase.id}\n      datasetId: ${exampleDatasetFromFile.id}\noutputs:\n  exampleId: ${exampleVectorDatabase.id}\n```\n<!--End PulumiCodeChooser -->\n",
      "properties": {
        "chunkingParameters": {
          "$ref": "#/types/datarobot:index/VectorDatabaseChunkingParameters:VectorDatabaseChunkingParameters",
          "description": "The chunking parameters for the Model.\n"
        },
        "datasetId": {
          "type": "string",
          "description": "The id of the Vector Database.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the VectorDatabase.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The id of the Use Case.\n"
        },
        "version": {
          "type": "integer",
          "description": "The version of the VectorDatabase.\n"
        }
      },
      "required": [
        "chunkingParameters",
        "datasetId",
        "name",
        "useCaseId",
        "version"
      ],
      "inputProperties": {
        "chunkingParameters": {
          "$ref": "#/types/datarobot:index/VectorDatabaseChunkingParameters:VectorDatabaseChunkingParameters",
          "description": "The chunking parameters for the Model.\n"
        },
        "datasetId": {
          "type": "string",
          "description": "The id of the Vector Database.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the VectorDatabase.\n"
        },
        "useCaseId": {
          "type": "string",
          "description": "The id of the Use Case.\n"
        }
      },
      "requiredInputs": [
        "datasetId",
        "useCaseId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering VectorDatabase resources.\n",
        "properties": {
          "chunkingParameters": {
            "$ref": "#/types/datarobot:index/VectorDatabaseChunkingParameters:VectorDatabaseChunkingParameters",
            "description": "The chunking parameters for the Model.\n"
          },
          "datasetId": {
            "type": "string",
            "description": "The id of the Vector Database.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the VectorDatabase.\n"
          },
          "useCaseId": {
            "type": "string",
            "description": "The id of the Use Case.\n"
          },
          "version": {
            "type": "integer",
            "description": "The version of the VectorDatabase.\n"
          }
        },
        "type": "object"
      }
    }
  },
  "functions": {
    "datarobot:index/getExecutionEnvironment:getExecutionEnvironment": {
      "description": "Execution Environment\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@pulumi/datarobot\";\n\nconst example = datarobot.getExecutionEnvironment({\n    name: \"DataRobot] Python 3.12\",\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.get_execution_environment(name=\"DataRobot] Python 3.12\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = Pulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var example = Datarobot.GetExecutionEnvironment.Invoke(new()\n    {\n        Name = \"DataRobot] Python 3.12\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.LookupExecutionEnvironment(ctx, &datarobot.LookupExecutionEnvironmentArgs{\n\t\t\tName: \"DataRobot] Python 3.12\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.DatarobotFunctions;\nimport com.pulumi.datarobot.inputs.GetExecutionEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DatarobotFunctions.getExecutionEnvironment(GetExecutionEnvironmentArgs.builder()\n            .name(\"DataRobot] Python 3.12\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: datarobot:getExecutionEnvironment\n      arguments:\n        name: DataRobot] Python 3.12\n```\n<!--End PulumiCodeChooser -->\n",
      "inputs": {
        "description": "A collection of arguments for invoking getExecutionEnvironment.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Execution Environment.\n"
          }
        },
        "type": "object",
        "required": [
          "name"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getExecutionEnvironment.\n",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the Execution Environment.\n"
          },
          "id": {
            "type": "string",
            "description": "The ID of the Execution Environment.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Execution Environment.\n"
          },
          "programmingLanguage": {
            "type": "string",
            "description": "The programming language of the Execution Environment.\n"
          },
          "versionId": {
            "type": "string",
            "description": "The ID of the Execution Environment Version.\n"
          }
        },
        "type": "object",
        "required": [
          "description",
          "id",
          "name",
          "programmingLanguage",
          "versionId"
        ]
      }
    },
    "datarobot:index/getGlobalModel:getGlobalModel": {
      "description": "Global Model\n\n## Example Usage\n\n<!--Start PulumiCodeChooser -->\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@pulumi/datarobot\";\n\nconst dummyBinaryClassification = datarobot.getGlobalModel({\n    name: \"[DataRobot] Dummy Binary Classification\",\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\ndummy_binary_classification = datarobot.get_global_model(name=\"[DataRobot] Dummy Binary Classification\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = Pulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() => \n{\n    var dummyBinaryClassification = Datarobot.GetGlobalModel.Invoke(new()\n    {\n        Name = \"[DataRobot] Dummy Binary Classification\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.GetGlobalModel(ctx, &datarobot.GetGlobalModelArgs{\n\t\t\tName: \"[DataRobot] Dummy Binary Classification\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.DatarobotFunctions;\nimport com.pulumi.datarobot.inputs.GetGlobalModelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dummyBinaryClassification = DatarobotFunctions.getGlobalModel(GetGlobalModelArgs.builder()\n            .name(\"[DataRobot] Dummy Binary Classification\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dummyBinaryClassification:\n    fn::invoke:\n      function: datarobot:getGlobalModel\n      arguments:\n        name: '[DataRobot] Dummy Binary Classification'\n```\n<!--End PulumiCodeChooser -->\n",
      "inputs": {
        "description": "A collection of arguments for invoking getGlobalModel.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Registered Model.\n"
          }
        },
        "type": "object",
        "required": [
          "name"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getGlobalModel.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Global Model.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the Registered Model.\n"
          },
          "versionId": {
            "type": "string",
            "description": "The ID of the Global Model Version.\n"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "versionId"
        ]
      }
    }
  }
}
