{
    "name": "datarobot",
    "displayName": "DataRobot",
    "description": "A Pulumi package for creating and managing DataRobot resources.",
    "keywords": [
        "datarobot",
        "ai",
        "category/cloud"
    ],
    "homepage": "https://www.datarobot.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`datarobot` Terraform Provider](https://github.com/datarobot-community/terraform-provider-datarobot).",
    "repository": "https://github.com/datarobot-community/pulumi-datarobot",
    "logoUrl": "https://raw.githubusercontent.com/datarobot-community/pulumi-datarobot/main/assets/datarobot-logo.png",
    "pluginDownloadURL": "github://api.github.com/datarobot-community/pulumi-datarobot",
    "publisher": "DataRobot, Inc.",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "DataRobotPulumi"
        },
        "go": {
            "importBasePath": "github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@datarobot/pulumi-datarobot",
            "packageDescription": "A Pulumi package for creating and managing DataRobot resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/datarobot-community/terraform-provider-datarobot)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-datarobot` repo](https://github.com/datarobot-community/pulumi-datarobot/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-datarobot` repo](https://github.com/datarobot-community/terraform-provider-datarobot/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/datarobot-community/terraform-provider-datarobot)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-datarobot` repo](https://github.com/datarobot-community/pulumi-datarobot/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-datarobot` repo](https://github.com/datarobot-community/terraform-provider-datarobot/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apikey": {
                "type": "string",
                "description": "Key to access DataRobot API\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "Endpoint for the DataRobot API\n",
                "secret": true
            }
        }
    },
    "types": {
        "datarobot:index/ApplicationSourceResourceSettings:ApplicationSourceResourceSettings": {
            "properties": {
                "replicas": {
                    "type": "integer",
                    "description": "The replicas for the Application Source.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "replicas"
                    ]
                }
            }
        },
        "datarobot:index/ApplicationSourceRuntimeParameterValue:ApplicationSourceRuntimeParameterValue": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the runtime parameter.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the runtime parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the runtime parameter (type conversion is handled internally).\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "type",
                "value"
            ]
        },
        "datarobot:index/CustomModelGuardConfiguration:CustomModelGuardConfiguration": {
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The deployment ID of this guard.\n"
                },
                "inputColumnName": {
                    "type": "string",
                    "description": "The input column name of this guard.\n"
                },
                "intervention": {
                    "$ref": "#/types/datarobot:index/CustomModelGuardConfigurationIntervention:CustomModelGuardConfigurationIntervention",
                    "description": "The intervention for the guard configuration.\n"
                },
                "llmType": {
                    "type": "string",
                    "description": "The LLM type for this guard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the guard configuration.\n"
                },
                "openaiApiBase": {
                    "type": "string",
                    "description": "The OpenAI API base URL for this guard.\n"
                },
                "openaiCredential": {
                    "type": "string",
                    "description": "The ID of an OpenAI credential for this guard.\n"
                },
                "openaiDeploymentId": {
                    "type": "string",
                    "description": "The ID of an OpenAI deployment for this guard.\n"
                },
                "outputColumnName": {
                    "type": "string",
                    "description": "The output column name of this guard.\n"
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of stages for the guard configuration.\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "The template name of the guard configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "intervention",
                "name",
                "stages",
                "templateName"
            ]
        },
        "datarobot:index/CustomModelGuardConfigurationIntervention:CustomModelGuardConfigurationIntervention": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action of the guard intervention.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The JSON-encoded condition of the guard intervention. e.g. `{\"comparand\": 0.5, \"comparator\": \"lessThan\"}`\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message of the guard intervention.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "condition"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "condition",
                        "message"
                    ]
                }
            }
        },
        "datarobot:index/CustomModelOverallModerationConfiguration:CustomModelOverallModerationConfiguration": {
            "properties": {
                "timeoutAction": {
                    "type": "string",
                    "description": "The timeout action of the overall moderation configuration.\n"
                },
                "timeoutSec": {
                    "type": "integer",
                    "description": "The timeout in seconds of the overall moderation configuration.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeoutAction",
                        "timeoutSec"
                    ]
                }
            }
        },
        "datarobot:index/CustomModelResourceSettings:CustomModelResourceSettings": {
            "properties": {
                "memoryMb": {
                    "type": "integer",
                    "description": "The memory in MB for the Custom Model.\n"
                },
                "networkAccess": {
                    "type": "string",
                    "description": "The network access for the Custom Model.\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "The replicas for the Custom Model.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "memoryMb",
                        "networkAccess",
                        "replicas"
                    ]
                }
            }
        },
        "datarobot:index/CustomModelRuntimeParameterValue:CustomModelRuntimeParameterValue": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the runtime parameter.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the runtime parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the runtime parameter (type conversion is handled internally).\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "type",
                "value"
            ]
        },
        "datarobot:index/CustomModelSourceRemoteRepository:CustomModelSourceRemoteRepository": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the source remote repository.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The reference of the source remote repository.\n"
                },
                "sourcePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of source paths in the source remote repository.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ref",
                "sourcePaths"
            ]
        },
        "datarobot:index/DeploymentAssociationIdSettings:DeploymentAssociationIdSettings": {
            "properties": {
                "autoGenerateId": {
                    "type": "boolean",
                    "description": "Whether to auto generate ID.\n"
                },
                "columnNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Name of the columns to be used as association ID, currently only support a list of one string.\n"
                },
                "requiredInPredictionRequests": {
                    "type": "boolean",
                    "description": "Whether the association ID column is required in prediction requests.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/DeploymentBiasAndFairnessSettings:DeploymentBiasAndFairnessSettings": {
            "properties": {
                "fairnessMetricSet": {
                    "type": "string",
                    "description": "A set of fairness metrics to use for calculating fairness.\n"
                },
                "fairnessThreshold": {
                    "type": "number",
                    "description": "Threshold value of the fairness metric. Cannot be less than 0 or greater than 1.\n"
                },
                "preferableTargetValue": {
                    "type": "boolean",
                    "description": "A target value that should be treated as a positive outcome for the prediction.\n"
                },
                "protectedFeatures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of features to mark as protected.\n"
                }
            },
            "type": "object",
            "required": [
                "fairnessMetricSet",
                "fairnessThreshold",
                "preferableTargetValue",
                "protectedFeatures"
            ]
        },
        "datarobot:index/DeploymentChallengerModelsSettings:DeploymentChallengerModelsSettings": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Is 'True' if challenger models is enabled for this deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "datarobot:index/DeploymentChallengerReplaySettings:DeploymentChallengerReplaySettings": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If challenger replay is enabled.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "datarobot:index/DeploymentDriftTrackingSettings:DeploymentDriftTrackingSettings": {
            "properties": {
                "featureDriftEnabled": {
                    "type": "boolean",
                    "description": "If feature drift tracking is to be turned on.\n"
                },
                "targetDriftEnabled": {
                    "type": "boolean",
                    "description": "If target drift tracking is to be turned on.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/DeploymentHealthSettings:DeploymentHealthSettings": {
            "properties": {
                "accuracy": {
                    "$ref": "#/types/datarobot:index/DeploymentHealthSettingsAccuracy:DeploymentHealthSettingsAccuracy",
                    "description": "The accuracy health settings for this Deployment.\n"
                },
                "actualsTimeliness": {
                    "$ref": "#/types/datarobot:index/DeploymentHealthSettingsActualsTimeliness:DeploymentHealthSettingsActualsTimeliness",
                    "description": "The actuals timeliness health settings for this Deployment.\n"
                },
                "customMetrics": {
                    "$ref": "#/types/datarobot:index/DeploymentHealthSettingsCustomMetrics:DeploymentHealthSettingsCustomMetrics",
                    "description": "The custom metrics health settings for this Deployment.\n"
                },
                "dataDrift": {
                    "$ref": "#/types/datarobot:index/DeploymentHealthSettingsDataDrift:DeploymentHealthSettingsDataDrift",
                    "description": "The data drift health settings for this Deployment.\n"
                },
                "fairness": {
                    "$ref": "#/types/datarobot:index/DeploymentHealthSettingsFairness:DeploymentHealthSettingsFairness",
                    "description": "The fairness health settings for this Deployment.\n"
                },
                "predictionsTimeliness": {
                    "$ref": "#/types/datarobot:index/DeploymentHealthSettingsPredictionsTimeliness:DeploymentHealthSettingsPredictionsTimeliness",
                    "description": "The predictions timeliness health settings for this Deployment.\n"
                },
                "service": {
                    "$ref": "#/types/datarobot:index/DeploymentHealthSettingsService:DeploymentHealthSettingsService",
                    "description": "The service health settings for this Deployment.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/DeploymentHealthSettingsAccuracy:DeploymentHealthSettingsAccuracy": {
            "properties": {
                "batchCount": {
                    "type": "integer",
                    "description": "The batch count for the accuracy health settings.\n"
                },
                "failingThreshold": {
                    "type": "number",
                    "description": "The failing threshold for the accuracy health settings.\n"
                },
                "measurement": {
                    "type": "string",
                    "description": "The measurement for the accuracy health settings.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric for the accuracy health settings.\n"
                },
                "warningThreshold": {
                    "type": "number",
                    "description": "The warning threshold for the accuracy health settings.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/DeploymentHealthSettingsActualsTimeliness:DeploymentHealthSettingsActualsTimeliness": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If acutals timeliness is enabled for this Deployment.\n"
                },
                "expectedFrequency": {
                    "type": "string",
                    "description": "The expected frequency for the actuals timeliness health settings.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "datarobot:index/DeploymentHealthSettingsCustomMetrics:DeploymentHealthSettingsCustomMetrics": {
            "properties": {
                "failingConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/DeploymentHealthSettingsCustomMetricsFailingCondition:DeploymentHealthSettingsCustomMetricsFailingCondition"
                    },
                    "description": "The failing conditions for the custom metrics health settings.\n"
                },
                "warningConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/DeploymentHealthSettingsCustomMetricsWarningCondition:DeploymentHealthSettingsCustomMetricsWarningCondition"
                    },
                    "description": "The warning conditions for the custom metrics health settings.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/DeploymentHealthSettingsCustomMetricsFailingCondition:DeploymentHealthSettingsCustomMetricsFailingCondition": {
            "properties": {
                "compareOperator": {
                    "type": "string",
                    "description": "The compare operator for the failing condition of the custom metrics health settings.\n"
                },
                "metricId": {
                    "type": "string",
                    "description": "The metric ID for the failing condition of the custom metrics health settings.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "The threshold for the failing condition of the custom metrics health settings.\n"
                }
            },
            "type": "object",
            "required": [
                "compareOperator",
                "metricId",
                "threshold"
            ]
        },
        "datarobot:index/DeploymentHealthSettingsCustomMetricsWarningCondition:DeploymentHealthSettingsCustomMetricsWarningCondition": {
            "properties": {
                "compareOperator": {
                    "type": "string",
                    "description": "The compare operator for the warning condition of the custom metrics health settings.\n"
                },
                "metricId": {
                    "type": "string",
                    "description": "The metric ID for the warning condition of the custom metrics health settings.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "The threshold for the warning condition of the custom metrics health settings.\n"
                }
            },
            "type": "object",
            "required": [
                "compareOperator",
                "metricId",
                "threshold"
            ]
        },
        "datarobot:index/DeploymentHealthSettingsDataDrift:DeploymentHealthSettingsDataDrift": {
            "properties": {
                "batchCount": {
                    "type": "integer",
                    "description": "The batch count for the data drift health settings.\n"
                },
                "driftThreshold": {
                    "type": "number",
                    "description": "The drift threshold for the data drift health settings.\n"
                },
                "excludeFeatures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The exclude features for the data drift health settings.\n"
                },
                "highImportanceFailingCount": {
                    "type": "integer",
                    "description": "The high importance failing count for the data drift health settings.\n"
                },
                "highImportanceWarningCount": {
                    "type": "integer",
                    "description": "The high importance warning count for the data drift health settings.\n"
                },
                "importanceThreshold": {
                    "type": "number",
                    "description": "The importance threshold for the data drift health settings.\n"
                },
                "lowImportanceFailingCount": {
                    "type": "integer",
                    "description": "The low importance failing count for the data drift health settings.\n"
                },
                "lowImportanceWarningCount": {
                    "type": "integer",
                    "description": "The low importance warning count for the data drift health settings.\n"
                },
                "starredFeatures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The starred features for the data drift health settings.\n"
                },
                "timeInterval": {
                    "type": "string",
                    "description": "The time interval for the data drift health settings.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/DeploymentHealthSettingsFairness:DeploymentHealthSettingsFairness": {
            "properties": {
                "protectedClassFailingCount": {
                    "type": "integer",
                    "description": "The protected class failing count for the fairness health settings.\n"
                },
                "protectedClassWarningCount": {
                    "type": "integer",
                    "description": "The protected class warning count for the fairness health settings.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/DeploymentHealthSettingsPredictionsTimeliness:DeploymentHealthSettingsPredictionsTimeliness": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If predictions timeliness is enabled for this Deployment.\n"
                },
                "expectedFrequency": {
                    "type": "string",
                    "description": "The expected frequency for the predictions timeliness health settings.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "datarobot:index/DeploymentHealthSettingsService:DeploymentHealthSettingsService": {
            "properties": {
                "batchCount": {
                    "type": "integer",
                    "description": "The batch count for the service health settings.\n"
                }
            },
            "type": "object",
            "required": [
                "batchCount"
            ]
        },
        "datarobot:index/DeploymentPredictionIntervalsSettings:DeploymentPredictionIntervalsSettings": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether prediction intervals are enabled for this deployment.\n"
                },
                "percentiles": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of enabled prediction intervals’ sizes for this deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "datarobot:index/DeploymentPredictionWarningSettings:DeploymentPredictionWarningSettings": {
            "properties": {
                "customBoundaries": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionWarningSettingsCustomBoundaries:DeploymentPredictionWarningSettingsCustomBoundaries",
                    "description": "The custom boundaries for prediction warnings.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If target prediction warning is enabled for this Deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "datarobot:index/DeploymentPredictionWarningSettingsCustomBoundaries:DeploymentPredictionWarningSettingsCustomBoundaries": {
            "properties": {
                "lowerBoundary": {
                    "type": "number",
                    "description": "All predictions less than provided value will be considered anomalous.\n"
                },
                "upperBoundary": {
                    "type": "number",
                    "description": "All predictions greater than provided value will be considered anomalous.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/DeploymentPredictionsByForecastDateSettings:DeploymentPredictionsByForecastDateSettings": {
            "properties": {
                "columnName": {
                    "type": "string",
                    "description": "The column name in prediction datasets to be used as forecast date.\n"
                },
                "datetimeFormat": {
                    "type": "string",
                    "description": "The datetime format of the forecast date column in prediction datasets.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is ’True’ if predictions by forecast date is enabled for this deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "datarobot:index/DeploymentPredictionsDataCollectionSettings:DeploymentPredictionsDataCollectionSettings": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If predictions data collections is enabled for this Deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "datarobot:index/DeploymentPredictionsSettings:DeploymentPredictionsSettings": {
            "properties": {
                "maxComputes": {
                    "type": "integer",
                    "description": "The maximum number of computes to use for predictions.\n"
                },
                "minComputes": {
                    "type": "integer",
                    "description": "The minimum number of computes to use for predictions.\n"
                },
                "realTime": {
                    "type": "boolean",
                    "description": "Whether to use real-time predictions.\n"
                }
            },
            "type": "object",
            "required": [
                "maxComputes",
                "minComputes",
                "realTime"
            ]
        },
        "datarobot:index/DeploymentSegmentAnalysisSettings:DeploymentSegmentAnalysisSettings": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings that gives the segment attributes selected for tracking.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Set to 'True' if segment analysis is enabled for this deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "datarobot:index/LlmBlueprintLlmSettings:LlmBlueprintLlmSettings": {
            "properties": {
                "maxCompletionLength": {
                    "type": "integer",
                    "description": "The maximum number of tokens allowed in the completion. The combined count of this value and prompt tokens must be below the model's maximum context size, where prompt token count is comprised of system prompt, user prompt, recent chat history, and vector database citations.\n"
                },
                "systemPrompt": {
                    "type": "string",
                    "description": "Guides the style of the LLM response. It is a 'universal' prompt, prepended to all individual prompts.\n"
                },
                "temperature": {
                    "type": "number",
                    "description": "Controls the randomness of model output, where higher values return more diverse output and lower values return more deterministic results.\n"
                },
                "topP": {
                    "type": "number",
                    "description": "Threshold that controls the selection of words included in the response, based on a cumulative probability cutoff for token selection. Higher numbers return more diverse options for outputs.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/LlmBlueprintVectorDatabaseSettings:LlmBlueprintVectorDatabaseSettings": {
            "properties": {
                "maxDocumentsRetrievedPerPrompt": {
                    "type": "integer",
                    "description": "The maximum number of documents to retrieve from the Vector Database.\n"
                },
                "maxTokens": {
                    "type": "integer",
                    "description": "The maximum number of tokens to retrieve from the Vector Database.\n"
                }
            },
            "type": "object"
        },
        "datarobot:index/VectorDatabaseChunkingParameters:VectorDatabaseChunkingParameters": {
            "properties": {
                "chunkOverlapPercentage": {
                    "type": "integer",
                    "description": "The percentage of overlap between chunks.\n"
                },
                "chunkSize": {
                    "type": "integer",
                    "description": "The size of the chunks.\n"
                },
                "chunkingMethod": {
                    "type": "string",
                    "description": "The method used to chunk the data.\n"
                },
                "embeddingModel": {
                    "type": "string",
                    "description": "The id of the Embedding Model.\n"
                },
                "isSeparatorRegex": {
                    "type": "boolean",
                    "description": "Whether the separator is a regex.\n"
                },
                "separators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The separators used to split the data.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "chunkOverlapPercentage",
                        "chunkSize",
                        "chunkingMethod",
                        "embeddingModel",
                        "isSeparatorRegex",
                        "separators"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the datarobot package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apikey": {
                "type": "string",
                "description": "Key to access DataRobot API\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "Endpoint for the DataRobot API\n",
                "secret": true
            }
        },
        "inputProperties": {
            "apikey": {
                "type": "string",
                "description": "Key to access DataRobot API\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "Endpoint for the DataRobot API\n",
                "secret": true
            }
        }
    },
    "resources": {
        "datarobot:index/apiTokenCredential:ApiTokenCredential": {
            "description": "Api Token Credential\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.ApiTokenCredential(\"example\", {apiToken: \"[the API Key value here]\"});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.ApiTokenCredential(\"example\", api_token=\"[the API Key value here]\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Datarobot.ApiTokenCredential(\"example\", new()\n    {\n        ApiToken = \"[the API Key value here]\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewApiTokenCredential(ctx, \"example\", \u0026datarobot.ApiTokenCredentialArgs{\n\t\t\tApiToken: pulumi.String(\"[the API Key value here]\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.ApiTokenCredential;\nimport com.pulumi.datarobot.ApiTokenCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ApiTokenCredential(\"example\", ApiTokenCredentialArgs.builder()\n            .apiToken(\"[the API Key value here]\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:ApiTokenCredential\n    properties:\n      apiToken: '[the API Key value here]'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "The description of the Api Token Credential.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Api Token Credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Api Token Credential.\n"
                }
            },
            "required": [
                "apiToken",
                "name"
            ],
            "inputProperties": {
                "apiToken": {
                    "type": "string",
                    "description": "The description of the Api Token Credential.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Api Token Credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Api Token Credential.\n"
                }
            },
            "requiredInputs": [
                "apiToken"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiTokenCredential resources.\n",
                "properties": {
                    "apiToken": {
                        "type": "string",
                        "description": "The description of the Api Token Credential.\n",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Api Token Credential.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Api Token Credential.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/applicationSource:ApplicationSource": {
            "description": "Application Source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.ApplicationSource(\"example\", {\n    baseEnvironmentId: \"6542cd582a9d3d51bf4ac71e\",\n    files: [\n        [\"start-app.sh\"],\n        [\"streamlit-app.py\"],\n    ],\n});\nexport const datarobotApplicationSourceId = example.id;\nexport const datarobotApplicationSourceVersionId = example.versionId;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.ApplicationSource(\"example\",\n    base_environment_id=\"6542cd582a9d3d51bf4ac71e\",\n    files=[\n        [\"start-app.sh\"],\n        [\"streamlit-app.py\"],\n    ])\npulumi.export(\"datarobotApplicationSourceId\", example.id)\npulumi.export(\"datarobotApplicationSourceVersionId\", example.version_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Datarobot.ApplicationSource(\"example\", new()\n    {\n        BaseEnvironmentId = \"6542cd582a9d3d51bf4ac71e\",\n        Files = new[]\n        {\n            new[]\n            {\n                \"start-app.sh\",\n            },\n            new[]\n            {\n                \"streamlit-app.py\",\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"datarobotApplicationSourceId\"] = example.Id,\n        [\"datarobotApplicationSourceVersionId\"] = example.VersionId,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewApplicationSource(ctx, \"example\", \u0026datarobot.ApplicationSourceArgs{\n\t\t\tBaseEnvironmentId: pulumi.String(\"6542cd582a9d3d51bf4ac71e\"),\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t[]string{\n\t\t\t\t\t\"start-app.sh\",\n\t\t\t\t},\n\t\t\t\t[]string{\n\t\t\t\t\t\"streamlit-app.py\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotApplicationSourceId\", example.ID())\n\t\tctx.Export(\"datarobotApplicationSourceVersionId\", example.VersionId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.ApplicationSource;\nimport com.pulumi.datarobot.ApplicationSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ApplicationSource(\"example\", ApplicationSourceArgs.builder()\n            .baseEnvironmentId(\"6542cd582a9d3d51bf4ac71e\")\n            .files(            \n                \"start-app.sh\",\n                \"streamlit-app.py\")\n            .build());\n\n        ctx.export(\"datarobotApplicationSourceId\", example.id());\n        ctx.export(\"datarobotApplicationSourceVersionId\", example.versionId());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:ApplicationSource\n    properties:\n      baseEnvironmentId: 6542cd582a9d3d51bf4ac71e\n      files:\n        - - start-app.sh\n        - - streamlit-app.py\noutputs:\n  datarobotApplicationSourceId: ${example.id}\n  datarobotApplicationSourceVersionId: ${example.versionId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "baseEnvironmentId": {
                    "type": "string",
                    "description": "The ID of the base environment for the Application Source.\n"
                },
                "baseEnvironmentVersionId": {
                    "type": "string",
                    "description": "The ID of the base environment version for the Application Source.\n"
                },
                "files": {
                    "$ref": "pulumi.json#/Any",
                    "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.\n"
                },
                "filesHashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The hash of file contents for each file in files.\n"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.\n"
                },
                "folderPathHash": {
                    "type": "string",
                    "description": "The hash of the folder path contents.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Application Source.\n"
                },
                "resourceSettings": {
                    "$ref": "#/types/datarobot:index/ApplicationSourceResourceSettings:ApplicationSourceResourceSettings",
                    "description": "The resource settings for the Application Source.\n"
                },
                "runtimeParameterValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/ApplicationSourceRuntimeParameterValue:ApplicationSourceRuntimeParameterValue"
                    },
                    "description": "The runtime parameter values for the Application Source.\n"
                },
                "versionId": {
                    "type": "string",
                    "description": "The version ID of the Application Source.\n"
                }
            },
            "required": [
                "baseEnvironmentId",
                "baseEnvironmentVersionId",
                "filesHashes",
                "folderPathHash",
                "name",
                "resourceSettings",
                "runtimeParameterValues",
                "versionId"
            ],
            "inputProperties": {
                "baseEnvironmentId": {
                    "type": "string",
                    "description": "The ID of the base environment for the Application Source.\n"
                },
                "baseEnvironmentVersionId": {
                    "type": "string",
                    "description": "The ID of the base environment version for the Application Source.\n"
                },
                "files": {
                    "$ref": "pulumi.json#/Any",
                    "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.\n"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Application Source.\n"
                },
                "resourceSettings": {
                    "$ref": "#/types/datarobot:index/ApplicationSourceResourceSettings:ApplicationSourceResourceSettings",
                    "description": "The resource settings for the Application Source.\n"
                },
                "runtimeParameterValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/ApplicationSourceRuntimeParameterValue:ApplicationSourceRuntimeParameterValue"
                    },
                    "description": "The runtime parameter values for the Application Source.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationSource resources.\n",
                "properties": {
                    "baseEnvironmentId": {
                        "type": "string",
                        "description": "The ID of the base environment for the Application Source.\n"
                    },
                    "baseEnvironmentVersionId": {
                        "type": "string",
                        "description": "The ID of the base environment version for the Application Source.\n"
                    },
                    "files": {
                        "$ref": "pulumi.json#/Any",
                        "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.\n"
                    },
                    "filesHashes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The hash of file contents for each file in files.\n"
                    },
                    "folderPath": {
                        "type": "string",
                        "description": "The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.\n"
                    },
                    "folderPathHash": {
                        "type": "string",
                        "description": "The hash of the folder path contents.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Application Source.\n"
                    },
                    "resourceSettings": {
                        "$ref": "#/types/datarobot:index/ApplicationSourceResourceSettings:ApplicationSourceResourceSettings",
                        "description": "The resource settings for the Application Source.\n"
                    },
                    "runtimeParameterValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/datarobot:index/ApplicationSourceRuntimeParameterValue:ApplicationSourceRuntimeParameterValue"
                        },
                        "description": "The runtime parameter values for the Application Source.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "The version ID of the Application Source.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/basicCredential:BasicCredential": {
            "description": "Basic Credential\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.BasicCredential(\"example\", {\n    description: \"Description for the example basic credential\",\n    password: \"example_password\",\n    user: \"example_user\",\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.BasicCredential(\"example\",\n    description=\"Description for the example basic credential\",\n    password=\"example_password\",\n    user=\"example_user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Datarobot.BasicCredential(\"example\", new()\n    {\n        Description = \"Description for the example basic credential\",\n        Password = \"example_password\",\n        User = \"example_user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewBasicCredential(ctx, \"example\", \u0026datarobot.BasicCredentialArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example basic credential\"),\n\t\t\tPassword:    pulumi.String(\"example_password\"),\n\t\t\tUser:        pulumi.String(\"example_user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.BasicCredential;\nimport com.pulumi.datarobot.BasicCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new BasicCredential(\"example\", BasicCredentialArgs.builder()\n            .description(\"Description for the example basic credential\")\n            .password(\"example_password\")\n            .user(\"example_user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:BasicCredential\n    properties:\n      description: Description for the example basic credential\n      password: example_password\n      user: example_user\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Basic Credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Basic Credential.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the Basic Credential.\n",
                    "secret": true
                },
                "user": {
                    "type": "string",
                    "description": "The user of the Basic Credential.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "password",
                "user"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Basic Credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Basic Credential.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the Basic Credential.\n",
                    "secret": true
                },
                "user": {
                    "type": "string",
                    "description": "The user of the Basic Credential.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "password",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BasicCredential resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Basic Credential.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Basic Credential.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the Basic Credential.\n",
                        "secret": true
                    },
                    "user": {
                        "type": "string",
                        "description": "The user of the Basic Credential.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/customApplication:CustomApplication": {
            "description": "Custom Application\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleApplicationSource = new datarobot.ApplicationSource(\"exampleApplicationSource\", {files: [\n    [\"start-app.sh\"],\n    [\"streamlit-app.py\"],\n]});\nconst exampleCustomApplication = new datarobot.CustomApplication(\"exampleCustomApplication\", {\n    sourceVersionId: exampleApplicationSource.versionId,\n    externalAccessEnabled: true,\n    externalAccessRecipients: [\"recipient@example.com\"],\n});\nexport const datarobotCustomApplicationId = exampleCustomApplication.id;\nexport const datarobotCustomApplicationSourceId = exampleCustomApplication.sourceId;\nexport const datarobotCustomApplicationSourceVersionId = exampleCustomApplication.sourceVersionId;\nexport const datarobotCustomApplicationUrl = exampleCustomApplication.applicationUrl;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_application_source = datarobot.ApplicationSource(\"exampleApplicationSource\", files=[\n    [\"start-app.sh\"],\n    [\"streamlit-app.py\"],\n])\nexample_custom_application = datarobot.CustomApplication(\"exampleCustomApplication\",\n    source_version_id=example_application_source.version_id,\n    external_access_enabled=True,\n    external_access_recipients=[\"recipient@example.com\"])\npulumi.export(\"datarobotCustomApplicationId\", example_custom_application.id)\npulumi.export(\"datarobotCustomApplicationSourceId\", example_custom_application.source_id)\npulumi.export(\"datarobotCustomApplicationSourceVersionId\", example_custom_application.source_version_id)\npulumi.export(\"datarobotCustomApplicationUrl\", example_custom_application.application_url)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationSource = new Datarobot.ApplicationSource(\"exampleApplicationSource\", new()\n    {\n        Files = new[]\n        {\n            new[]\n            {\n                \"start-app.sh\",\n            },\n            new[]\n            {\n                \"streamlit-app.py\",\n            },\n        },\n    });\n\n    var exampleCustomApplication = new Datarobot.CustomApplication(\"exampleCustomApplication\", new()\n    {\n        SourceVersionId = exampleApplicationSource.VersionId,\n        ExternalAccessEnabled = true,\n        ExternalAccessRecipients = new[]\n        {\n            \"recipient@example.com\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"datarobotCustomApplicationId\"] = exampleCustomApplication.Id,\n        [\"datarobotCustomApplicationSourceId\"] = exampleCustomApplication.SourceId,\n        [\"datarobotCustomApplicationSourceVersionId\"] = exampleCustomApplication.SourceVersionId,\n        [\"datarobotCustomApplicationUrl\"] = exampleCustomApplication.ApplicationUrl,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationSource, err := datarobot.NewApplicationSource(ctx, \"exampleApplicationSource\", \u0026datarobot.ApplicationSourceArgs{\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t[]string{\n\t\t\t\t\t\"start-app.sh\",\n\t\t\t\t},\n\t\t\t\t[]string{\n\t\t\t\t\t\"streamlit-app.py\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleCustomApplication, err := datarobot.NewCustomApplication(ctx, \"exampleCustomApplication\", \u0026datarobot.CustomApplicationArgs{\n\t\t\tSourceVersionId:       exampleApplicationSource.VersionId,\n\t\t\tExternalAccessEnabled: pulumi.Bool(true),\n\t\t\tExternalAccessRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"recipient@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotCustomApplicationId\", exampleCustomApplication.ID())\n\t\tctx.Export(\"datarobotCustomApplicationSourceId\", exampleCustomApplication.SourceId)\n\t\tctx.Export(\"datarobotCustomApplicationSourceVersionId\", exampleCustomApplication.SourceVersionId)\n\t\tctx.Export(\"datarobotCustomApplicationUrl\", exampleCustomApplication.ApplicationUrl)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.ApplicationSource;\nimport com.pulumi.datarobot.ApplicationSourceArgs;\nimport com.pulumi.datarobot.CustomApplication;\nimport com.pulumi.datarobot.CustomApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationSource = new ApplicationSource(\"exampleApplicationSource\", ApplicationSourceArgs.builder()\n            .files(            \n                \"start-app.sh\",\n                \"streamlit-app.py\")\n            .build());\n\n        var exampleCustomApplication = new CustomApplication(\"exampleCustomApplication\", CustomApplicationArgs.builder()\n            .sourceVersionId(exampleApplicationSource.versionId())\n            .externalAccessEnabled(true)\n            .externalAccessRecipients(\"recipient@example.com\")\n            .build());\n\n        ctx.export(\"datarobotCustomApplicationId\", exampleCustomApplication.id());\n        ctx.export(\"datarobotCustomApplicationSourceId\", exampleCustomApplication.sourceId());\n        ctx.export(\"datarobotCustomApplicationSourceVersionId\", exampleCustomApplication.sourceVersionId());\n        ctx.export(\"datarobotCustomApplicationUrl\", exampleCustomApplication.applicationUrl());\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationSource:\n    type: datarobot:ApplicationSource\n    properties:\n      files:\n        - - start-app.sh\n        - - streamlit-app.py\n  exampleCustomApplication:\n    type: datarobot:CustomApplication\n    properties:\n      sourceVersionId: ${exampleApplicationSource.versionId}\n      # optional settings\n      externalAccessEnabled: true\n      externalAccessRecipients:\n        - recipient@example.com\noutputs:\n  datarobotCustomApplicationId: ${exampleCustomApplication.id}\n  datarobotCustomApplicationSourceId: ${exampleCustomApplication.sourceId}\n  datarobotCustomApplicationSourceVersionId: ${exampleCustomApplication.sourceVersionId}\n  datarobotCustomApplicationUrl: ${exampleCustomApplication.applicationUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "applicationUrl": {
                    "type": "string",
                    "description": "The URL of the Custom Application.\n"
                },
                "externalAccessEnabled": {
                    "type": "boolean",
                    "description": "Whether external access is enabled for the Custom Application.\n"
                },
                "externalAccessRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of external email addresses that have access to the Custom Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Custom Application.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The ID of the Custom Application Source.\n"
                },
                "sourceVersionId": {
                    "type": "string",
                    "description": "The version ID of the Custom Application Source.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Custom Application to.\n"
                }
            },
            "required": [
                "applicationUrl",
                "externalAccessEnabled",
                "name",
                "sourceId",
                "sourceVersionId"
            ],
            "inputProperties": {
                "externalAccessEnabled": {
                    "type": "boolean",
                    "description": "Whether external access is enabled for the Custom Application.\n"
                },
                "externalAccessRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of external email addresses that have access to the Custom Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Custom Application.\n"
                },
                "sourceVersionId": {
                    "type": "string",
                    "description": "The version ID of the Custom Application Source.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Custom Application to.\n"
                }
            },
            "requiredInputs": [
                "sourceVersionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomApplication resources.\n",
                "properties": {
                    "applicationUrl": {
                        "type": "string",
                        "description": "The URL of the Custom Application.\n"
                    },
                    "externalAccessEnabled": {
                        "type": "boolean",
                        "description": "Whether external access is enabled for the Custom Application.\n"
                    },
                    "externalAccessRecipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of external email addresses that have access to the Custom Application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Custom Application.\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "The ID of the Custom Application Source.\n"
                    },
                    "sourceVersionId": {
                        "type": "string",
                        "description": "The version ID of the Custom Application Source.\n"
                    },
                    "useCaseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Use Case IDs to add the Custom Application to.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/customModel:CustomModel": {
            "description": "Data set from file\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleRemoteRepository = new datarobot.RemoteRepository(\"exampleRemoteRepository\", {\n    description: \"GitHub repository with Datarobot user models\",\n    location: \"https://github.com/datarobot/datarobot-user-models\",\n    sourceType: \"github\",\n});\n// set the credential id for private repositories\n// credential_id = datarobot_api_token_credential.example.id\nconst exampleCustomModel = new datarobot.CustomModel(\"exampleCustomModel\", {\n    description: \"An example custom model from GitHub repository\",\n    files: [\n        \"file1.py\",\n        \"file2.py\",\n    ],\n    targetType: \"Binary\",\n    targetName: \"my_label\",\n    baseEnvironmentId: \"65f9b27eab986d30d4c64268\",\n});\n// Optional\n// source_remote_repositories = [\n//   {\n//     id  = datarobot_remote_repository.example.id\n//     ref = \"master\"\n//     source_paths = [\n//       \"model_templates/python3_dummy_binary\",\n//     ]\n//   }\n// ]\n// guard_configurations = [\n//   {\n//     template_name = \"Rouge 1\"\n//     name          = \"Rouge 1 response\"\n//     stages        = [\"response\"]\n//     intervention = {\n//       action  = \"block\"\n//       message = \"response has been blocked by Rogue 1 guard\"\n//       condition = jsonencode({\n//         \"comparand\": 0.5, \n//         \"comparator\": \"greaterThan\"\n//       })\n//     }\n//   },\n// ]\n// overall_moderation_configuration = {\n//   timeout_sec    = 120\n//   timeout_action = \"score\"\n// }\n// resource_settings = {\n//   memory_mb      = 512\n//   replicas       = 2\n//   network_access = \"NONE\"\n// }\nexport const exampleId = exampleCustomModel.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_remote_repository = datarobot.RemoteRepository(\"exampleRemoteRepository\",\n    description=\"GitHub repository with Datarobot user models\",\n    location=\"https://github.com/datarobot/datarobot-user-models\",\n    source_type=\"github\")\n# set the credential id for private repositories\n# credential_id = datarobot_api_token_credential.example.id\nexample_custom_model = datarobot.CustomModel(\"exampleCustomModel\",\n    description=\"An example custom model from GitHub repository\",\n    files=[\n        \"file1.py\",\n        \"file2.py\",\n    ],\n    target_type=\"Binary\",\n    target_name=\"my_label\",\n    base_environment_id=\"65f9b27eab986d30d4c64268\")\n# Optional\n# source_remote_repositories = [\n#   {\n#     id  = datarobot_remote_repository.example.id\n#     ref = \"master\"\n#     source_paths = [\n#       \"model_templates/python3_dummy_binary\",\n#     ]\n#   }\n# ]\n# guard_configurations = [\n#   {\n#     template_name = \"Rouge 1\"\n#     name          = \"Rouge 1 response\"\n#     stages        = [\"response\"]\n#     intervention = {\n#       action  = \"block\"\n#       message = \"response has been blocked by Rogue 1 guard\"\n#       condition = jsonencode({\n#         \"comparand\": 0.5, \n#         \"comparator\": \"greaterThan\"\n#       })\n#     }\n#   },\n# ]\n# overall_moderation_configuration = {\n#   timeout_sec    = 120\n#   timeout_action = \"score\"\n# }\n# resource_settings = {\n#   memory_mb      = 512\n#   replicas       = 2\n#   network_access = \"NONE\"\n# }\npulumi.export(\"exampleId\", example_custom_model.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRemoteRepository = new Datarobot.RemoteRepository(\"exampleRemoteRepository\", new()\n    {\n        Description = \"GitHub repository with Datarobot user models\",\n        Location = \"https://github.com/datarobot/datarobot-user-models\",\n        SourceType = \"github\",\n    });\n\n    // set the credential id for private repositories\n    // credential_id = datarobot_api_token_credential.example.id\n    var exampleCustomModel = new Datarobot.CustomModel(\"exampleCustomModel\", new()\n    {\n        Description = \"An example custom model from GitHub repository\",\n        Files = new[]\n        {\n            \"file1.py\",\n            \"file2.py\",\n        },\n        TargetType = \"Binary\",\n        TargetName = \"my_label\",\n        BaseEnvironmentId = \"65f9b27eab986d30d4c64268\",\n    });\n\n    // Optional\n    // source_remote_repositories = [\n    //   {\n    //     id  = datarobot_remote_repository.example.id\n    //     ref = \"master\"\n    //     source_paths = [\n    //       \"model_templates/python3_dummy_binary\",\n    //     ]\n    //   }\n    // ]\n    // guard_configurations = [\n    //   {\n    //     template_name = \"Rouge 1\"\n    //     name          = \"Rouge 1 response\"\n    //     stages        = [\"response\"]\n    //     intervention = {\n    //       action  = \"block\"\n    //       message = \"response has been blocked by Rogue 1 guard\"\n    //       condition = jsonencode({\n    //         \"comparand\": 0.5, \n    //         \"comparator\": \"greaterThan\"\n    //       })\n    //     }\n    //   },\n    // ]\n    // overall_moderation_configuration = {\n    //   timeout_sec    = 120\n    //   timeout_action = \"score\"\n    // }\n    // resource_settings = {\n    //   memory_mb      = 512\n    //   replicas       = 2\n    //   network_access = \"NONE\"\n    // }\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleId\"] = exampleCustomModel.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewRemoteRepository(ctx, \"exampleRemoteRepository\", \u0026datarobot.RemoteRepositoryArgs{\n\t\t\tDescription: pulumi.String(\"GitHub repository with Datarobot user models\"),\n\t\t\tLocation:    pulumi.String(\"https://github.com/datarobot/datarobot-user-models\"),\n\t\t\tSourceType:  pulumi.String(\"github\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleCustomModel, err := datarobot.NewCustomModel(ctx, \"exampleCustomModel\", \u0026datarobot.CustomModelArgs{\n\t\t\tDescription: pulumi.String(\"An example custom model from GitHub repository\"),\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t\"file1.py\",\n\t\t\t\t\"file2.py\",\n\t\t\t},\n\t\t\tTargetType:        pulumi.String(\"Binary\"),\n\t\t\tTargetName:        pulumi.String(\"my_label\"),\n\t\t\tBaseEnvironmentId: pulumi.String(\"65f9b27eab986d30d4c64268\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", exampleCustomModel.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.RemoteRepository;\nimport com.pulumi.datarobot.RemoteRepositoryArgs;\nimport com.pulumi.datarobot.CustomModel;\nimport com.pulumi.datarobot.CustomModelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRemoteRepository = new RemoteRepository(\"exampleRemoteRepository\", RemoteRepositoryArgs.builder()\n            .description(\"GitHub repository with Datarobot user models\")\n            .location(\"https://github.com/datarobot/datarobot-user-models\")\n            .sourceType(\"github\")\n            .build());\n\n        // set the credential id for private repositories\n        // credential_id = datarobot_api_token_credential.example.id\n        var exampleCustomModel = new CustomModel(\"exampleCustomModel\", CustomModelArgs.builder()\n            .description(\"An example custom model from GitHub repository\")\n            .files(            \n                \"file1.py\",\n                \"file2.py\")\n            .targetType(\"Binary\")\n            .targetName(\"my_label\")\n            .baseEnvironmentId(\"65f9b27eab986d30d4c64268\")\n            .build());\n\n        // Optional\n        // source_remote_repositories = [\n        //   {\n        //     id  = datarobot_remote_repository.example.id\n        //     ref = \"master\"\n        //     source_paths = [\n        //       \"model_templates/python3_dummy_binary\",\n        //     ]\n        //   }\n        // ]\n        // guard_configurations = [\n        //   {\n        //     template_name = \"Rouge 1\"\n        //     name          = \"Rouge 1 response\"\n        //     stages        = [\"response\"]\n        //     intervention = {\n        //       action  = \"block\"\n        //       message = \"response has been blocked by Rogue 1 guard\"\n        //       condition = jsonencode({\n        //         \"comparand\": 0.5, \n        //         \"comparator\": \"greaterThan\"\n        //       })\n        //     }\n        //   },\n        // ]\n        // overall_moderation_configuration = {\n        //   timeout_sec    = 120\n        //   timeout_action = \"score\"\n        // }\n        // resource_settings = {\n        //   memory_mb      = 512\n        //   replicas       = 2\n        //   network_access = \"NONE\"\n        // }\n        ctx.export(\"exampleId\", exampleCustomModel.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleRemoteRepository:\n    type: datarobot:RemoteRepository\n    properties:\n      description: GitHub repository with Datarobot user models\n      location: https://github.com/datarobot/datarobot-user-models\n      sourceType: github\n  exampleCustomModel:\n    type: datarobot:CustomModel\n    properties:\n      description: An example custom model from GitHub repository\n      files:\n        - file1.py\n        - file2.py\n      targetType: Binary\n      targetName: my_label\n      baseEnvironmentId: 65f9b27eab986d30d4c64268\noutputs:\n  exampleId: ${exampleCustomModel.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "baseEnvironmentId": {
                    "type": "string",
                    "description": "The ID of the base environment for the Custom Model.\n"
                },
                "baseEnvironmentVersionId": {
                    "type": "string",
                    "description": "The ID of the base environment version for the Custom Model.\n"
                },
                "classLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Class labels for multiclass classification. Cannot be used with class*labels*file.\n"
                },
                "classLabelsFile": {
                    "type": "string",
                    "description": "Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.\n"
                },
                "deploymentsCount": {
                    "type": "integer",
                    "description": "The number of deployments for the Custom Model.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Custom Model.\n"
                },
                "files": {
                    "$ref": "pulumi.json#/Any",
                    "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.\n"
                },
                "filesHashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The hash of file contents for each file in files.\n"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.\n"
                },
                "folderPathHash": {
                    "type": "string",
                    "description": "The hash of the folder path contents.\n"
                },
                "guardConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/CustomModelGuardConfiguration:CustomModelGuardConfiguration"
                    },
                    "description": "The guard configurations for the Custom Model.\n"
                },
                "isProxy": {
                    "type": "boolean",
                    "description": "Flag indicating if the Custom Model is a proxy model.\n"
                },
                "language": {
                    "type": "string",
                    "description": "The language used to build the Custom Model.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Custom Model.\n"
                },
                "negativeClassLabel": {
                    "type": "string",
                    "description": "The negative class label of the Custom Model.\n"
                },
                "overallModerationConfiguration": {
                    "$ref": "#/types/datarobot:index/CustomModelOverallModerationConfiguration:CustomModelOverallModerationConfiguration",
                    "description": "The overall moderation configuration for the Custom Model.\n"
                },
                "positiveClassLabel": {
                    "type": "string",
                    "description": "The positive class label of the Custom Model.\n"
                },
                "predictionThreshold": {
                    "type": "number",
                    "description": "The prediction threshold of the Custom Model.\n"
                },
                "resourceSettings": {
                    "$ref": "#/types/datarobot:index/CustomModelResourceSettings:CustomModelResourceSettings",
                    "description": "The resource settings for the Custom Model.\n"
                },
                "runtimeParameterValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/CustomModelRuntimeParameterValue:CustomModelRuntimeParameterValue"
                    },
                    "description": "The runtime parameter values for the Custom Model.\n"
                },
                "sourceLlmBlueprintId": {
                    "type": "string",
                    "description": "The ID of the source LLM Blueprint for the Custom Model.\n"
                },
                "sourceRemoteRepositories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/CustomModelSourceRemoteRepository:CustomModelSourceRemoteRepository"
                    },
                    "description": "The source remote repositories for the Custom Model.\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "The target name of the Custom Model.\n"
                },
                "targetType": {
                    "type": "string",
                    "description": "The target type of the Custom Model.\n"
                },
                "trainingDataPartitionColumn": {
                    "type": "string",
                    "description": "The name of the partition column in the training dataset assigned to the Custom Model.\n"
                },
                "trainingDatasetId": {
                    "type": "string",
                    "description": "The ID of the training dataset assigned to the Custom Model.\n"
                },
                "trainingDatasetName": {
                    "type": "string",
                    "description": "The name of the training dataset assigned to the Custom Model.\n"
                },
                "trainingDatasetVersionId": {
                    "type": "string",
                    "description": "The version ID of the training dataset assigned to the Custom Model.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Custom Model version to.\n"
                },
                "versionId": {
                    "type": "string",
                    "description": "The ID of the latest Custom Model version.\n"
                }
            },
            "required": [
                "baseEnvironmentId",
                "baseEnvironmentVersionId",
                "deploymentsCount",
                "description",
                "filesHashes",
                "folderPathHash",
                "isProxy",
                "name",
                "negativeClassLabel",
                "positiveClassLabel",
                "predictionThreshold",
                "resourceSettings",
                "runtimeParameterValues",
                "targetName",
                "targetType",
                "trainingDatasetName",
                "trainingDatasetVersionId",
                "versionId"
            ],
            "inputProperties": {
                "baseEnvironmentId": {
                    "type": "string",
                    "description": "The ID of the base environment for the Custom Model.\n"
                },
                "baseEnvironmentVersionId": {
                    "type": "string",
                    "description": "The ID of the base environment version for the Custom Model.\n"
                },
                "classLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Class labels for multiclass classification. Cannot be used with class*labels*file.\n"
                },
                "classLabelsFile": {
                    "type": "string",
                    "description": "Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Custom Model.\n"
                },
                "files": {
                    "$ref": "pulumi.json#/Any",
                    "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.\n"
                },
                "folderPath": {
                    "type": "string",
                    "description": "The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.\n"
                },
                "guardConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/CustomModelGuardConfiguration:CustomModelGuardConfiguration"
                    },
                    "description": "The guard configurations for the Custom Model.\n"
                },
                "isProxy": {
                    "type": "boolean",
                    "description": "Flag indicating if the Custom Model is a proxy model.\n"
                },
                "language": {
                    "type": "string",
                    "description": "The language used to build the Custom Model.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Custom Model.\n"
                },
                "negativeClassLabel": {
                    "type": "string",
                    "description": "The negative class label of the Custom Model.\n"
                },
                "overallModerationConfiguration": {
                    "$ref": "#/types/datarobot:index/CustomModelOverallModerationConfiguration:CustomModelOverallModerationConfiguration",
                    "description": "The overall moderation configuration for the Custom Model.\n"
                },
                "positiveClassLabel": {
                    "type": "string",
                    "description": "The positive class label of the Custom Model.\n"
                },
                "predictionThreshold": {
                    "type": "number",
                    "description": "The prediction threshold of the Custom Model.\n"
                },
                "resourceSettings": {
                    "$ref": "#/types/datarobot:index/CustomModelResourceSettings:CustomModelResourceSettings",
                    "description": "The resource settings for the Custom Model.\n"
                },
                "runtimeParameterValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/CustomModelRuntimeParameterValue:CustomModelRuntimeParameterValue"
                    },
                    "description": "The runtime parameter values for the Custom Model.\n"
                },
                "sourceLlmBlueprintId": {
                    "type": "string",
                    "description": "The ID of the source LLM Blueprint for the Custom Model.\n"
                },
                "sourceRemoteRepositories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/datarobot:index/CustomModelSourceRemoteRepository:CustomModelSourceRemoteRepository"
                    },
                    "description": "The source remote repositories for the Custom Model.\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "The target name of the Custom Model.\n"
                },
                "targetType": {
                    "type": "string",
                    "description": "The target type of the Custom Model.\n"
                },
                "trainingDataPartitionColumn": {
                    "type": "string",
                    "description": "The name of the partition column in the training dataset assigned to the Custom Model.\n"
                },
                "trainingDatasetId": {
                    "type": "string",
                    "description": "The ID of the training dataset assigned to the Custom Model.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Custom Model version to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomModel resources.\n",
                "properties": {
                    "baseEnvironmentId": {
                        "type": "string",
                        "description": "The ID of the base environment for the Custom Model.\n"
                    },
                    "baseEnvironmentVersionId": {
                        "type": "string",
                        "description": "The ID of the base environment version for the Custom Model.\n"
                    },
                    "classLabels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Class labels for multiclass classification. Cannot be used with class*labels*file.\n"
                    },
                    "classLabelsFile": {
                        "type": "string",
                        "description": "Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.\n"
                    },
                    "deploymentsCount": {
                        "type": "integer",
                        "description": "The number of deployments for the Custom Model.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Custom Model.\n"
                    },
                    "files": {
                        "$ref": "pulumi.json#/Any",
                        "description": "The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.\n"
                    },
                    "filesHashes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The hash of file contents for each file in files.\n"
                    },
                    "folderPath": {
                        "type": "string",
                        "description": "The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.\n"
                    },
                    "folderPathHash": {
                        "type": "string",
                        "description": "The hash of the folder path contents.\n"
                    },
                    "guardConfigurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/datarobot:index/CustomModelGuardConfiguration:CustomModelGuardConfiguration"
                        },
                        "description": "The guard configurations for the Custom Model.\n"
                    },
                    "isProxy": {
                        "type": "boolean",
                        "description": "Flag indicating if the Custom Model is a proxy model.\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "The language used to build the Custom Model.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Custom Model.\n"
                    },
                    "negativeClassLabel": {
                        "type": "string",
                        "description": "The negative class label of the Custom Model.\n"
                    },
                    "overallModerationConfiguration": {
                        "$ref": "#/types/datarobot:index/CustomModelOverallModerationConfiguration:CustomModelOverallModerationConfiguration",
                        "description": "The overall moderation configuration for the Custom Model.\n"
                    },
                    "positiveClassLabel": {
                        "type": "string",
                        "description": "The positive class label of the Custom Model.\n"
                    },
                    "predictionThreshold": {
                        "type": "number",
                        "description": "The prediction threshold of the Custom Model.\n"
                    },
                    "resourceSettings": {
                        "$ref": "#/types/datarobot:index/CustomModelResourceSettings:CustomModelResourceSettings",
                        "description": "The resource settings for the Custom Model.\n"
                    },
                    "runtimeParameterValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/datarobot:index/CustomModelRuntimeParameterValue:CustomModelRuntimeParameterValue"
                        },
                        "description": "The runtime parameter values for the Custom Model.\n"
                    },
                    "sourceLlmBlueprintId": {
                        "type": "string",
                        "description": "The ID of the source LLM Blueprint for the Custom Model.\n"
                    },
                    "sourceRemoteRepositories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/datarobot:index/CustomModelSourceRemoteRepository:CustomModelSourceRemoteRepository"
                        },
                        "description": "The source remote repositories for the Custom Model.\n"
                    },
                    "targetName": {
                        "type": "string",
                        "description": "The target name of the Custom Model.\n"
                    },
                    "targetType": {
                        "type": "string",
                        "description": "The target type of the Custom Model.\n"
                    },
                    "trainingDataPartitionColumn": {
                        "type": "string",
                        "description": "The name of the partition column in the training dataset assigned to the Custom Model.\n"
                    },
                    "trainingDatasetId": {
                        "type": "string",
                        "description": "The ID of the training dataset assigned to the Custom Model.\n"
                    },
                    "trainingDatasetName": {
                        "type": "string",
                        "description": "The name of the training dataset assigned to the Custom Model.\n"
                    },
                    "trainingDatasetVersionId": {
                        "type": "string",
                        "description": "The version ID of the training dataset assigned to the Custom Model.\n"
                    },
                    "useCaseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Use Case IDs to add the Custom Model version to.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "The ID of the latest Custom Model version.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/datasetFromFile:DatasetFromFile": {
            "description": "Data set from file\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.DatasetFromFile(\"example\", {\n    filePath: \"[Path to file to upload]\",\n    useCaseIds: [datarobot_use_case.example.id],\n});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.DatasetFromFile(\"example\",\n    file_path=\"[Path to file to upload]\",\n    use_case_ids=[datarobot_use_case[\"example\"][\"id\"]])\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Datarobot.DatasetFromFile(\"example\", new()\n    {\n        FilePath = \"[Path to file to upload]\",\n        UseCaseIds = new[]\n        {\n            datarobot_use_case.Example.Id,\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewDatasetFromFile(ctx, \"example\", \u0026datarobot.DatasetFromFileArgs{\n\t\t\tFilePath: pulumi.String(\"[Path to file to upload]\"),\n\t\t\tUseCaseIds: pulumi.StringArray{\n\t\t\t\tdatarobot_use_case.Example.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.DatasetFromFile;\nimport com.pulumi.datarobot.DatasetFromFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DatasetFromFile(\"example\", DatasetFromFileArgs.builder()\n            .filePath(\"[Path to file to upload]\")\n            .useCaseIds(datarobot_use_case.example().id())\n            .build());\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:DatasetFromFile\n    properties:\n      filePath: '[Path to file to upload]'\n      useCaseIds:\n        - ${datarobot_use_case.example.id}\noutputs:\n  exampleId: ${example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "fileHash": {
                    "type": "string",
                    "description": "The hash of the file contents.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The path to the file to upload.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Dataset. Defaults to the file name.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Dataset to.\n"
                }
            },
            "required": [
                "fileHash",
                "filePath",
                "name"
            ],
            "inputProperties": {
                "filePath": {
                    "type": "string",
                    "description": "The path to the file to upload.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Dataset. Defaults to the file name.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Dataset to.\n"
                }
            },
            "requiredInputs": [
                "filePath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatasetFromFile resources.\n",
                "properties": {
                    "fileHash": {
                        "type": "string",
                        "description": "The hash of the file contents.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The path to the file to upload.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Dataset. Defaults to the file name.\n"
                    },
                    "useCaseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Use Case IDs to add the Dataset to.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/datasetFromUrl:DatasetFromUrl": {
            "description": "Data set from file\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.DatasetFromUrl(\"example\", {\n    url: \"[URL to upload from]\",\n    useCaseIds: [datarobot_use_case.example.id],\n});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.DatasetFromUrl(\"example\",\n    url=\"[URL to upload from]\",\n    use_case_ids=[datarobot_use_case[\"example\"][\"id\"]])\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Datarobot.DatasetFromUrl(\"example\", new()\n    {\n        Url = \"[URL to upload from]\",\n        UseCaseIds = new[]\n        {\n            datarobot_use_case.Example.Id,\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewDatasetFromUrl(ctx, \"example\", \u0026datarobot.DatasetFromUrlArgs{\n\t\t\tUrl: pulumi.String(\"[URL to upload from]\"),\n\t\t\tUseCaseIds: pulumi.StringArray{\n\t\t\t\tdatarobot_use_case.Example.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.DatasetFromUrl;\nimport com.pulumi.datarobot.DatasetFromUrlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DatasetFromUrl(\"example\", DatasetFromUrlArgs.builder()\n            .url(\"[URL to upload from]\")\n            .useCaseIds(datarobot_use_case.example().id())\n            .build());\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:DatasetFromUrl\n    properties:\n      url: '[URL to upload from]'\n      useCaseIds:\n        - ${datarobot_use_case.example.id}\noutputs:\n  exampleId: ${example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Dataset.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to upload the Dataset from.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Dataset to.\n"
                }
            },
            "required": [
                "name",
                "url"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Dataset.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to upload the Dataset from.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Dataset to.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatasetFromUrl resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Dataset.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to upload the Dataset from.\n"
                    },
                    "useCaseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Use Case IDs to add the Dataset to.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/deployment:Deployment": {
            "description": "Deployment\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleCustomModel = new datarobot.CustomModel(\"exampleCustomModel\", {\n    description: \"Description for the example custom model\",\n    targetType: \"Binary\",\n    targetName: \"my_label\",\n    baseEnvironmentId: \"65f9b27eab986d30d4c64268\",\n    files: [\"example.py\"],\n});\nconst exampleRegisteredModel = new datarobot.RegisteredModel(\"exampleRegisteredModel\", {\n    customModelVersionId: exampleCustomModel.versionId,\n    description: \"Description for the example registered model\",\n});\nconst examplePredictionEnvironment = new datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", {\n    description: \"Description for the example prediction environment\",\n    platform: \"datarobotServerless\",\n});\nconst exampleDeployment = new datarobot.Deployment(\"exampleDeployment\", {\n    label: \"An example deployment\",\n    predictionEnvironmentId: examplePredictionEnvironment.id,\n    registeredModelVersionId: exampleRegisteredModel.versionId,\n});\n// Optional settings\n// challenger_models_settings = {}\n// challenger_replay_settings = {}\n// segment_analysis_settings  = {}\n// bias_and_fairness_settings = {}\n// predictions_by_forecast_date_settings = {}\n// drift_tracking_settings = {}\n// association_id_settings = {}\n// predictions_data_collection_settings = {}\n// prediction_warning_settings = {}\n// prediction_interval_settings = {}\n// predictions_settings = {}\n// health_settings = {}\nexport const datarobotDeploymentId = exampleDeployment.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_custom_model = datarobot.CustomModel(\"exampleCustomModel\",\n    description=\"Description for the example custom model\",\n    target_type=\"Binary\",\n    target_name=\"my_label\",\n    base_environment_id=\"65f9b27eab986d30d4c64268\",\n    files=[\"example.py\"])\nexample_registered_model = datarobot.RegisteredModel(\"exampleRegisteredModel\",\n    custom_model_version_id=example_custom_model.version_id,\n    description=\"Description for the example registered model\")\nexample_prediction_environment = datarobot.PredictionEnvironment(\"examplePredictionEnvironment\",\n    description=\"Description for the example prediction environment\",\n    platform=\"datarobotServerless\")\nexample_deployment = datarobot.Deployment(\"exampleDeployment\",\n    label=\"An example deployment\",\n    prediction_environment_id=example_prediction_environment.id,\n    registered_model_version_id=example_registered_model.version_id)\n# Optional settings\n# challenger_models_settings = {}\n# challenger_replay_settings = {}\n# segment_analysis_settings  = {}\n# bias_and_fairness_settings = {}\n# predictions_by_forecast_date_settings = {}\n# drift_tracking_settings = {}\n# association_id_settings = {}\n# predictions_data_collection_settings = {}\n# prediction_warning_settings = {}\n# prediction_interval_settings = {}\n# predictions_settings = {}\n# health_settings = {}\npulumi.export(\"datarobotDeploymentId\", example_deployment.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomModel = new Datarobot.CustomModel(\"exampleCustomModel\", new()\n    {\n        Description = \"Description for the example custom model\",\n        TargetType = \"Binary\",\n        TargetName = \"my_label\",\n        BaseEnvironmentId = \"65f9b27eab986d30d4c64268\",\n        Files = new[]\n        {\n            \"example.py\",\n        },\n    });\n\n    var exampleRegisteredModel = new Datarobot.RegisteredModel(\"exampleRegisteredModel\", new()\n    {\n        CustomModelVersionId = exampleCustomModel.VersionId,\n        Description = \"Description for the example registered model\",\n    });\n\n    var examplePredictionEnvironment = new Datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", new()\n    {\n        Description = \"Description for the example prediction environment\",\n        Platform = \"datarobotServerless\",\n    });\n\n    var exampleDeployment = new Datarobot.Deployment(\"exampleDeployment\", new()\n    {\n        Label = \"An example deployment\",\n        PredictionEnvironmentId = examplePredictionEnvironment.Id,\n        RegisteredModelVersionId = exampleRegisteredModel.VersionId,\n    });\n\n    // Optional settings\n    // challenger_models_settings = {}\n    // challenger_replay_settings = {}\n    // segment_analysis_settings  = {}\n    // bias_and_fairness_settings = {}\n    // predictions_by_forecast_date_settings = {}\n    // drift_tracking_settings = {}\n    // association_id_settings = {}\n    // predictions_data_collection_settings = {}\n    // prediction_warning_settings = {}\n    // prediction_interval_settings = {}\n    // predictions_settings = {}\n    // health_settings = {}\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"datarobotDeploymentId\"] = exampleDeployment.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomModel, err := datarobot.NewCustomModel(ctx, \"exampleCustomModel\", \u0026datarobot.CustomModelArgs{\n\t\t\tDescription:       pulumi.String(\"Description for the example custom model\"),\n\t\t\tTargetType:        pulumi.String(\"Binary\"),\n\t\t\tTargetName:        pulumi.String(\"my_label\"),\n\t\t\tBaseEnvironmentId: pulumi.String(\"65f9b27eab986d30d4c64268\"),\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t\"example.py\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRegisteredModel, err := datarobot.NewRegisteredModel(ctx, \"exampleRegisteredModel\", \u0026datarobot.RegisteredModelArgs{\n\t\t\tCustomModelVersionId: exampleCustomModel.VersionId,\n\t\t\tDescription:          pulumi.String(\"Description for the example registered model\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePredictionEnvironment, err := datarobot.NewPredictionEnvironment(ctx, \"examplePredictionEnvironment\", \u0026datarobot.PredictionEnvironmentArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example prediction environment\"),\n\t\t\tPlatform:    pulumi.String(\"datarobotServerless\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDeployment, err := datarobot.NewDeployment(ctx, \"exampleDeployment\", \u0026datarobot.DeploymentArgs{\n\t\t\tLabel:                    pulumi.String(\"An example deployment\"),\n\t\t\tPredictionEnvironmentId:  examplePredictionEnvironment.ID(),\n\t\t\tRegisteredModelVersionId: exampleRegisteredModel.VersionId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotDeploymentId\", exampleDeployment.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.CustomModel;\nimport com.pulumi.datarobot.CustomModelArgs;\nimport com.pulumi.datarobot.RegisteredModel;\nimport com.pulumi.datarobot.RegisteredModelArgs;\nimport com.pulumi.datarobot.PredictionEnvironment;\nimport com.pulumi.datarobot.PredictionEnvironmentArgs;\nimport com.pulumi.datarobot.Deployment;\nimport com.pulumi.datarobot.DeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCustomModel = new CustomModel(\"exampleCustomModel\", CustomModelArgs.builder()\n            .description(\"Description for the example custom model\")\n            .targetType(\"Binary\")\n            .targetName(\"my_label\")\n            .baseEnvironmentId(\"65f9b27eab986d30d4c64268\")\n            .files(\"example.py\")\n            .build());\n\n        var exampleRegisteredModel = new RegisteredModel(\"exampleRegisteredModel\", RegisteredModelArgs.builder()\n            .customModelVersionId(exampleCustomModel.versionId())\n            .description(\"Description for the example registered model\")\n            .build());\n\n        var examplePredictionEnvironment = new PredictionEnvironment(\"examplePredictionEnvironment\", PredictionEnvironmentArgs.builder()\n            .description(\"Description for the example prediction environment\")\n            .platform(\"datarobotServerless\")\n            .build());\n\n        var exampleDeployment = new Deployment(\"exampleDeployment\", DeploymentArgs.builder()\n            .label(\"An example deployment\")\n            .predictionEnvironmentId(examplePredictionEnvironment.id())\n            .registeredModelVersionId(exampleRegisteredModel.versionId())\n            .build());\n\n        // Optional settings\n        // challenger_models_settings = {}\n        // challenger_replay_settings = {}\n        // segment_analysis_settings  = {}\n        // bias_and_fairness_settings = {}\n        // predictions_by_forecast_date_settings = {}\n        // drift_tracking_settings = {}\n        // association_id_settings = {}\n        // predictions_data_collection_settings = {}\n        // prediction_warning_settings = {}\n        // prediction_interval_settings = {}\n        // predictions_settings = {}\n        // health_settings = {}\n        ctx.export(\"datarobotDeploymentId\", exampleDeployment.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomModel:\n    type: datarobot:CustomModel\n    properties:\n      description: Description for the example custom model\n      targetType: Binary\n      targetName: my_label\n      baseEnvironmentId: 65f9b27eab986d30d4c64268\n      files:\n        - example.py\n  exampleRegisteredModel:\n    type: datarobot:RegisteredModel\n    properties:\n      customModelVersionId: ${exampleCustomModel.versionId}\n      description: Description for the example registered model\n  examplePredictionEnvironment:\n    type: datarobot:PredictionEnvironment\n    properties:\n      description: Description for the example prediction environment\n      platform: datarobotServerless\n  exampleDeployment:\n    type: datarobot:Deployment\n    properties:\n      label: An example deployment\n      predictionEnvironmentId: ${examplePredictionEnvironment.id}\n      registeredModelVersionId: ${exampleRegisteredModel.versionId}\noutputs:\n  datarobotDeploymentId: ${exampleDeployment.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "associationIdSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentAssociationIdSettings:DeploymentAssociationIdSettings",
                    "description": "Association ID settings for this Deployment.\n"
                },
                "biasAndFairnessSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentBiasAndFairnessSettings:DeploymentBiasAndFairnessSettings",
                    "description": "Bias and fairness settings for the Deployment.\n"
                },
                "challengerModelsSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentChallengerModelsSettings:DeploymentChallengerModelsSettings",
                    "description": "The challenger models settings for the Deployment.\n"
                },
                "challengerReplaySettings": {
                    "$ref": "#/types/datarobot:index/DeploymentChallengerReplaySettings:DeploymentChallengerReplaySettings",
                    "description": "The challenger replay settings for the Deployment.\n"
                },
                "driftTrackingSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentDriftTrackingSettings:DeploymentDriftTrackingSettings",
                    "description": "The drift tracking settings for the Deployment.\n"
                },
                "healthSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentHealthSettings:DeploymentHealthSettings",
                    "description": "The health settings for this Deployment.\n"
                },
                "importance": {
                    "type": "string",
                    "description": "The importance of the Deployment.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Deployment.\n"
                },
                "predictionEnvironmentId": {
                    "type": "string",
                    "description": "The ID of the predication environment for this Deployment.\n"
                },
                "predictionIntervalsSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionIntervalsSettings:DeploymentPredictionIntervalsSettings",
                    "description": "The prediction intervals settings for this Deployment.\n"
                },
                "predictionWarningSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionWarningSettings:DeploymentPredictionWarningSettings",
                    "description": "The prediction warning settings for the Deployment.\n"
                },
                "predictionsByForecastDateSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionsByForecastDateSettings:DeploymentPredictionsByForecastDateSettings",
                    "description": "The predictions by forecase date settings for the Deployment.\n"
                },
                "predictionsDataCollectionSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionsDataCollectionSettings:DeploymentPredictionsDataCollectionSettings",
                    "description": "The predictions data collection settings for the Deployment.\n"
                },
                "predictionsSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionsSettings:DeploymentPredictionsSettings",
                    "description": "Settings for the predictions.\n"
                },
                "registeredModelVersionId": {
                    "type": "string",
                    "description": "The ID of the registered model version for this Deployment.\n"
                },
                "segmentAnalysisSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentSegmentAnalysisSettings:DeploymentSegmentAnalysisSettings",
                    "description": "The segment analysis settings for the Deployment.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Deployment to.\n"
                }
            },
            "required": [
                "importance",
                "label",
                "predictionEnvironmentId",
                "registeredModelVersionId"
            ],
            "inputProperties": {
                "associationIdSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentAssociationIdSettings:DeploymentAssociationIdSettings",
                    "description": "Association ID settings for this Deployment.\n"
                },
                "biasAndFairnessSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentBiasAndFairnessSettings:DeploymentBiasAndFairnessSettings",
                    "description": "Bias and fairness settings for the Deployment.\n"
                },
                "challengerModelsSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentChallengerModelsSettings:DeploymentChallengerModelsSettings",
                    "description": "The challenger models settings for the Deployment.\n"
                },
                "challengerReplaySettings": {
                    "$ref": "#/types/datarobot:index/DeploymentChallengerReplaySettings:DeploymentChallengerReplaySettings",
                    "description": "The challenger replay settings for the Deployment.\n"
                },
                "driftTrackingSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentDriftTrackingSettings:DeploymentDriftTrackingSettings",
                    "description": "The drift tracking settings for the Deployment.\n"
                },
                "healthSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentHealthSettings:DeploymentHealthSettings",
                    "description": "The health settings for this Deployment.\n"
                },
                "importance": {
                    "type": "string",
                    "description": "The importance of the Deployment.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Deployment.\n"
                },
                "predictionEnvironmentId": {
                    "type": "string",
                    "description": "The ID of the predication environment for this Deployment.\n"
                },
                "predictionIntervalsSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionIntervalsSettings:DeploymentPredictionIntervalsSettings",
                    "description": "The prediction intervals settings for this Deployment.\n"
                },
                "predictionWarningSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionWarningSettings:DeploymentPredictionWarningSettings",
                    "description": "The prediction warning settings for the Deployment.\n"
                },
                "predictionsByForecastDateSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionsByForecastDateSettings:DeploymentPredictionsByForecastDateSettings",
                    "description": "The predictions by forecase date settings for the Deployment.\n"
                },
                "predictionsDataCollectionSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionsDataCollectionSettings:DeploymentPredictionsDataCollectionSettings",
                    "description": "The predictions data collection settings for the Deployment.\n"
                },
                "predictionsSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentPredictionsSettings:DeploymentPredictionsSettings",
                    "description": "Settings for the predictions.\n"
                },
                "registeredModelVersionId": {
                    "type": "string",
                    "description": "The ID of the registered model version for this Deployment.\n"
                },
                "segmentAnalysisSettings": {
                    "$ref": "#/types/datarobot:index/DeploymentSegmentAnalysisSettings:DeploymentSegmentAnalysisSettings",
                    "description": "The segment analysis settings for the Deployment.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Deployment to.\n"
                }
            },
            "requiredInputs": [
                "label",
                "predictionEnvironmentId",
                "registeredModelVersionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Deployment resources.\n",
                "properties": {
                    "associationIdSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentAssociationIdSettings:DeploymentAssociationIdSettings",
                        "description": "Association ID settings for this Deployment.\n"
                    },
                    "biasAndFairnessSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentBiasAndFairnessSettings:DeploymentBiasAndFairnessSettings",
                        "description": "Bias and fairness settings for the Deployment.\n"
                    },
                    "challengerModelsSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentChallengerModelsSettings:DeploymentChallengerModelsSettings",
                        "description": "The challenger models settings for the Deployment.\n"
                    },
                    "challengerReplaySettings": {
                        "$ref": "#/types/datarobot:index/DeploymentChallengerReplaySettings:DeploymentChallengerReplaySettings",
                        "description": "The challenger replay settings for the Deployment.\n"
                    },
                    "driftTrackingSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentDriftTrackingSettings:DeploymentDriftTrackingSettings",
                        "description": "The drift tracking settings for the Deployment.\n"
                    },
                    "healthSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentHealthSettings:DeploymentHealthSettings",
                        "description": "The health settings for this Deployment.\n"
                    },
                    "importance": {
                        "type": "string",
                        "description": "The importance of the Deployment.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Deployment.\n"
                    },
                    "predictionEnvironmentId": {
                        "type": "string",
                        "description": "The ID of the predication environment for this Deployment.\n"
                    },
                    "predictionIntervalsSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentPredictionIntervalsSettings:DeploymentPredictionIntervalsSettings",
                        "description": "The prediction intervals settings for this Deployment.\n"
                    },
                    "predictionWarningSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentPredictionWarningSettings:DeploymentPredictionWarningSettings",
                        "description": "The prediction warning settings for the Deployment.\n"
                    },
                    "predictionsByForecastDateSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentPredictionsByForecastDateSettings:DeploymentPredictionsByForecastDateSettings",
                        "description": "The predictions by forecase date settings for the Deployment.\n"
                    },
                    "predictionsDataCollectionSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentPredictionsDataCollectionSettings:DeploymentPredictionsDataCollectionSettings",
                        "description": "The predictions data collection settings for the Deployment.\n"
                    },
                    "predictionsSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentPredictionsSettings:DeploymentPredictionsSettings",
                        "description": "Settings for the predictions.\n"
                    },
                    "registeredModelVersionId": {
                        "type": "string",
                        "description": "The ID of the registered model version for this Deployment.\n"
                    },
                    "segmentAnalysisSettings": {
                        "$ref": "#/types/datarobot:index/DeploymentSegmentAnalysisSettings:DeploymentSegmentAnalysisSettings",
                        "description": "The segment analysis settings for the Deployment.\n"
                    },
                    "useCaseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Use Case IDs to add the Deployment to.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/googleCloudCredential:GoogleCloudCredential": {
            "description": "Api Token Credential\n",
            "properties": {
                "gcpKey": {
                    "type": "string",
                    "description": "The GCP key in JSON format.\n",
                    "secret": true
                },
                "gcpKeyFile": {
                    "type": "string",
                    "description": "The file that has the GCP key. Cannot be used with `gcp_key`.\n"
                },
                "gcpKeyFileHash": {
                    "type": "string",
                    "description": "The hash of the GCP key file contents.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Google Cloud Credential.\n"
                }
            },
            "required": [
                "gcpKeyFileHash",
                "name"
            ],
            "inputProperties": {
                "gcpKey": {
                    "type": "string",
                    "description": "The GCP key in JSON format.\n",
                    "secret": true
                },
                "gcpKeyFile": {
                    "type": "string",
                    "description": "The file that has the GCP key. Cannot be used with `gcp_key`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Google Cloud Credential.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GoogleCloudCredential resources.\n",
                "properties": {
                    "gcpKey": {
                        "type": "string",
                        "description": "The GCP key in JSON format.\n",
                        "secret": true
                    },
                    "gcpKeyFile": {
                        "type": "string",
                        "description": "The file that has the GCP key. Cannot be used with `gcp_key`.\n"
                    },
                    "gcpKeyFileHash": {
                        "type": "string",
                        "description": "The hash of the GCP key file contents.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Google Cloud Credential.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/llmBlueprint:LlmBlueprint": {
            "description": "LLMBlueprint\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleUseCase = new datarobot.UseCase(\"exampleUseCase\", {});\nconst examplePlayground = new datarobot.Playground(\"examplePlayground\", {\n    description: \"Description for the example playground\",\n    useCaseId: exampleUseCase.id,\n});\nconst exampleLlmBlueprint = new datarobot.LlmBlueprint(\"exampleLlmBlueprint\", {\n    description: \"Description for the example LLM blueprint\",\n    playgroundId: examplePlayground.id,\n    llmId: \"azure-openai-gpt-3.5-turbo\",\n    promptType: \"ONE_TIME_PROMPT\",\n});\n// Optional\n// llm_settings {\n//   max_completion_length = 1000\n//   temperature           = 0.5\n//   top_p                 = 0.9\n//   system_prompt         = \"My Prompt:\"\n// }\n// vector_database_settings = {\n//   max_documents_retrieved_per_prompt = 5\n//   max_tokens = 1000\n// }\nexport const exampleId = exampleLlmBlueprint.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_use_case = datarobot.UseCase(\"exampleUseCase\")\nexample_playground = datarobot.Playground(\"examplePlayground\",\n    description=\"Description for the example playground\",\n    use_case_id=example_use_case.id)\nexample_llm_blueprint = datarobot.LlmBlueprint(\"exampleLlmBlueprint\",\n    description=\"Description for the example LLM blueprint\",\n    playground_id=example_playground.id,\n    llm_id=\"azure-openai-gpt-3.5-turbo\",\n    prompt_type=\"ONE_TIME_PROMPT\")\n# Optional\n# llm_settings {\n#   max_completion_length = 1000\n#   temperature           = 0.5\n#   top_p                 = 0.9\n#   system_prompt         = \"My Prompt:\"\n# }\n# vector_database_settings = {\n#   max_documents_retrieved_per_prompt = 5\n#   max_tokens = 1000\n# }\npulumi.export(\"exampleId\", example_llm_blueprint.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUseCase = new Datarobot.UseCase(\"exampleUseCase\");\n\n    var examplePlayground = new Datarobot.Playground(\"examplePlayground\", new()\n    {\n        Description = \"Description for the example playground\",\n        UseCaseId = exampleUseCase.Id,\n    });\n\n    var exampleLlmBlueprint = new Datarobot.LlmBlueprint(\"exampleLlmBlueprint\", new()\n    {\n        Description = \"Description for the example LLM blueprint\",\n        PlaygroundId = examplePlayground.Id,\n        LlmId = \"azure-openai-gpt-3.5-turbo\",\n        PromptType = \"ONE_TIME_PROMPT\",\n    });\n\n    // Optional\n    // llm_settings {\n    //   max_completion_length = 1000\n    //   temperature           = 0.5\n    //   top_p                 = 0.9\n    //   system_prompt         = \"My Prompt:\"\n    // }\n    // vector_database_settings = {\n    //   max_documents_retrieved_per_prompt = 5\n    //   max_tokens = 1000\n    // }\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleId\"] = exampleLlmBlueprint.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUseCase, err := datarobot.NewUseCase(ctx, \"exampleUseCase\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePlayground, err := datarobot.NewPlayground(ctx, \"examplePlayground\", \u0026datarobot.PlaygroundArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example playground\"),\n\t\t\tUseCaseId:   exampleUseCase.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleLlmBlueprint, err := datarobot.NewLlmBlueprint(ctx, \"exampleLlmBlueprint\", \u0026datarobot.LlmBlueprintArgs{\n\t\t\tDescription:  pulumi.String(\"Description for the example LLM blueprint\"),\n\t\t\tPlaygroundId: examplePlayground.ID(),\n\t\t\tLlmId:        pulumi.String(\"azure-openai-gpt-3.5-turbo\"),\n\t\t\tPromptType:   pulumi.String(\"ONE_TIME_PROMPT\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", exampleLlmBlueprint.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.UseCase;\nimport com.pulumi.datarobot.Playground;\nimport com.pulumi.datarobot.PlaygroundArgs;\nimport com.pulumi.datarobot.LlmBlueprint;\nimport com.pulumi.datarobot.LlmBlueprintArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUseCase = new UseCase(\"exampleUseCase\");\n\n        var examplePlayground = new Playground(\"examplePlayground\", PlaygroundArgs.builder()\n            .description(\"Description for the example playground\")\n            .useCaseId(exampleUseCase.id())\n            .build());\n\n        var exampleLlmBlueprint = new LlmBlueprint(\"exampleLlmBlueprint\", LlmBlueprintArgs.builder()\n            .description(\"Description for the example LLM blueprint\")\n            .playgroundId(examplePlayground.id())\n            .llmId(\"azure-openai-gpt-3.5-turbo\")\n            .promptType(\"ONE_TIME_PROMPT\")\n            .build());\n\n        // Optional\n        // llm_settings {\n        //   max_completion_length = 1000\n        //   temperature           = 0.5\n        //   top_p                 = 0.9\n        //   system_prompt         = \"My Prompt:\"\n        // }\n        // vector_database_settings = {\n        //   max_documents_retrieved_per_prompt = 5\n        //   max_tokens = 1000\n        // }\n        ctx.export(\"exampleId\", exampleLlmBlueprint.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleUseCase:\n    type: datarobot:UseCase\n  examplePlayground:\n    type: datarobot:Playground\n    properties:\n      description: Description for the example playground\n      useCaseId: ${exampleUseCase.id}\n  exampleLlmBlueprint:\n    type: datarobot:LlmBlueprint\n    properties:\n      description: Description for the example LLM blueprint\n      playgroundId: ${examplePlayground.id}\n      llmId: azure-openai-gpt-3.5-turbo\n      promptType: ONE_TIME_PROMPT\noutputs:\n  exampleId: ${exampleLlmBlueprint.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the LLM Blueprint.\n"
                },
                "llmId": {
                    "type": "string",
                    "description": "The id of the LLM for the LLM Blueprint.\n"
                },
                "llmSettings": {
                    "$ref": "#/types/datarobot:index/LlmBlueprintLlmSettings:LlmBlueprintLlmSettings",
                    "description": "The LLM settings for the LLM Blueprint.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the LLM Blueprint.\n"
                },
                "playgroundId": {
                    "type": "string",
                    "description": "The id of the Playground for the LLM Blueprint.\n"
                },
                "promptType": {
                    "type": "string",
                    "description": "The prompt type for the LLM Blueprint.\n"
                },
                "vectorDatabaseId": {
                    "type": "string",
                    "description": "The id of the Vector Database for the LLM Blueprint.\n"
                },
                "vectorDatabaseSettings": {
                    "$ref": "#/types/datarobot:index/LlmBlueprintVectorDatabaseSettings:LlmBlueprintVectorDatabaseSettings",
                    "description": "The Vector Database settings for the LLM Blueprint.\n"
                }
            },
            "required": [
                "llmId",
                "name",
                "playgroundId",
                "promptType"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the LLM Blueprint.\n"
                },
                "llmId": {
                    "type": "string",
                    "description": "The id of the LLM for the LLM Blueprint.\n"
                },
                "llmSettings": {
                    "$ref": "#/types/datarobot:index/LlmBlueprintLlmSettings:LlmBlueprintLlmSettings",
                    "description": "The LLM settings for the LLM Blueprint.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the LLM Blueprint.\n"
                },
                "playgroundId": {
                    "type": "string",
                    "description": "The id of the Playground for the LLM Blueprint.\n"
                },
                "promptType": {
                    "type": "string",
                    "description": "The prompt type for the LLM Blueprint.\n"
                },
                "vectorDatabaseId": {
                    "type": "string",
                    "description": "The id of the Vector Database for the LLM Blueprint.\n"
                },
                "vectorDatabaseSettings": {
                    "$ref": "#/types/datarobot:index/LlmBlueprintVectorDatabaseSettings:LlmBlueprintVectorDatabaseSettings",
                    "description": "The Vector Database settings for the LLM Blueprint.\n"
                }
            },
            "requiredInputs": [
                "llmId",
                "playgroundId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LlmBlueprint resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the LLM Blueprint.\n"
                    },
                    "llmId": {
                        "type": "string",
                        "description": "The id of the LLM for the LLM Blueprint.\n"
                    },
                    "llmSettings": {
                        "$ref": "#/types/datarobot:index/LlmBlueprintLlmSettings:LlmBlueprintLlmSettings",
                        "description": "The LLM settings for the LLM Blueprint.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the LLM Blueprint.\n"
                    },
                    "playgroundId": {
                        "type": "string",
                        "description": "The id of the Playground for the LLM Blueprint.\n"
                    },
                    "promptType": {
                        "type": "string",
                        "description": "The prompt type for the LLM Blueprint.\n"
                    },
                    "vectorDatabaseId": {
                        "type": "string",
                        "description": "The id of the Vector Database for the LLM Blueprint.\n"
                    },
                    "vectorDatabaseSettings": {
                        "$ref": "#/types/datarobot:index/LlmBlueprintVectorDatabaseSettings:LlmBlueprintVectorDatabaseSettings",
                        "description": "The Vector Database settings for the LLM Blueprint.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/playground:Playground": {
            "description": "Playground\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleUseCase = new datarobot.UseCase(\"exampleUseCase\", {});\nconst examplePlayground = new datarobot.Playground(\"examplePlayground\", {useCaseId: exampleUseCase.id});\nexport const exampleId = examplePlayground.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_use_case = datarobot.UseCase(\"exampleUseCase\")\nexample_playground = datarobot.Playground(\"examplePlayground\", use_case_id=example_use_case.id)\npulumi.export(\"exampleId\", example_playground.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUseCase = new Datarobot.UseCase(\"exampleUseCase\");\n\n    var examplePlayground = new Datarobot.Playground(\"examplePlayground\", new()\n    {\n        UseCaseId = exampleUseCase.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleId\"] = examplePlayground.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUseCase, err := datarobot.NewUseCase(ctx, \"exampleUseCase\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePlayground, err := datarobot.NewPlayground(ctx, \"examplePlayground\", \u0026datarobot.PlaygroundArgs{\n\t\t\tUseCaseId: exampleUseCase.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", examplePlayground.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.UseCase;\nimport com.pulumi.datarobot.Playground;\nimport com.pulumi.datarobot.PlaygroundArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUseCase = new UseCase(\"exampleUseCase\");\n\n        var examplePlayground = new Playground(\"examplePlayground\", PlaygroundArgs.builder()\n            .useCaseId(exampleUseCase.id())\n            .build());\n\n        ctx.export(\"exampleId\", examplePlayground.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleUseCase:\n    type: datarobot:UseCase\n  examplePlayground:\n    type: datarobot:Playground\n    properties:\n      useCaseId: ${exampleUseCase.id}\noutputs:\n  exampleId: ${examplePlayground.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Playground.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Playground.\n"
                },
                "useCaseId": {
                    "type": "string",
                    "description": "The id of the Playground.\n"
                }
            },
            "required": [
                "name",
                "useCaseId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Playground.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Playground.\n"
                },
                "useCaseId": {
                    "type": "string",
                    "description": "The id of the Playground.\n"
                }
            },
            "requiredInputs": [
                "useCaseId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Playground resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Playground.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Playground.\n"
                    },
                    "useCaseId": {
                        "type": "string",
                        "description": "The id of the Playground.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/predictionEnvironment:PredictionEnvironment": {
            "description": "prediction environment\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.PredictionEnvironment(\"example\", {\n    batchJobsMaxConcurrent: 20,\n    batchJobsPriority: \"high\",\n    credentialId: \"\u003ccredential_id\u003e\",\n    datastoreId: \"\u003cdatastore_id\u003e\",\n    description: \"Description for the example prediction environment\",\n    managedBy: \"selfManaged\",\n    platform: \"datarobotServerless\",\n    supportedModelFormats: [\n        \"datarobot\",\n        \"customModel\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.PredictionEnvironment(\"example\",\n    batch_jobs_max_concurrent=20,\n    batch_jobs_priority=\"high\",\n    credential_id=\"\u003ccredential_id\u003e\",\n    datastore_id=\"\u003cdatastore_id\u003e\",\n    description=\"Description for the example prediction environment\",\n    managed_by=\"selfManaged\",\n    platform=\"datarobotServerless\",\n    supported_model_formats=[\n        \"datarobot\",\n        \"customModel\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Datarobot.PredictionEnvironment(\"example\", new()\n    {\n        BatchJobsMaxConcurrent = 20,\n        BatchJobsPriority = \"high\",\n        CredentialId = \"\u003ccredential_id\u003e\",\n        DatastoreId = \"\u003cdatastore_id\u003e\",\n        Description = \"Description for the example prediction environment\",\n        ManagedBy = \"selfManaged\",\n        Platform = \"datarobotServerless\",\n        SupportedModelFormats = new[]\n        {\n            \"datarobot\",\n            \"customModel\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewPredictionEnvironment(ctx, \"example\", \u0026datarobot.PredictionEnvironmentArgs{\n\t\t\tBatchJobsMaxConcurrent: pulumi.Int(20),\n\t\t\tBatchJobsPriority:      pulumi.String(\"high\"),\n\t\t\tCredentialId:           pulumi.String(\"\u003ccredential_id\u003e\"),\n\t\t\tDatastoreId:            pulumi.String(\"\u003cdatastore_id\u003e\"),\n\t\t\tDescription:            pulumi.String(\"Description for the example prediction environment\"),\n\t\t\tManagedBy:              pulumi.String(\"selfManaged\"),\n\t\t\tPlatform:               pulumi.String(\"datarobotServerless\"),\n\t\t\tSupportedModelFormats: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"datarobot\"),\n\t\t\t\tpulumi.String(\"customModel\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.PredictionEnvironment;\nimport com.pulumi.datarobot.PredictionEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new PredictionEnvironment(\"example\", PredictionEnvironmentArgs.builder()\n            .batchJobsMaxConcurrent(20)\n            .batchJobsPriority(\"high\")\n            .credentialId(\"\u003ccredential_id\u003e\")\n            .datastoreId(\"\u003cdatastore_id\u003e\")\n            .description(\"Description for the example prediction environment\")\n            .managedBy(\"selfManaged\")\n            .platform(\"datarobotServerless\")\n            .supportedModelFormats(            \n                \"datarobot\",\n                \"customModel\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:PredictionEnvironment\n    properties:\n      # Optional\n      batchJobsMaxConcurrent: 20\n      batchJobsPriority: high\n      credentialId: \u003ccredential_id\u003e\n      datastoreId: \u003cdatastore_id\u003e\n      description: Description for the example prediction environment\n      managedBy: selfManaged\n      platform: datarobotServerless\n      supportedModelFormats:\n        - datarobot\n        - customModel\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "batchJobsMaxConcurrent": {
                    "type": "integer",
                    "description": "The maximum number of concurrent batch prediction jobs.\n"
                },
                "batchJobsPriority": {
                    "type": "string",
                    "description": "The importance of batch jobs.\n"
                },
                "credentialId": {
                    "type": "string",
                    "description": "The ID of the credential associated with the data connection. Only applicable for external prediction environments managed by DataRobot.\n"
                },
                "datastoreId": {
                    "type": "string",
                    "description": "The ID of the data store connection configuration. Only applicable for external prediction environments managed by DataRobot.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Prediction Environment.\n"
                },
                "managedBy": {
                    "type": "string",
                    "description": "Determines if the prediction environment should be managed by the management agent, datarobot, or self-managed. Self-managed by default.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Prediction Environment.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "The platform for the Prediction Environment.\n"
                },
                "supportedModelFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of supported model formats.\n"
                }
            },
            "required": [
                "managedBy",
                "name",
                "platform"
            ],
            "inputProperties": {
                "batchJobsMaxConcurrent": {
                    "type": "integer",
                    "description": "The maximum number of concurrent batch prediction jobs.\n"
                },
                "batchJobsPriority": {
                    "type": "string",
                    "description": "The importance of batch jobs.\n"
                },
                "credentialId": {
                    "type": "string",
                    "description": "The ID of the credential associated with the data connection. Only applicable for external prediction environments managed by DataRobot.\n"
                },
                "datastoreId": {
                    "type": "string",
                    "description": "The ID of the data store connection configuration. Only applicable for external prediction environments managed by DataRobot.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Prediction Environment.\n"
                },
                "managedBy": {
                    "type": "string",
                    "description": "Determines if the prediction environment should be managed by the management agent, datarobot, or self-managed. Self-managed by default.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Prediction Environment.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "The platform for the Prediction Environment.\n"
                },
                "supportedModelFormats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of supported model formats.\n"
                }
            },
            "requiredInputs": [
                "platform"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PredictionEnvironment resources.\n",
                "properties": {
                    "batchJobsMaxConcurrent": {
                        "type": "integer",
                        "description": "The maximum number of concurrent batch prediction jobs.\n"
                    },
                    "batchJobsPriority": {
                        "type": "string",
                        "description": "The importance of batch jobs.\n"
                    },
                    "credentialId": {
                        "type": "string",
                        "description": "The ID of the credential associated with the data connection. Only applicable for external prediction environments managed by DataRobot.\n"
                    },
                    "datastoreId": {
                        "type": "string",
                        "description": "The ID of the data store connection configuration. Only applicable for external prediction environments managed by DataRobot.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Prediction Environment.\n"
                    },
                    "managedBy": {
                        "type": "string",
                        "description": "Determines if the prediction environment should be managed by the management agent, datarobot, or self-managed. Self-managed by default.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Prediction Environment.\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "The platform for the Prediction Environment.\n"
                    },
                    "supportedModelFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of supported model formats.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/qaApplication:QaApplication": {
            "description": "Q\u0026A Application\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleCustomModel = new datarobot.CustomModel(\"exampleCustomModel\", {\n    description: \"Description for the example custom model\",\n    targetType: \"Binary\",\n    targetName: \"my_label\",\n    baseEnvironmentId: \"65f9b27eab986d30d4c64268\",\n    files: [\"example.py\"],\n});\nconst exampleRegisteredModel = new datarobot.RegisteredModel(\"exampleRegisteredModel\", {\n    customModelVersionId: exampleCustomModel.versionId,\n    description: \"Description for the example registered model\",\n});\nconst examplePredictionEnvironment = new datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", {\n    description: \"Description for the example prediction environment\",\n    platform: \"datarobotServerless\",\n});\nconst exampleDeployment = new datarobot.Deployment(\"exampleDeployment\", {\n    label: \"An example deployment\",\n    predictionEnvironmentId: examplePredictionEnvironment.id,\n    registeredModelVersionId: exampleRegisteredModel.versionId,\n});\nconst exampleQaApplication = new datarobot.QaApplication(\"exampleQaApplication\", {\n    deploymentId: exampleDeployment.id,\n    externalAccessEnabled: true,\n    externalAccessRecipients: [\"recipient@example.com\"],\n});\nexport const datarobotQaApplicationId = exampleQaApplication.id;\nexport const datarobotQaApplicationSourceId = exampleQaApplication.sourceId;\nexport const datarobotQaApplicationSourceVersionId = exampleQaApplication.sourceVersionId;\nexport const datarobotQaApplicationUrl = exampleQaApplication.applicationUrl;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_custom_model = datarobot.CustomModel(\"exampleCustomModel\",\n    description=\"Description for the example custom model\",\n    target_type=\"Binary\",\n    target_name=\"my_label\",\n    base_environment_id=\"65f9b27eab986d30d4c64268\",\n    files=[\"example.py\"])\nexample_registered_model = datarobot.RegisteredModel(\"exampleRegisteredModel\",\n    custom_model_version_id=example_custom_model.version_id,\n    description=\"Description for the example registered model\")\nexample_prediction_environment = datarobot.PredictionEnvironment(\"examplePredictionEnvironment\",\n    description=\"Description for the example prediction environment\",\n    platform=\"datarobotServerless\")\nexample_deployment = datarobot.Deployment(\"exampleDeployment\",\n    label=\"An example deployment\",\n    prediction_environment_id=example_prediction_environment.id,\n    registered_model_version_id=example_registered_model.version_id)\nexample_qa_application = datarobot.QaApplication(\"exampleQaApplication\",\n    deployment_id=example_deployment.id,\n    external_access_enabled=True,\n    external_access_recipients=[\"recipient@example.com\"])\npulumi.export(\"datarobotQaApplicationId\", example_qa_application.id)\npulumi.export(\"datarobotQaApplicationSourceId\", example_qa_application.source_id)\npulumi.export(\"datarobotQaApplicationSourceVersionId\", example_qa_application.source_version_id)\npulumi.export(\"datarobotQaApplicationUrl\", example_qa_application.application_url)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomModel = new Datarobot.CustomModel(\"exampleCustomModel\", new()\n    {\n        Description = \"Description for the example custom model\",\n        TargetType = \"Binary\",\n        TargetName = \"my_label\",\n        BaseEnvironmentId = \"65f9b27eab986d30d4c64268\",\n        Files = new[]\n        {\n            \"example.py\",\n        },\n    });\n\n    var exampleRegisteredModel = new Datarobot.RegisteredModel(\"exampleRegisteredModel\", new()\n    {\n        CustomModelVersionId = exampleCustomModel.VersionId,\n        Description = \"Description for the example registered model\",\n    });\n\n    var examplePredictionEnvironment = new Datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", new()\n    {\n        Description = \"Description for the example prediction environment\",\n        Platform = \"datarobotServerless\",\n    });\n\n    var exampleDeployment = new Datarobot.Deployment(\"exampleDeployment\", new()\n    {\n        Label = \"An example deployment\",\n        PredictionEnvironmentId = examplePredictionEnvironment.Id,\n        RegisteredModelVersionId = exampleRegisteredModel.VersionId,\n    });\n\n    var exampleQaApplication = new Datarobot.QaApplication(\"exampleQaApplication\", new()\n    {\n        DeploymentId = exampleDeployment.Id,\n        ExternalAccessEnabled = true,\n        ExternalAccessRecipients = new[]\n        {\n            \"recipient@example.com\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"datarobotQaApplicationId\"] = exampleQaApplication.Id,\n        [\"datarobotQaApplicationSourceId\"] = exampleQaApplication.SourceId,\n        [\"datarobotQaApplicationSourceVersionId\"] = exampleQaApplication.SourceVersionId,\n        [\"datarobotQaApplicationUrl\"] = exampleQaApplication.ApplicationUrl,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomModel, err := datarobot.NewCustomModel(ctx, \"exampleCustomModel\", \u0026datarobot.CustomModelArgs{\n\t\t\tDescription:       pulumi.String(\"Description for the example custom model\"),\n\t\t\tTargetType:        pulumi.String(\"Binary\"),\n\t\t\tTargetName:        pulumi.String(\"my_label\"),\n\t\t\tBaseEnvironmentId: pulumi.String(\"65f9b27eab986d30d4c64268\"),\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t\"example.py\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRegisteredModel, err := datarobot.NewRegisteredModel(ctx, \"exampleRegisteredModel\", \u0026datarobot.RegisteredModelArgs{\n\t\t\tCustomModelVersionId: exampleCustomModel.VersionId,\n\t\t\tDescription:          pulumi.String(\"Description for the example registered model\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePredictionEnvironment, err := datarobot.NewPredictionEnvironment(ctx, \"examplePredictionEnvironment\", \u0026datarobot.PredictionEnvironmentArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example prediction environment\"),\n\t\t\tPlatform:    pulumi.String(\"datarobotServerless\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDeployment, err := datarobot.NewDeployment(ctx, \"exampleDeployment\", \u0026datarobot.DeploymentArgs{\n\t\t\tLabel:                    pulumi.String(\"An example deployment\"),\n\t\t\tPredictionEnvironmentId:  examplePredictionEnvironment.ID(),\n\t\t\tRegisteredModelVersionId: exampleRegisteredModel.VersionId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQaApplication, err := datarobot.NewQaApplication(ctx, \"exampleQaApplication\", \u0026datarobot.QaApplicationArgs{\n\t\t\tDeploymentId:          exampleDeployment.ID(),\n\t\t\tExternalAccessEnabled: pulumi.Bool(true),\n\t\t\tExternalAccessRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"recipient@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotQaApplicationId\", exampleQaApplication.ID())\n\t\tctx.Export(\"datarobotQaApplicationSourceId\", exampleQaApplication.SourceId)\n\t\tctx.Export(\"datarobotQaApplicationSourceVersionId\", exampleQaApplication.SourceVersionId)\n\t\tctx.Export(\"datarobotQaApplicationUrl\", exampleQaApplication.ApplicationUrl)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.CustomModel;\nimport com.pulumi.datarobot.CustomModelArgs;\nimport com.pulumi.datarobot.RegisteredModel;\nimport com.pulumi.datarobot.RegisteredModelArgs;\nimport com.pulumi.datarobot.PredictionEnvironment;\nimport com.pulumi.datarobot.PredictionEnvironmentArgs;\nimport com.pulumi.datarobot.Deployment;\nimport com.pulumi.datarobot.DeploymentArgs;\nimport com.pulumi.datarobot.QaApplication;\nimport com.pulumi.datarobot.QaApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCustomModel = new CustomModel(\"exampleCustomModel\", CustomModelArgs.builder()\n            .description(\"Description for the example custom model\")\n            .targetType(\"Binary\")\n            .targetName(\"my_label\")\n            .baseEnvironmentId(\"65f9b27eab986d30d4c64268\")\n            .files(\"example.py\")\n            .build());\n\n        var exampleRegisteredModel = new RegisteredModel(\"exampleRegisteredModel\", RegisteredModelArgs.builder()\n            .customModelVersionId(exampleCustomModel.versionId())\n            .description(\"Description for the example registered model\")\n            .build());\n\n        var examplePredictionEnvironment = new PredictionEnvironment(\"examplePredictionEnvironment\", PredictionEnvironmentArgs.builder()\n            .description(\"Description for the example prediction environment\")\n            .platform(\"datarobotServerless\")\n            .build());\n\n        var exampleDeployment = new Deployment(\"exampleDeployment\", DeploymentArgs.builder()\n            .label(\"An example deployment\")\n            .predictionEnvironmentId(examplePredictionEnvironment.id())\n            .registeredModelVersionId(exampleRegisteredModel.versionId())\n            .build());\n\n        var exampleQaApplication = new QaApplication(\"exampleQaApplication\", QaApplicationArgs.builder()\n            .deploymentId(exampleDeployment.id())\n            .externalAccessEnabled(true)\n            .externalAccessRecipients(\"recipient@example.com\")\n            .build());\n\n        ctx.export(\"datarobotQaApplicationId\", exampleQaApplication.id());\n        ctx.export(\"datarobotQaApplicationSourceId\", exampleQaApplication.sourceId());\n        ctx.export(\"datarobotQaApplicationSourceVersionId\", exampleQaApplication.sourceVersionId());\n        ctx.export(\"datarobotQaApplicationUrl\", exampleQaApplication.applicationUrl());\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomModel:\n    type: datarobot:CustomModel\n    properties:\n      description: Description for the example custom model\n      targetType: Binary\n      targetName: my_label\n      baseEnvironmentId: 65f9b27eab986d30d4c64268\n      files:\n        - example.py\n  exampleRegisteredModel:\n    type: datarobot:RegisteredModel\n    properties:\n      customModelVersionId: ${exampleCustomModel.versionId}\n      description: Description for the example registered model\n  examplePredictionEnvironment:\n    type: datarobot:PredictionEnvironment\n    properties:\n      description: Description for the example prediction environment\n      platform: datarobotServerless\n  exampleDeployment:\n    type: datarobot:Deployment\n    properties:\n      label: An example deployment\n      predictionEnvironmentId: ${examplePredictionEnvironment.id}\n      registeredModelVersionId: ${exampleRegisteredModel.versionId}\n  exampleQaApplication:\n    type: datarobot:QaApplication\n    properties:\n      deploymentId: ${exampleDeployment.id}\n      externalAccessEnabled: true\n      externalAccessRecipients:\n        - recipient@example.com\noutputs:\n  datarobotQaApplicationId: ${exampleQaApplication.id}\n  datarobotQaApplicationSourceId: ${exampleQaApplication.sourceId}\n  datarobotQaApplicationSourceVersionId: ${exampleQaApplication.sourceVersionId}\n  datarobotQaApplicationUrl: ${exampleQaApplication.applicationUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "applicationUrl": {
                    "type": "string",
                    "description": "The URL of the Q\u0026A Application.\n"
                },
                "deploymentId": {
                    "type": "string",
                    "description": "The deployment ID of the Q\u0026A Application.\n"
                },
                "externalAccessEnabled": {
                    "type": "boolean",
                    "description": "Whether external access is enabled for the Q\u0026A Application.\n"
                },
                "externalAccessRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of external email addresses that have access to the Q\u0026A Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Q\u0026A Application.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The ID of the Q\u0026A Application Source.\n"
                },
                "sourceVersionId": {
                    "type": "string",
                    "description": "The version ID of the Q\u0026A Application Source.\n"
                }
            },
            "required": [
                "applicationUrl",
                "deploymentId",
                "externalAccessEnabled",
                "name",
                "sourceId",
                "sourceVersionId"
            ],
            "inputProperties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The deployment ID of the Q\u0026A Application.\n"
                },
                "externalAccessEnabled": {
                    "type": "boolean",
                    "description": "Whether external access is enabled for the Q\u0026A Application.\n"
                },
                "externalAccessRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of external email addresses that have access to the Q\u0026A Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Q\u0026A Application.\n"
                }
            },
            "requiredInputs": [
                "deploymentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QaApplication resources.\n",
                "properties": {
                    "applicationUrl": {
                        "type": "string",
                        "description": "The URL of the Q\u0026A Application.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "The deployment ID of the Q\u0026A Application.\n"
                    },
                    "externalAccessEnabled": {
                        "type": "boolean",
                        "description": "Whether external access is enabled for the Q\u0026A Application.\n"
                    },
                    "externalAccessRecipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of external email addresses that have access to the Q\u0026A Application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Q\u0026A Application.\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "The ID of the Q\u0026A Application Source.\n"
                    },
                    "sourceVersionId": {
                        "type": "string",
                        "description": "The version ID of the Q\u0026A Application Source.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/registeredModel:RegisteredModel": {
            "description": "registered model\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleCustomModel = new datarobot.CustomModel(\"exampleCustomModel\", {\n    description: \"Description for the example custom model\",\n    targetType: \"Binary\",\n    targetName: \"my_label\",\n    baseEnvironmentId: \"65f9b27eab986d30d4c64268\",\n    files: [\"example.py\"],\n});\nconst exampleRegisteredModel = new datarobot.RegisteredModel(\"exampleRegisteredModel\", {\n    customModelVersionId: exampleCustomModel.versionId,\n    description: \"Description for the example registered model\",\n});\nconst examplePredictionEnvironment = new datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", {\n    description: \"Description for the example prediction environment\",\n    platform: \"datarobotServerless\",\n});\nexport const datarobotRegisteredModelId = exampleRegisteredModel.id;\nexport const datarobotRegisteredModelVersionId = exampleRegisteredModel.versionId;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_custom_model = datarobot.CustomModel(\"exampleCustomModel\",\n    description=\"Description for the example custom model\",\n    target_type=\"Binary\",\n    target_name=\"my_label\",\n    base_environment_id=\"65f9b27eab986d30d4c64268\",\n    files=[\"example.py\"])\nexample_registered_model = datarobot.RegisteredModel(\"exampleRegisteredModel\",\n    custom_model_version_id=example_custom_model.version_id,\n    description=\"Description for the example registered model\")\nexample_prediction_environment = datarobot.PredictionEnvironment(\"examplePredictionEnvironment\",\n    description=\"Description for the example prediction environment\",\n    platform=\"datarobotServerless\")\npulumi.export(\"datarobotRegisteredModelId\", example_registered_model.id)\npulumi.export(\"datarobotRegisteredModelVersionId\", example_registered_model.version_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomModel = new Datarobot.CustomModel(\"exampleCustomModel\", new()\n    {\n        Description = \"Description for the example custom model\",\n        TargetType = \"Binary\",\n        TargetName = \"my_label\",\n        BaseEnvironmentId = \"65f9b27eab986d30d4c64268\",\n        Files = new[]\n        {\n            \"example.py\",\n        },\n    });\n\n    var exampleRegisteredModel = new Datarobot.RegisteredModel(\"exampleRegisteredModel\", new()\n    {\n        CustomModelVersionId = exampleCustomModel.VersionId,\n        Description = \"Description for the example registered model\",\n    });\n\n    var examplePredictionEnvironment = new Datarobot.PredictionEnvironment(\"examplePredictionEnvironment\", new()\n    {\n        Description = \"Description for the example prediction environment\",\n        Platform = \"datarobotServerless\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"datarobotRegisteredModelId\"] = exampleRegisteredModel.Id,\n        [\"datarobotRegisteredModelVersionId\"] = exampleRegisteredModel.VersionId,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomModel, err := datarobot.NewCustomModel(ctx, \"exampleCustomModel\", \u0026datarobot.CustomModelArgs{\n\t\t\tDescription:       pulumi.String(\"Description for the example custom model\"),\n\t\t\tTargetType:        pulumi.String(\"Binary\"),\n\t\t\tTargetName:        pulumi.String(\"my_label\"),\n\t\t\tBaseEnvironmentId: pulumi.String(\"65f9b27eab986d30d4c64268\"),\n\t\t\tFiles: pulumi.Any{\n\t\t\t\t\"example.py\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRegisteredModel, err := datarobot.NewRegisteredModel(ctx, \"exampleRegisteredModel\", \u0026datarobot.RegisteredModelArgs{\n\t\t\tCustomModelVersionId: exampleCustomModel.VersionId,\n\t\t\tDescription:          pulumi.String(\"Description for the example registered model\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewPredictionEnvironment(ctx, \"examplePredictionEnvironment\", \u0026datarobot.PredictionEnvironmentArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example prediction environment\"),\n\t\t\tPlatform:    pulumi.String(\"datarobotServerless\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datarobotRegisteredModelId\", exampleRegisteredModel.ID())\n\t\tctx.Export(\"datarobotRegisteredModelVersionId\", exampleRegisteredModel.VersionId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.CustomModel;\nimport com.pulumi.datarobot.CustomModelArgs;\nimport com.pulumi.datarobot.RegisteredModel;\nimport com.pulumi.datarobot.RegisteredModelArgs;\nimport com.pulumi.datarobot.PredictionEnvironment;\nimport com.pulumi.datarobot.PredictionEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCustomModel = new CustomModel(\"exampleCustomModel\", CustomModelArgs.builder()\n            .description(\"Description for the example custom model\")\n            .targetType(\"Binary\")\n            .targetName(\"my_label\")\n            .baseEnvironmentId(\"65f9b27eab986d30d4c64268\")\n            .files(\"example.py\")\n            .build());\n\n        var exampleRegisteredModel = new RegisteredModel(\"exampleRegisteredModel\", RegisteredModelArgs.builder()\n            .customModelVersionId(exampleCustomModel.versionId())\n            .description(\"Description for the example registered model\")\n            .build());\n\n        var examplePredictionEnvironment = new PredictionEnvironment(\"examplePredictionEnvironment\", PredictionEnvironmentArgs.builder()\n            .description(\"Description for the example prediction environment\")\n            .platform(\"datarobotServerless\")\n            .build());\n\n        ctx.export(\"datarobotRegisteredModelId\", exampleRegisteredModel.id());\n        ctx.export(\"datarobotRegisteredModelVersionId\", exampleRegisteredModel.versionId());\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomModel:\n    type: datarobot:CustomModel\n    properties:\n      description: Description for the example custom model\n      targetType: Binary\n      targetName: my_label\n      baseEnvironmentId: 65f9b27eab986d30d4c64268\n      files:\n        - example.py\n  exampleRegisteredModel:\n    type: datarobot:RegisteredModel\n    properties:\n      customModelVersionId: ${exampleCustomModel.versionId}\n      description: Description for the example registered model\n  examplePredictionEnvironment:\n    type: datarobot:PredictionEnvironment\n    properties:\n      description: Description for the example prediction environment\n      platform: datarobotServerless\noutputs:\n  datarobotRegisteredModelId: ${exampleRegisteredModel.id}\n  datarobotRegisteredModelVersionId: ${exampleRegisteredModel.versionId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "customModelVersionId": {
                    "type": "string",
                    "description": "The ID of the custom model version for this Registered Model.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Registered Model.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Registered Model.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Registered Model version to.\n"
                },
                "versionId": {
                    "type": "string",
                    "description": "The ID of the Registered Model Version.\n"
                },
                "versionName": {
                    "type": "string",
                    "description": "The name of the Registered Model Version.\n"
                }
            },
            "required": [
                "customModelVersionId",
                "name",
                "versionId",
                "versionName"
            ],
            "inputProperties": {
                "customModelVersionId": {
                    "type": "string",
                    "description": "The ID of the custom model version for this Registered Model.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Registered Model.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Registered Model.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Registered Model version to.\n"
                },
                "versionName": {
                    "type": "string",
                    "description": "The name of the Registered Model Version.\n"
                }
            },
            "requiredInputs": [
                "customModelVersionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RegisteredModel resources.\n",
                "properties": {
                    "customModelVersionId": {
                        "type": "string",
                        "description": "The ID of the custom model version for this Registered Model.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Registered Model.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Registered Model.\n"
                    },
                    "useCaseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Use Case IDs to add the Registered Model version to.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "The ID of the Registered Model Version.\n"
                    },
                    "versionName": {
                        "type": "string",
                        "description": "The name of the Registered Model Version.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/registeredModelFromLeaderboard:RegisteredModelFromLeaderboard": {
            "description": "registered model from leaderboard\n",
            "properties": {
                "computeAllTsIntervals": {
                    "type": "boolean",
                    "description": "Whether to compute all time series intervals (1-100 percentiles).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Registered Model.\n"
                },
                "distributionPredictionModelId": {
                    "type": "string",
                    "description": "The ID of the DataRobot distribution prediction model trained on predictions from the DataRobot model.\n"
                },
                "modelId": {
                    "type": "string",
                    "description": "The ID of the DataRobot model for this Registered Model.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Registered Model.\n"
                },
                "predictionThreshold": {
                    "type": "number",
                    "description": "The prediction threshold for the model.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Registered Model version to.\n"
                },
                "versionId": {
                    "type": "string",
                    "description": "The ID of the Registered Model Version.\n"
                },
                "versionName": {
                    "type": "string",
                    "description": "The name of the Registered Model Version.\n"
                }
            },
            "required": [
                "modelId",
                "name",
                "versionId",
                "versionName"
            ],
            "inputProperties": {
                "computeAllTsIntervals": {
                    "type": "boolean",
                    "description": "Whether to compute all time series intervals (1-100 percentiles).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Registered Model.\n"
                },
                "distributionPredictionModelId": {
                    "type": "string",
                    "description": "The ID of the DataRobot distribution prediction model trained on predictions from the DataRobot model.\n"
                },
                "modelId": {
                    "type": "string",
                    "description": "The ID of the DataRobot model for this Registered Model.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Registered Model.\n"
                },
                "predictionThreshold": {
                    "type": "number",
                    "description": "The prediction threshold for the model.\n"
                },
                "useCaseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Use Case IDs to add the Registered Model version to.\n"
                },
                "versionName": {
                    "type": "string",
                    "description": "The name of the Registered Model Version.\n"
                }
            },
            "requiredInputs": [
                "modelId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RegisteredModelFromLeaderboard resources.\n",
                "properties": {
                    "computeAllTsIntervals": {
                        "type": "boolean",
                        "description": "Whether to compute all time series intervals (1-100 percentiles).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Registered Model.\n"
                    },
                    "distributionPredictionModelId": {
                        "type": "string",
                        "description": "The ID of the DataRobot distribution prediction model trained on predictions from the DataRobot model.\n"
                    },
                    "modelId": {
                        "type": "string",
                        "description": "The ID of the DataRobot model for this Registered Model.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Registered Model.\n"
                    },
                    "predictionThreshold": {
                        "type": "number",
                        "description": "The prediction threshold for the model.\n"
                    },
                    "useCaseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Use Case IDs to add the Registered Model version to.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "The ID of the Registered Model Version.\n"
                    },
                    "versionName": {
                        "type": "string",
                        "description": "The name of the Registered Model Version.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/remoteRepository:RemoteRepository": {
            "description": "remote repository\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst githubExample = new datarobot.RemoteRepository(\"githubExample\", {\n    description: \"Description for the example remote repository\",\n    location: \"https://github.com/datarobot/datarobot-user-models\",\n    sourceType: \"github\",\n});\nconst gitlabExample = new datarobot.RemoteRepository(\"gitlabExample\", {\n    location: \"https://gitlab.yourcompany.com/username/repository\",\n    personalAccessToken: \"your_personal_access_token\",\n    sourceType: \"gitlab-cloud\",\n});\nconst bitbucketExample = new datarobot.RemoteRepository(\"bitbucketExample\", {\n    location: \"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\",\n    sourceType: \"bitbucket-server\",\n});\nconst s3Example = new datarobot.RemoteRepository(\"s3Example\", {\n    location: \"my-s3-bucket\",\n    sourceType: \"s3\",\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\ngithub_example = datarobot.RemoteRepository(\"githubExample\",\n    description=\"Description for the example remote repository\",\n    location=\"https://github.com/datarobot/datarobot-user-models\",\n    source_type=\"github\")\ngitlab_example = datarobot.RemoteRepository(\"gitlabExample\",\n    location=\"https://gitlab.yourcompany.com/username/repository\",\n    personal_access_token=\"your_personal_access_token\",\n    source_type=\"gitlab-cloud\")\nbitbucket_example = datarobot.RemoteRepository(\"bitbucketExample\",\n    location=\"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\",\n    source_type=\"bitbucket-server\")\ns3_example = datarobot.RemoteRepository(\"s3Example\",\n    location=\"my-s3-bucket\",\n    source_type=\"s3\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var githubExample = new Datarobot.RemoteRepository(\"githubExample\", new()\n    {\n        Description = \"Description for the example remote repository\",\n        Location = \"https://github.com/datarobot/datarobot-user-models\",\n        SourceType = \"github\",\n    });\n\n    var gitlabExample = new Datarobot.RemoteRepository(\"gitlabExample\", new()\n    {\n        Location = \"https://gitlab.yourcompany.com/username/repository\",\n        PersonalAccessToken = \"your_personal_access_token\",\n        SourceType = \"gitlab-cloud\",\n    });\n\n    var bitbucketExample = new Datarobot.RemoteRepository(\"bitbucketExample\", new()\n    {\n        Location = \"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\",\n        SourceType = \"bitbucket-server\",\n    });\n\n    var s3Example = new Datarobot.RemoteRepository(\"s3Example\", new()\n    {\n        Location = \"my-s3-bucket\",\n        SourceType = \"s3\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.NewRemoteRepository(ctx, \"githubExample\", \u0026datarobot.RemoteRepositoryArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example remote repository\"),\n\t\t\tLocation:    pulumi.String(\"https://github.com/datarobot/datarobot-user-models\"),\n\t\t\tSourceType:  pulumi.String(\"github\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewRemoteRepository(ctx, \"gitlabExample\", \u0026datarobot.RemoteRepositoryArgs{\n\t\t\tLocation:            pulumi.String(\"https://gitlab.yourcompany.com/username/repository\"),\n\t\t\tPersonalAccessToken: pulumi.String(\"your_personal_access_token\"),\n\t\t\tSourceType:          pulumi.String(\"gitlab-cloud\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewRemoteRepository(ctx, \"bitbucketExample\", \u0026datarobot.RemoteRepositoryArgs{\n\t\t\tLocation:   pulumi.String(\"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\"),\n\t\t\tSourceType: pulumi.String(\"bitbucket-server\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = datarobot.NewRemoteRepository(ctx, \"s3Example\", \u0026datarobot.RemoteRepositoryArgs{\n\t\t\tLocation:   pulumi.String(\"my-s3-bucket\"),\n\t\t\tSourceType: pulumi.String(\"s3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.RemoteRepository;\nimport com.pulumi.datarobot.RemoteRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var githubExample = new RemoteRepository(\"githubExample\", RemoteRepositoryArgs.builder()\n            .description(\"Description for the example remote repository\")\n            .location(\"https://github.com/datarobot/datarobot-user-models\")\n            .sourceType(\"github\")\n            .build());\n\n        var gitlabExample = new RemoteRepository(\"gitlabExample\", RemoteRepositoryArgs.builder()\n            .location(\"https://gitlab.yourcompany.com/username/repository\")\n            .personalAccessToken(\"your_personal_access_token\")\n            .sourceType(\"gitlab-cloud\")\n            .build());\n\n        var bitbucketExample = new RemoteRepository(\"bitbucketExample\", RemoteRepositoryArgs.builder()\n            .location(\"https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\")\n            .sourceType(\"bitbucket-server\")\n            .build());\n\n        var s3Example = new RemoteRepository(\"s3Example\", RemoteRepositoryArgs.builder()\n            .location(\"my-s3-bucket\")\n            .sourceType(\"s3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  githubExample:\n    type: datarobot:RemoteRepository\n    properties:\n      description: Description for the example remote repository\n      location: https://github.com/datarobot/datarobot-user-models\n      sourceType: github\n  gitlabExample:\n    type: datarobot:RemoteRepository\n    properties:\n      location: https://gitlab.yourcompany.com/username/repository\n      personalAccessToken: your_personal_access_token\n      sourceType: gitlab-cloud\n  bitbucketExample:\n    type: datarobot:RemoteRepository\n    properties:\n      location: https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse\n      sourceType: bitbucket-server\n  s3Example:\n    type: datarobot:RemoteRepository\n    properties:\n      location: my-s3-bucket\n      sourceType: s3\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "awsAccessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID for the Remote Repository.\n"
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key for the Remote Repository.\n"
                },
                "awsSessionToken": {
                    "type": "string",
                    "description": "The AWS session token for the Remote Repository.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Remote Repository.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of the Remote Repository. (Bucket name for S3)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Remote Repository.\n"
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "The personal access token for the Remote Repository.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "The source type of the Remote Repository.\n"
                }
            },
            "required": [
                "location",
                "name",
                "sourceType"
            ],
            "inputProperties": {
                "awsAccessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID for the Remote Repository.\n"
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key for the Remote Repository.\n"
                },
                "awsSessionToken": {
                    "type": "string",
                    "description": "The AWS session token for the Remote Repository.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Remote Repository.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of the Remote Repository. (Bucket name for S3)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Remote Repository.\n"
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "The personal access token for the Remote Repository.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "The source type of the Remote Repository.\n"
                }
            },
            "requiredInputs": [
                "location",
                "sourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemoteRepository resources.\n",
                "properties": {
                    "awsAccessKeyId": {
                        "type": "string",
                        "description": "The AWS access key ID for the Remote Repository.\n"
                    },
                    "awsSecretAccessKey": {
                        "type": "string",
                        "description": "The AWS secret access key for the Remote Repository.\n"
                    },
                    "awsSessionToken": {
                        "type": "string",
                        "description": "The AWS session token for the Remote Repository.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Remote Repository.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of the Remote Repository. (Bucket name for S3)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Remote Repository.\n"
                    },
                    "personalAccessToken": {
                        "type": "string",
                        "description": "The personal access token for the Remote Repository.\n"
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "The source type of the Remote Repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/useCase:UseCase": {
            "description": "Use case\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst example = new datarobot.UseCase(\"example\", {});\nexport const exampleId = example.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample = datarobot.UseCase(\"example\")\npulumi.export(\"exampleId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Datarobot.UseCase(\"example\");\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleId\"] = example.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := datarobot.NewUseCase(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", example.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.UseCase;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new UseCase(\"example\");\n\n        ctx.export(\"exampleId\", example.id());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: datarobot:UseCase\noutputs:\n  exampleId: ${example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Use Case.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Use Case.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Use Case.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Use Case.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UseCase resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Use Case.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Use Case.\n"
                    }
                },
                "type": "object"
            }
        },
        "datarobot:index/vectorDatabase:VectorDatabase": {
            "description": "Vector database\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@datarobot/pulumi-datarobot\";\n\nconst exampleUseCase = new datarobot.UseCase(\"exampleUseCase\", {description: \"Description for the example use case\"});\nconst exampleDatasetFromFile = new datarobot.DatasetFromFile(\"exampleDatasetFromFile\", {\n    filePath: \"[Path to file to upload]\",\n    useCaseIds: [exampleUseCase.id],\n});\nconst exampleVectorDatabase = new datarobot.VectorDatabase(\"exampleVectorDatabase\", {\n    useCaseId: exampleUseCase.id,\n    datasetId: exampleDatasetFromFile.id,\n});\n// Optional\n// chunking_parameters = {\n//   chunk_overlap_percentage = 0\n//   chunk_size               = 512\n//   chunking_method          = \"recursive\"\n//   embedding_model          = \"jinaai/jina-embedding-t-en-v1\"\n//   separators               = [\"\\n\", \" \"]\n// }\nexport const exampleId = exampleVectorDatabase.id;\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\nexample_use_case = datarobot.UseCase(\"exampleUseCase\", description=\"Description for the example use case\")\nexample_dataset_from_file = datarobot.DatasetFromFile(\"exampleDatasetFromFile\",\n    file_path=\"[Path to file to upload]\",\n    use_case_ids=[example_use_case.id])\nexample_vector_database = datarobot.VectorDatabase(\"exampleVectorDatabase\",\n    use_case_id=example_use_case.id,\n    dataset_id=example_dataset_from_file.id)\n# Optional\n# chunking_parameters = {\n#   chunk_overlap_percentage = 0\n#   chunk_size               = 512\n#   chunking_method          = \"recursive\"\n#   embedding_model          = \"jinaai/jina-embedding-t-en-v1\"\n#   separators               = [\"\\n\", \" \"]\n# }\npulumi.export(\"exampleId\", example_vector_database.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = DataRobotPulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUseCase = new Datarobot.UseCase(\"exampleUseCase\", new()\n    {\n        Description = \"Description for the example use case\",\n    });\n\n    var exampleDatasetFromFile = new Datarobot.DatasetFromFile(\"exampleDatasetFromFile\", new()\n    {\n        FilePath = \"[Path to file to upload]\",\n        UseCaseIds = new[]\n        {\n            exampleUseCase.Id,\n        },\n    });\n\n    var exampleVectorDatabase = new Datarobot.VectorDatabase(\"exampleVectorDatabase\", new()\n    {\n        UseCaseId = exampleUseCase.Id,\n        DatasetId = exampleDatasetFromFile.Id,\n    });\n\n    // Optional\n    // chunking_parameters = {\n    //   chunk_overlap_percentage = 0\n    //   chunk_size               = 512\n    //   chunking_method          = \"recursive\"\n    //   embedding_model          = \"jinaai/jina-embedding-t-en-v1\"\n    //   separators               = [\"\\n\", \" \"]\n    // }\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleId\"] = exampleVectorDatabase.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUseCase, err := datarobot.NewUseCase(ctx, \"exampleUseCase\", \u0026datarobot.UseCaseArgs{\n\t\t\tDescription: pulumi.String(\"Description for the example use case\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDatasetFromFile, err := datarobot.NewDatasetFromFile(ctx, \"exampleDatasetFromFile\", \u0026datarobot.DatasetFromFileArgs{\n\t\t\tFilePath: pulumi.String(\"[Path to file to upload]\"),\n\t\t\tUseCaseIds: pulumi.StringArray{\n\t\t\t\texampleUseCase.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleVectorDatabase, err := datarobot.NewVectorDatabase(ctx, \"exampleVectorDatabase\", \u0026datarobot.VectorDatabaseArgs{\n\t\t\tUseCaseId: exampleUseCase.ID(),\n\t\t\tDatasetId: exampleDatasetFromFile.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleId\", exampleVectorDatabase.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.UseCase;\nimport com.pulumi.datarobot.UseCaseArgs;\nimport com.pulumi.datarobot.DatasetFromFile;\nimport com.pulumi.datarobot.DatasetFromFileArgs;\nimport com.pulumi.datarobot.VectorDatabase;\nimport com.pulumi.datarobot.VectorDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUseCase = new UseCase(\"exampleUseCase\", UseCaseArgs.builder()\n            .description(\"Description for the example use case\")\n            .build());\n\n        var exampleDatasetFromFile = new DatasetFromFile(\"exampleDatasetFromFile\", DatasetFromFileArgs.builder()\n            .filePath(\"[Path to file to upload]\")\n            .useCaseIds(exampleUseCase.id())\n            .build());\n\n        var exampleVectorDatabase = new VectorDatabase(\"exampleVectorDatabase\", VectorDatabaseArgs.builder()\n            .useCaseId(exampleUseCase.id())\n            .datasetId(exampleDatasetFromFile.id())\n            .build());\n\n        // Optional\n        // chunking_parameters = {\n        //   chunk_overlap_percentage = 0\n        //   chunk_size               = 512\n        //   chunking_method          = \"recursive\"\n        //   embedding_model          = \"jinaai/jina-embedding-t-en-v1\"\n        //   separators               = [\"\\n\", \" \"]\n        // }\n        ctx.export(\"exampleId\", exampleVectorDatabase.id());\n    }\n}\n```\n```yaml\nresources:\n  exampleUseCase:\n    type: datarobot:UseCase\n    properties:\n      description: Description for the example use case\n  exampleDatasetFromFile:\n    type: datarobot:DatasetFromFile\n    properties:\n      filePath: '[Path to file to upload]'\n      useCaseIds:\n        - ${exampleUseCase.id}\n  exampleVectorDatabase:\n    type: datarobot:VectorDatabase\n    properties:\n      useCaseId: ${exampleUseCase.id}\n      datasetId: ${exampleDatasetFromFile.id}\noutputs:\n  exampleId: ${exampleVectorDatabase.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "chunkingParameters": {
                    "$ref": "#/types/datarobot:index/VectorDatabaseChunkingParameters:VectorDatabaseChunkingParameters",
                    "description": "The chunking parameters for the Model.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The id of the Vector Database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VectorDatabase.\n"
                },
                "useCaseId": {
                    "type": "string",
                    "description": "The id of the Use Case.\n"
                }
            },
            "required": [
                "chunkingParameters",
                "datasetId",
                "name",
                "useCaseId"
            ],
            "inputProperties": {
                "chunkingParameters": {
                    "$ref": "#/types/datarobot:index/VectorDatabaseChunkingParameters:VectorDatabaseChunkingParameters",
                    "description": "The chunking parameters for the Model.\n"
                },
                "datasetId": {
                    "type": "string",
                    "description": "The id of the Vector Database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VectorDatabase.\n"
                },
                "useCaseId": {
                    "type": "string",
                    "description": "The id of the Use Case.\n"
                }
            },
            "requiredInputs": [
                "datasetId",
                "useCaseId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VectorDatabase resources.\n",
                "properties": {
                    "chunkingParameters": {
                        "$ref": "#/types/datarobot:index/VectorDatabaseChunkingParameters:VectorDatabaseChunkingParameters",
                        "description": "The chunking parameters for the Model.\n"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The id of the Vector Database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VectorDatabase.\n"
                    },
                    "useCaseId": {
                        "type": "string",
                        "description": "The id of the Use Case.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "datarobot:index/getGlobalModel:getGlobalModel": {
            "description": "Global Model\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as datarobot from \"@pulumi/datarobot\";\n\nconst dummyBinaryClassification = datarobot.getGlobalModel({\n    name: \"[DataRobot] Dummy Binary Classification\",\n});\n```\n```python\nimport pulumi\nimport pulumi_datarobot as datarobot\n\ndummy_binary_classification = datarobot.get_global_model(name=\"[DataRobot] Dummy Binary Classification\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Datarobot = Pulumi.Datarobot;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dummyBinaryClassification = Datarobot.GetGlobalModel.Invoke(new()\n    {\n        Name = \"[DataRobot] Dummy Binary Classification\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datarobot.GetGlobalModel(ctx, \u0026datarobot.GetGlobalModelArgs{\n\t\t\tName: \"[DataRobot] Dummy Binary Classification\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.datarobot.DatarobotFunctions;\nimport com.pulumi.datarobot.inputs.GetGlobalModelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dummyBinaryClassification = DatarobotFunctions.getGlobalModel(GetGlobalModelArgs.builder()\n            .name(\"[DataRobot] Dummy Binary Classification\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dummyBinaryClassification:\n    fn::invoke:\n      Function: datarobot:getGlobalModel\n      Arguments:\n        name: '[DataRobot] Dummy Binary Classification'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGlobalModel.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Registered Model.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGlobalModel.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Global Model.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Registered Model.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "The ID of the Global Model Version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "versionId"
                ]
            }
        }
    }
}