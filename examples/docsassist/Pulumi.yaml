name: yaml
runtime: yaml
description: Docsassist 1 1
config: { "pulumi:tags": { value: { "pulumi:template": yaml } } }
plugins:
  providers:
    - name: datarobot
      path: ../../bin
variables:
  datarobotGlobalModelToxicity:
    fn::invoke:
      function: datarobot:getGlobalModel
      arguments:
        name: "[Hugging Face] Toxicity Classifier"
  datarobotGlobalModelInjection:
    fn::invoke:
      function: datarobot:getGlobalModel
      arguments:
        name: "[Guard] Prompt Injection Classifier from Hugging Face"
resources:
  datarobotUseCase:
    type: datarobot:UseCase
    properties:
      name: Docsassist 1 1
      description: Low Code Rag Example

  datarobotDatasetFromFile:
    type: datarobot:DatasetFromFile
    properties:
      sourceFile: datarobot_english_documentation_docsassist.zip
      useCaseId: ${datarobotUseCase.id}

  datarobotPlayground:
    type: datarobot:Playground
    properties:
      name: ${datarobotUseCase.name}
      description: ${datarobotUseCase.description}
      useCaseId: ${datarobotUseCase.id}

  datarobotVectorDatabase:
    type: datarobot:VectorDatabase
    properties:
      name: ${datarobotUseCase.name}
      useCaseId: ${datarobotUseCase.id}
      datasetId: ${datarobotDatasetFromFile.id}
      chunkingParameters: {}

  datarobotLlmBlueprint:
    type: datarobot:LlmBlueprint
    properties:
      name: ${datarobotUseCase.name}
      description: ${datarobotUseCase.description}
      playgroundId: ${datarobotPlayground.id}
      vectorDatabaseId: ${datarobotVectorDatabase.id}
      llmId: google-bison

  datarobotGoogleCloudCredential:
    type: datarobot:GoogleCloudCredential
    properties:
      name: ${datarobotUseCase.name} Google Cloud Service Account
      sourceFile: google_credentials.json

  datarobotToxicityDeployment:
    type: datarobot:Deployment
    properties:
      label: ${datarobotUseCase.name} Toxicity Deployment
      predictionEnvironmentId: ${datarobotPredictionEnvironment.id}
      registeredModelVersionId: ${datarobotGlobalModelToxicity.versionId}
      settings:
        predictionsSettings:
          realTime: True
          minComputes: 0.0
          maxComputes: 1.0

  datarobotInjectionDeployment:
    type: datarobot:Deployment
    properties:
      label: ${datarobotUseCase.name} Injection Deployment
      predictionEnvironmentId: ${datarobotPredictionEnvironment.id}
      registeredModelVersionId: ${datarobotGlobalModelInjection.versionId}
      settings:
        predictionsSettings:
          realTime: True
          minComputes: 0.0
          maxComputes: 1.0

  datarobotCustomModel:
    type: datarobot:CustomModel
    properties:
      name: ${datarobotUseCase.name}
      description: ${datarobotUseCase.description}
      sourceLlmBlueprintId: ${datarobotLlmBlueprint.id}
      runtimeParameters:
        - key: GOOGLE_SERVICE_ACCOUNT
          type: credential
          value: ${datarobotGoogleCloudCredential.id}
      guardConfigurations:
        - templateName: "Toxicity"
          name: "Global Toxicity Classifier"
          stages: ["prompt"]
          intervention:
            action: "block"
            message: "I have detected this question may violate my acceptable use guidelines and am unable to answer. [Toxicity]"
            condition:
              comparand: 0.5
              comparator: "greaterThan"
          deploymentId: ${datarobotToxicityDeployment.id}
        - templateName: "Prompt Injection"
          name: "Global Prompt Injection Classifier"
          stages: ["prompt"]
          intervention:
            action: "block"
            message: "I have detected this question may violate my acceptable use guidelines and am unable to answer. [Prompt Injection]"
            condition:
              comparand: 0.5
              comparator: "greaterThan"
          deploymentId: ${datarobotInjectionDeployment.id}

  datarobotRegisteredModel:
    type: datarobot:RegisteredModel
    properties:
      customModelVersionId: ${datarobotCustomModel.versionId}
      name: ${datarobotUseCase.name}
      description: ${datarobotUseCase.description}

  datarobotPredictionEnvironment:
    type: datarobot:PredictionEnvironment
    properties:
      name: ${datarobotUseCase.name}
      description: ${datarobotUseCase.description}
      platform: datarobotServerless

  datarobotDeployment:
    type: datarobot:Deployment
    properties:
      label: ${datarobotUseCase.name}
      predictionEnvironmentId: ${datarobotPredictionEnvironment.id}
      registeredModelVersionId: ${datarobotRegisteredModel.versionId}
      settings:
        predictionRowStorage: true

  datarobotChatApplication:
    type: datarobot:ChatApplication
    properties:
      name: ${datarobotUseCase.name}
      deploymentId: ${datarobotDeployment.id}

outputs:
  datarobotChatApplicationUrl:
    value: ${datarobotChatApplication.applicationUrl}
