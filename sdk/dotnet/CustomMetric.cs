// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Custom Metric
    /// </summary>
    [DatarobotResourceType("datarobot:index/customMetric:CustomMetric")]
    public partial class CustomMetric : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The baseline value used to add “reference dots” to the values over time chart.
        /// </summary>
        [Output("baselineValue")]
        public Output<double?> BaselineValue { get; private set; } = null!;

        /// <summary>
        /// A Custom Metric batch ID source when reading values from columnar dataset.
        /// </summary>
        [Output("batch")]
        public Output<Outputs.CustomMetricBatch?> Batch { get; private set; } = null!;

        /// <summary>
        /// ID of the Deployment for the Custom Metric.
        /// </summary>
        [Output("deploymentId")]
        public Output<string> DeploymentId { get; private set; } = null!;

        /// <summary>
        /// Description of the Custom Metric.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Directionality of the Custom Metric
        /// </summary>
        [Output("directionality")]
        public Output<string> Directionality { get; private set; } = null!;

        /// <summary>
        /// Determines whether the metric is geospatial.
        /// </summary>
        [Output("isGeospatial")]
        public Output<bool> IsGeospatial { get; private set; } = null!;

        /// <summary>
        /// Determines whether the metric is related to the model or deployment.
        /// </summary>
        [Output("isModelSpecific")]
        public Output<bool> IsModelSpecific { get; private set; } = null!;

        /// <summary>
        /// Name of the Custom Metric.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A Custom Metric sample source when reading values from columnar dataset.
        /// </summary>
        [Output("sampleCount")]
        public Output<Outputs.CustomMetricSampleCount?> SampleCount { get; private set; } = null!;

        /// <summary>
        /// A Custom Metric timestamp column source when reading values from columnar dataset.
        /// </summary>
        [Output("timestamp")]
        public Output<Outputs.CustomMetricTimestamp?> Timestamp { get; private set; } = null!;

        /// <summary>
        /// Aggregation type of the Custom Metric.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The units, or the y-axis label, of the given Custom Metric.
        /// </summary>
        [Output("units")]
        public Output<string> Units { get; private set; } = null!;

        /// <summary>
        /// A Custom Metric value source when reading values from columnar dataset.
        /// </summary>
        [Output("value")]
        public Output<Outputs.CustomMetricValue?> Value { get; private set; } = null!;


        /// <summary>
        /// Create a CustomMetric resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomMetric(string name, CustomMetricArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/customMetric:CustomMetric", name, args ?? new CustomMetricArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomMetric(string name, Input<string> id, CustomMetricState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/customMetric:CustomMetric", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomMetric resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomMetric Get(string name, Input<string> id, CustomMetricState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomMetric(name, id, state, options);
        }
    }

    public sealed class CustomMetricArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The baseline value used to add “reference dots” to the values over time chart.
        /// </summary>
        [Input("baselineValue")]
        public Input<double>? BaselineValue { get; set; }

        /// <summary>
        /// A Custom Metric batch ID source when reading values from columnar dataset.
        /// </summary>
        [Input("batch")]
        public Input<Inputs.CustomMetricBatchArgs>? Batch { get; set; }

        /// <summary>
        /// ID of the Deployment for the Custom Metric.
        /// </summary>
        [Input("deploymentId", required: true)]
        public Input<string> DeploymentId { get; set; } = null!;

        /// <summary>
        /// Description of the Custom Metric.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Directionality of the Custom Metric
        /// </summary>
        [Input("directionality", required: true)]
        public Input<string> Directionality { get; set; } = null!;

        /// <summary>
        /// Determines whether the metric is geospatial.
        /// </summary>
        [Input("isGeospatial", required: true)]
        public Input<bool> IsGeospatial { get; set; } = null!;

        /// <summary>
        /// Determines whether the metric is related to the model or deployment.
        /// </summary>
        [Input("isModelSpecific", required: true)]
        public Input<bool> IsModelSpecific { get; set; } = null!;

        /// <summary>
        /// Name of the Custom Metric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Custom Metric sample source when reading values from columnar dataset.
        /// </summary>
        [Input("sampleCount")]
        public Input<Inputs.CustomMetricSampleCountArgs>? SampleCount { get; set; }

        /// <summary>
        /// A Custom Metric timestamp column source when reading values from columnar dataset.
        /// </summary>
        [Input("timestamp")]
        public Input<Inputs.CustomMetricTimestampArgs>? Timestamp { get; set; }

        /// <summary>
        /// Aggregation type of the Custom Metric.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The units, or the y-axis label, of the given Custom Metric.
        /// </summary>
        [Input("units", required: true)]
        public Input<string> Units { get; set; } = null!;

        /// <summary>
        /// A Custom Metric value source when reading values from columnar dataset.
        /// </summary>
        [Input("value")]
        public Input<Inputs.CustomMetricValueArgs>? Value { get; set; }

        public CustomMetricArgs()
        {
        }
        public static new CustomMetricArgs Empty => new CustomMetricArgs();
    }

    public sealed class CustomMetricState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The baseline value used to add “reference dots” to the values over time chart.
        /// </summary>
        [Input("baselineValue")]
        public Input<double>? BaselineValue { get; set; }

        /// <summary>
        /// A Custom Metric batch ID source when reading values from columnar dataset.
        /// </summary>
        [Input("batch")]
        public Input<Inputs.CustomMetricBatchGetArgs>? Batch { get; set; }

        /// <summary>
        /// ID of the Deployment for the Custom Metric.
        /// </summary>
        [Input("deploymentId")]
        public Input<string>? DeploymentId { get; set; }

        /// <summary>
        /// Description of the Custom Metric.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Directionality of the Custom Metric
        /// </summary>
        [Input("directionality")]
        public Input<string>? Directionality { get; set; }

        /// <summary>
        /// Determines whether the metric is geospatial.
        /// </summary>
        [Input("isGeospatial")]
        public Input<bool>? IsGeospatial { get; set; }

        /// <summary>
        /// Determines whether the metric is related to the model or deployment.
        /// </summary>
        [Input("isModelSpecific")]
        public Input<bool>? IsModelSpecific { get; set; }

        /// <summary>
        /// Name of the Custom Metric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Custom Metric sample source when reading values from columnar dataset.
        /// </summary>
        [Input("sampleCount")]
        public Input<Inputs.CustomMetricSampleCountGetArgs>? SampleCount { get; set; }

        /// <summary>
        /// A Custom Metric timestamp column source when reading values from columnar dataset.
        /// </summary>
        [Input("timestamp")]
        public Input<Inputs.CustomMetricTimestampGetArgs>? Timestamp { get; set; }

        /// <summary>
        /// Aggregation type of the Custom Metric.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The units, or the y-axis label, of the given Custom Metric.
        /// </summary>
        [Input("units")]
        public Input<string>? Units { get; set; }

        /// <summary>
        /// A Custom Metric value source when reading values from columnar dataset.
        /// </summary>
        [Input("value")]
        public Input<Inputs.CustomMetricValueGetArgs>? Value { get; set; }

        public CustomMetricState()
        {
        }
        public static new CustomMetricState Empty => new CustomMetricState();
    }
}
