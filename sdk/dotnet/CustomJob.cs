// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Custom Job
    /// </summary>
    [DatarobotResourceType("datarobot:index/customJob:CustomJob")]
    public partial class CustomJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the Custom Job.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The egress network policy for the Job.
        /// </summary>
        [Output("egressNetworkPolicy")]
        public Output<string> EgressNetworkPolicy { get; private set; } = null!;

        /// <summary>
        /// The ID of the environment to use with the Job.
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The ID of the environment version to use with the Job.
        /// </summary>
        [Output("environmentVersionId")]
        public Output<string> EnvironmentVersionId { get; private set; } = null!;

        /// <summary>
        /// List of files to upload, each with a source (local path) and destination (path in job).
        /// </summary>
        [Output("files")]
        public Output<ImmutableArray<Outputs.CustomJobFile>> Files { get; private set; } = null!;

        /// <summary>
        /// The hash of file contents for each file in files.
        /// </summary>
        [Output("filesHashes")]
        public Output<ImmutableArray<string>> FilesHashes { get; private set; } = null!;

        /// <summary>
        /// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
        /// </summary>
        [Output("folderPath")]
        public Output<string?> FolderPath { get; private set; } = null!;

        /// <summary>
        /// The hash of the folder path contents.
        /// </summary>
        [Output("folderPathHash")]
        public Output<string> FolderPathHash { get; private set; } = null!;

        /// <summary>
        /// The type of the Custom Job.
        /// </summary>
        [Output("jobType")]
        public Output<string> JobType { get; private set; } = null!;

        /// <summary>
        /// The name of the Custom Job.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
        /// </summary>
        [Output("resourceBundleId")]
        public Output<string?> ResourceBundleId { get; private set; } = null!;

        /// <summary>
        /// Additional parameters to be injected into a Job at runtime.
        /// </summary>
        [Output("runtimeParameterValues")]
        public Output<ImmutableArray<Outputs.CustomJobRuntimeParameterValue>> RuntimeParameterValues { get; private set; } = null!;

        /// <summary>
        /// The schedule configuration for the custom job.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.CustomJobSchedule?> Schedule { get; private set; } = null!;

        /// <summary>
        /// The ID of the schedule associated with the custom job.
        /// </summary>
        [Output("scheduleId")]
        public Output<string> ScheduleId { get; private set; } = null!;


        /// <summary>
        /// Create a CustomJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomJob(string name, CustomJobArgs? args = null, CustomResourceOptions? options = null)
            : base("datarobot:index/customJob:CustomJob", name, args ?? new CustomJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomJob(string name, Input<string> id, CustomJobState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/customJob:CustomJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomJob Get(string name, Input<string> id, CustomJobState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomJob(name, id, state, options);
        }
    }

    public sealed class CustomJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Custom Job.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The egress network policy for the Job.
        /// </summary>
        [Input("egressNetworkPolicy")]
        public Input<string>? EgressNetworkPolicy { get; set; }

        /// <summary>
        /// The ID of the environment to use with the Job.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// The ID of the environment version to use with the Job.
        /// </summary>
        [Input("environmentVersionId")]
        public Input<string>? EnvironmentVersionId { get; set; }

        [Input("files")]
        private InputList<Inputs.CustomJobFileArgs>? _files;

        /// <summary>
        /// List of files to upload, each with a source (local path) and destination (path in job).
        /// </summary>
        public InputList<Inputs.CustomJobFileArgs> Files
        {
            get => _files ?? (_files = new InputList<Inputs.CustomJobFileArgs>());
            set => _files = value;
        }

        /// <summary>
        /// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The type of the Custom Job.
        /// </summary>
        [Input("jobType")]
        public Input<string>? JobType { get; set; }

        /// <summary>
        /// The name of the Custom Job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
        /// </summary>
        [Input("resourceBundleId")]
        public Input<string>? ResourceBundleId { get; set; }

        [Input("runtimeParameterValues")]
        private InputList<Inputs.CustomJobRuntimeParameterValueArgs>? _runtimeParameterValues;

        /// <summary>
        /// Additional parameters to be injected into a Job at runtime.
        /// </summary>
        public InputList<Inputs.CustomJobRuntimeParameterValueArgs> RuntimeParameterValues
        {
            get => _runtimeParameterValues ?? (_runtimeParameterValues = new InputList<Inputs.CustomJobRuntimeParameterValueArgs>());
            set => _runtimeParameterValues = value;
        }

        /// <summary>
        /// The schedule configuration for the custom job.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.CustomJobScheduleArgs>? Schedule { get; set; }

        /// <summary>
        /// The ID of the schedule associated with the custom job.
        /// </summary>
        [Input("scheduleId")]
        public Input<string>? ScheduleId { get; set; }

        public CustomJobArgs()
        {
        }
        public static new CustomJobArgs Empty => new CustomJobArgs();
    }

    public sealed class CustomJobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Custom Job.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The egress network policy for the Job.
        /// </summary>
        [Input("egressNetworkPolicy")]
        public Input<string>? EgressNetworkPolicy { get; set; }

        /// <summary>
        /// The ID of the environment to use with the Job.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// The ID of the environment version to use with the Job.
        /// </summary>
        [Input("environmentVersionId")]
        public Input<string>? EnvironmentVersionId { get; set; }

        [Input("files")]
        private InputList<Inputs.CustomJobFileGetArgs>? _files;

        /// <summary>
        /// List of files to upload, each with a source (local path) and destination (path in job).
        /// </summary>
        public InputList<Inputs.CustomJobFileGetArgs> Files
        {
            get => _files ?? (_files = new InputList<Inputs.CustomJobFileGetArgs>());
            set => _files = value;
        }

        [Input("filesHashes")]
        private InputList<string>? _filesHashes;

        /// <summary>
        /// The hash of file contents for each file in files.
        /// </summary>
        public InputList<string> FilesHashes
        {
            get => _filesHashes ?? (_filesHashes = new InputList<string>());
            set => _filesHashes = value;
        }

        /// <summary>
        /// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The hash of the folder path contents.
        /// </summary>
        [Input("folderPathHash")]
        public Input<string>? FolderPathHash { get; set; }

        /// <summary>
        /// The type of the Custom Job.
        /// </summary>
        [Input("jobType")]
        public Input<string>? JobType { get; set; }

        /// <summary>
        /// The name of the Custom Job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
        /// </summary>
        [Input("resourceBundleId")]
        public Input<string>? ResourceBundleId { get; set; }

        [Input("runtimeParameterValues")]
        private InputList<Inputs.CustomJobRuntimeParameterValueGetArgs>? _runtimeParameterValues;

        /// <summary>
        /// Additional parameters to be injected into a Job at runtime.
        /// </summary>
        public InputList<Inputs.CustomJobRuntimeParameterValueGetArgs> RuntimeParameterValues
        {
            get => _runtimeParameterValues ?? (_runtimeParameterValues = new InputList<Inputs.CustomJobRuntimeParameterValueGetArgs>());
            set => _runtimeParameterValues = value;
        }

        /// <summary>
        /// The schedule configuration for the custom job.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.CustomJobScheduleGetArgs>? Schedule { get; set; }

        /// <summary>
        /// The ID of the schedule associated with the custom job.
        /// </summary>
        [Input("scheduleId")]
        public Input<string>? ScheduleId { get; set; }

        public CustomJobState()
        {
        }
        public static new CustomJobState Empty => new CustomJobState();
    }
}
