// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// registered model from leaderboard
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Datarobot.RegisteredModelFromLeaderboard("example", new()
    ///     {
    ///         ModelId = "111111111111",
    ///         Description = "example description",
    ///         VersionName = "example version name",
    ///         PredictionThreshold = 0.5,
    ///         ComputeAllTsIntervals = true,
    ///         DistributionPredictionModelId = "222222222222",
    ///         UseCaseIds = new[]
    ///         {
    ///             datarobot_use_case.Example.Id,
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["datarobotRegisteredModelFromLeaderboardId"] = example.Id,
    ///         ["datarobotRegisteredModelFromLeaderboardVersionId"] = example.VersionId,
    ///     };
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/registeredModelFromLeaderboard:RegisteredModelFromLeaderboard")]
    public partial class RegisteredModelFromLeaderboard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to compute all time series intervals (1-100 percentiles).
        /// </summary>
        [Output("computeAllTsIntervals")]
        public Output<bool?> ComputeAllTsIntervals { get; private set; } = null!;

        /// <summary>
        /// The description of the Registered Model.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the DataRobot distribution prediction model trained on predictions from the DataRobot model.
        /// </summary>
        [Output("distributionPredictionModelId")]
        public Output<string?> DistributionPredictionModelId { get; private set; } = null!;

        /// <summary>
        /// The ID of the DataRobot model for this Registered Model.
        /// </summary>
        [Output("modelId")]
        public Output<string> ModelId { get; private set; } = null!;

        /// <summary>
        /// The name of the Registered Model.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The prediction threshold for the model.
        /// </summary>
        [Output("predictionThreshold")]
        public Output<double?> PredictionThreshold { get; private set; } = null!;

        /// <summary>
        /// The list of Use Case IDs to add the Registered Model version to.
        /// </summary>
        [Output("useCaseIds")]
        public Output<ImmutableArray<string>> UseCaseIds { get; private set; } = null!;

        /// <summary>
        /// The ID of the Registered Model Version.
        /// </summary>
        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;

        /// <summary>
        /// The name of the Registered Model Version.
        /// </summary>
        [Output("versionName")]
        public Output<string> VersionName { get; private set; } = null!;


        /// <summary>
        /// Create a RegisteredModelFromLeaderboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegisteredModelFromLeaderboard(string name, RegisteredModelFromLeaderboardArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/registeredModelFromLeaderboard:RegisteredModelFromLeaderboard", name, args ?? new RegisteredModelFromLeaderboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegisteredModelFromLeaderboard(string name, Input<string> id, RegisteredModelFromLeaderboardState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/registeredModelFromLeaderboard:RegisteredModelFromLeaderboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegisteredModelFromLeaderboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegisteredModelFromLeaderboard Get(string name, Input<string> id, RegisteredModelFromLeaderboardState? state = null, CustomResourceOptions? options = null)
        {
            return new RegisteredModelFromLeaderboard(name, id, state, options);
        }
    }

    public sealed class RegisteredModelFromLeaderboardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to compute all time series intervals (1-100 percentiles).
        /// </summary>
        [Input("computeAllTsIntervals")]
        public Input<bool>? ComputeAllTsIntervals { get; set; }

        /// <summary>
        /// The description of the Registered Model.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the DataRobot distribution prediction model trained on predictions from the DataRobot model.
        /// </summary>
        [Input("distributionPredictionModelId")]
        public Input<string>? DistributionPredictionModelId { get; set; }

        /// <summary>
        /// The ID of the DataRobot model for this Registered Model.
        /// </summary>
        [Input("modelId", required: true)]
        public Input<string> ModelId { get; set; } = null!;

        /// <summary>
        /// The name of the Registered Model.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The prediction threshold for the model.
        /// </summary>
        [Input("predictionThreshold")]
        public Input<double>? PredictionThreshold { get; set; }

        [Input("useCaseIds")]
        private InputList<string>? _useCaseIds;

        /// <summary>
        /// The list of Use Case IDs to add the Registered Model version to.
        /// </summary>
        public InputList<string> UseCaseIds
        {
            get => _useCaseIds ?? (_useCaseIds = new InputList<string>());
            set => _useCaseIds = value;
        }

        /// <summary>
        /// The name of the Registered Model Version.
        /// </summary>
        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        public RegisteredModelFromLeaderboardArgs()
        {
        }
        public static new RegisteredModelFromLeaderboardArgs Empty => new RegisteredModelFromLeaderboardArgs();
    }

    public sealed class RegisteredModelFromLeaderboardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to compute all time series intervals (1-100 percentiles).
        /// </summary>
        [Input("computeAllTsIntervals")]
        public Input<bool>? ComputeAllTsIntervals { get; set; }

        /// <summary>
        /// The description of the Registered Model.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the DataRobot distribution prediction model trained on predictions from the DataRobot model.
        /// </summary>
        [Input("distributionPredictionModelId")]
        public Input<string>? DistributionPredictionModelId { get; set; }

        /// <summary>
        /// The ID of the DataRobot model for this Registered Model.
        /// </summary>
        [Input("modelId")]
        public Input<string>? ModelId { get; set; }

        /// <summary>
        /// The name of the Registered Model.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The prediction threshold for the model.
        /// </summary>
        [Input("predictionThreshold")]
        public Input<double>? PredictionThreshold { get; set; }

        [Input("useCaseIds")]
        private InputList<string>? _useCaseIds;

        /// <summary>
        /// The list of Use Case IDs to add the Registered Model version to.
        /// </summary>
        public InputList<string> UseCaseIds
        {
            get => _useCaseIds ?? (_useCaseIds = new InputList<string>());
            set => _useCaseIds = value;
        }

        /// <summary>
        /// The ID of the Registered Model Version.
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        /// <summary>
        /// The name of the Registered Model Version.
        /// </summary>
        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        public RegisteredModelFromLeaderboardState()
        {
        }
        public static new RegisteredModelFromLeaderboardState Empty => new RegisteredModelFromLeaderboardState();
    }
}
