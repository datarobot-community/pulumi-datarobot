// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Notebook resource for importing and managing Jupyter notebooks in DataRobot.
    /// 
    /// **NOTE**
    /// 
    /// The synchronization of the file hash is one way. The provider will track changes of the Notebook file on disk
    /// and update _only_ when that changes. If the remote Notebook changes, the provider will not update the local file.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleUseCase = new Datarobot.UseCase("exampleUseCase");
    /// 
    ///     var exampleNotebook = new Datarobot.Notebook("exampleNotebook", new()
    ///     {
    ///         FilePath = "/path/to/your/notebook.ipynb",
    ///         UseCaseId = exampleUseCase.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/notebook:Notebook")]
    public partial class Notebook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The SHA-256 hash of the file contents.
        /// </summary>
        [Output("fileHash")]
        public Output<string> FileHash { get; private set; } = null!;

        /// <summary>
        /// The path to the .ipynb file to import.
        /// </summary>
        [Output("filePath")]
        public Output<string> FilePath { get; private set; } = null!;

        /// <summary>
        /// The name of the Notebook.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The URL to the Notebook.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// The Use Case ID to add the Notebook to.
        /// </summary>
        [Output("useCaseId")]
        public Output<string?> UseCaseId { get; private set; } = null!;


        /// <summary>
        /// Create a Notebook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Notebook(string name, NotebookArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/notebook:Notebook", name, args ?? new NotebookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Notebook(string name, Input<string> id, NotebookState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/notebook:Notebook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Notebook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Notebook Get(string name, Input<string> id, NotebookState? state = null, CustomResourceOptions? options = null)
        {
            return new Notebook(name, id, state, options);
        }
    }

    public sealed class NotebookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path to the .ipynb file to import.
        /// </summary>
        [Input("filePath", required: true)]
        public Input<string> FilePath { get; set; } = null!;

        /// <summary>
        /// The Use Case ID to add the Notebook to.
        /// </summary>
        [Input("useCaseId")]
        public Input<string>? UseCaseId { get; set; }

        public NotebookArgs()
        {
        }
        public static new NotebookArgs Empty => new NotebookArgs();
    }

    public sealed class NotebookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The SHA-256 hash of the file contents.
        /// </summary>
        [Input("fileHash")]
        public Input<string>? FileHash { get; set; }

        /// <summary>
        /// The path to the .ipynb file to import.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        /// <summary>
        /// The name of the Notebook.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The URL to the Notebook.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// The Use Case ID to add the Notebook to.
        /// </summary>
        [Input("useCaseId")]
        public Input<string>? UseCaseId { get; set; }

        public NotebookState()
        {
        }
        public static new NotebookState Empty => new NotebookState();
    }
}
