// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Q&amp;A Application
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleCustomModel = new Datarobot.CustomModel("exampleCustomModel", new()
    ///     {
    ///         Description = "Description for the example custom model",
    ///         TargetType = "Binary",
    ///         TargetName = "my_label",
    ///         BaseEnvironmentId = "65f9b27eab986d30d4c64268",
    ///         Files = new[]
    ///         {
    ///             "example.py",
    ///         },
    ///     });
    /// 
    ///     var exampleRegisteredModel = new Datarobot.RegisteredModel("exampleRegisteredModel", new()
    ///     {
    ///         CustomModelVersionId = exampleCustomModel.VersionId,
    ///         Description = "Description for the example registered model",
    ///     });
    /// 
    ///     var examplePredictionEnvironment = new Datarobot.PredictionEnvironment("examplePredictionEnvironment", new()
    ///     {
    ///         Description = "Description for the example prediction environment",
    ///         Platform = "datarobotServerless",
    ///     });
    /// 
    ///     var exampleDeployment = new Datarobot.Deployment("exampleDeployment", new()
    ///     {
    ///         Label = "An example deployment",
    ///         PredictionEnvironmentId = examplePredictionEnvironment.Id,
    ///         RegisteredModelVersionId = exampleRegisteredModel.VersionId,
    ///     });
    /// 
    ///     var exampleQaApplication = new Datarobot.QaApplication("exampleQaApplication", new()
    ///     {
    ///         DeploymentId = exampleDeployment.Id,
    ///         ExternalAccessEnabled = true,
    ///         ExternalAccessRecipients = new[]
    ///         {
    ///             "recipient@example.com",
    ///         },
    ///         AllowAutoStopping = false,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["datarobotQaApplicationId"] = exampleQaApplication.Id,
    ///         ["datarobotQaApplicationSourceId"] = exampleQaApplication.SourceId,
    ///         ["datarobotQaApplicationSourceVersionId"] = exampleQaApplication.SourceVersionId,
    ///         ["datarobotQaApplicationUrl"] = exampleQaApplication.ApplicationUrl,
    ///     };
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/qaApplication:QaApplication")]
    public partial class QaApplication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether auto stopping is allowed for the Q&amp;A Application.
        /// </summary>
        [Output("allowAutoStopping")]
        public Output<bool> AllowAutoStopping { get; private set; } = null!;

        /// <summary>
        /// The URL of the Q&amp;A Application.
        /// </summary>
        [Output("applicationUrl")]
        public Output<string> ApplicationUrl { get; private set; } = null!;

        /// <summary>
        /// The deployment ID of the Q&amp;A Application.
        /// </summary>
        [Output("deploymentId")]
        public Output<string> DeploymentId { get; private set; } = null!;

        /// <summary>
        /// Whether external access is enabled for the Q&amp;A Application.
        /// </summary>
        [Output("externalAccessEnabled")]
        public Output<bool> ExternalAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The list of external email addresses that have access to the Q&amp;A Application.
        /// </summary>
        [Output("externalAccessRecipients")]
        public Output<ImmutableArray<string>> ExternalAccessRecipients { get; private set; } = null!;

        /// <summary>
        /// The name of the Q&amp;A Application.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Q&amp;A Application Source.
        /// </summary>
        [Output("sourceId")]
        public Output<string> SourceId { get; private set; } = null!;

        /// <summary>
        /// The version ID of the Q&amp;A Application Source.
        /// </summary>
        [Output("sourceVersionId")]
        public Output<string> SourceVersionId { get; private set; } = null!;


        /// <summary>
        /// Create a QaApplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QaApplication(string name, QaApplicationArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/qaApplication:QaApplication", name, args ?? new QaApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private QaApplication(string name, Input<string> id, QaApplicationState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/qaApplication:QaApplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QaApplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QaApplication Get(string name, Input<string> id, QaApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new QaApplication(name, id, state, options);
        }
    }

    public sealed class QaApplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether auto stopping is allowed for the Q&amp;A Application.
        /// </summary>
        [Input("allowAutoStopping")]
        public Input<bool>? AllowAutoStopping { get; set; }

        /// <summary>
        /// The deployment ID of the Q&amp;A Application.
        /// </summary>
        [Input("deploymentId", required: true)]
        public Input<string> DeploymentId { get; set; } = null!;

        /// <summary>
        /// Whether external access is enabled for the Q&amp;A Application.
        /// </summary>
        [Input("externalAccessEnabled")]
        public Input<bool>? ExternalAccessEnabled { get; set; }

        [Input("externalAccessRecipients")]
        private InputList<string>? _externalAccessRecipients;

        /// <summary>
        /// The list of external email addresses that have access to the Q&amp;A Application.
        /// </summary>
        public InputList<string> ExternalAccessRecipients
        {
            get => _externalAccessRecipients ?? (_externalAccessRecipients = new InputList<string>());
            set => _externalAccessRecipients = value;
        }

        /// <summary>
        /// The name of the Q&amp;A Application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public QaApplicationArgs()
        {
        }
        public static new QaApplicationArgs Empty => new QaApplicationArgs();
    }

    public sealed class QaApplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether auto stopping is allowed for the Q&amp;A Application.
        /// </summary>
        [Input("allowAutoStopping")]
        public Input<bool>? AllowAutoStopping { get; set; }

        /// <summary>
        /// The URL of the Q&amp;A Application.
        /// </summary>
        [Input("applicationUrl")]
        public Input<string>? ApplicationUrl { get; set; }

        /// <summary>
        /// The deployment ID of the Q&amp;A Application.
        /// </summary>
        [Input("deploymentId")]
        public Input<string>? DeploymentId { get; set; }

        /// <summary>
        /// Whether external access is enabled for the Q&amp;A Application.
        /// </summary>
        [Input("externalAccessEnabled")]
        public Input<bool>? ExternalAccessEnabled { get; set; }

        [Input("externalAccessRecipients")]
        private InputList<string>? _externalAccessRecipients;

        /// <summary>
        /// The list of external email addresses that have access to the Q&amp;A Application.
        /// </summary>
        public InputList<string> ExternalAccessRecipients
        {
            get => _externalAccessRecipients ?? (_externalAccessRecipients = new InputList<string>());
            set => _externalAccessRecipients = value;
        }

        /// <summary>
        /// The name of the Q&amp;A Application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Q&amp;A Application Source.
        /// </summary>
        [Input("sourceId")]
        public Input<string>? SourceId { get; set; }

        /// <summary>
        /// The version ID of the Q&amp;A Application Source.
        /// </summary>
        [Input("sourceVersionId")]
        public Input<string>? SourceVersionId { get; set; }

        public QaApplicationState()
        {
        }
        public static new QaApplicationState Empty => new QaApplicationState();
    }
}
