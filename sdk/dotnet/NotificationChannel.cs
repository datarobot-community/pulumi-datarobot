// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Notification Channel
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Datarobot.NotificationChannel("example", new()
    ///     {
    ///         ChannelType = "DataRobotUser",
    ///         RelatedEntityId = datarobot_deployment.Example.Id,
    ///         RelatedEntityType = "deployment",
    ///         ContentType = "application/json",
    ///         CustomHeaders = new[]
    ///         {
    ///             new Datarobot.Inputs.NotificationChannelCustomHeaderArgs
    ///             {
    ///                 Name = "header1",
    ///                 Value = "value1",
    ///             },
    ///         },
    ///         DrEntities = new[]
    ///         {
    ///             new Datarobot.Inputs.NotificationChannelDrEntityArgs
    ///             {
    ///                 Id = "11111111111111",
    ///                 Name = "example user",
    ///             },
    ///         },
    ///         LanguageCode = "en",
    ///         EmailAddress = "example@datarobot.com",
    ///         PayloadUrl = "https://example.com",
    ///         SecretToken = "example_secret_token",
    ///         ValidateSsl = true,
    ///         VerificationCode = "11111",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["datarobotNotificationPolicyId"] = datarobot_notification_policy.Example.Id,
    ///     };
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/notificationChannel:NotificationChannel")]
    public partial class NotificationChannel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Type of Notification Channel.
        /// </summary>
        [Output("channelType")]
        public Output<string> ChannelType { get; private set; } = null!;

        /// <summary>
        /// The content type of the messages of the Notification Channel.
        /// </summary>
        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        /// <summary>
        /// Custom headers and their values to be sent in the Notification Channel.
        /// </summary>
        [Output("customHeaders")]
        public Output<ImmutableArray<Outputs.NotificationChannelCustomHeader>> CustomHeaders { get; private set; } = null!;

        /// <summary>
        /// The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.
        /// </summary>
        [Output("drEntities")]
        public Output<ImmutableArray<Outputs.NotificationChannelDrEntity>> DrEntities { get; private set; } = null!;

        /// <summary>
        /// The email address to be used in the Notification Channel.
        /// </summary>
        [Output("emailAddress")]
        public Output<string?> EmailAddress { get; private set; } = null!;

        /// <summary>
        /// The preferred language code.
        /// </summary>
        [Output("languageCode")]
        public Output<string> LanguageCode { get; private set; } = null!;

        /// <summary>
        /// The name of the Notification Channel.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The payload URL of the Notification Channel.
        /// </summary>
        [Output("payloadUrl")]
        public Output<string?> PayloadUrl { get; private set; } = null!;

        /// <summary>
        /// The ID of related entity.
        /// </summary>
        [Output("relatedEntityId")]
        public Output<string> RelatedEntityId { get; private set; } = null!;

        /// <summary>
        /// The type of related entity.
        /// </summary>
        [Output("relatedEntityType")]
        public Output<string> RelatedEntityType { get; private set; } = null!;

        /// <summary>
        /// The secret token to be used for the Notification Channel.
        /// </summary>
        [Output("secretToken")]
        public Output<string?> SecretToken { get; private set; } = null!;

        /// <summary>
        /// Defines if validate ssl or not in the Notification Channel.
        /// </summary>
        [Output("validateSsl")]
        public Output<bool?> ValidateSsl { get; private set; } = null!;

        /// <summary>
        /// Required if the channel type is email.
        /// </summary>
        [Output("verificationCode")]
        public Output<string?> VerificationCode { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationChannel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationChannel(string name, NotificationChannelArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/notificationChannel:NotificationChannel", name, args ?? new NotificationChannelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationChannel(string name, Input<string> id, NotificationChannelState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/notificationChannel:NotificationChannel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationChannel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationChannel Get(string name, Input<string> id, NotificationChannelState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationChannel(name, id, state, options);
        }
    }

    public sealed class NotificationChannelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Type of Notification Channel.
        /// </summary>
        [Input("channelType", required: true)]
        public Input<string> ChannelType { get; set; } = null!;

        /// <summary>
        /// The content type of the messages of the Notification Channel.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("customHeaders")]
        private InputList<Inputs.NotificationChannelCustomHeaderArgs>? _customHeaders;

        /// <summary>
        /// Custom headers and their values to be sent in the Notification Channel.
        /// </summary>
        public InputList<Inputs.NotificationChannelCustomHeaderArgs> CustomHeaders
        {
            get => _customHeaders ?? (_customHeaders = new InputList<Inputs.NotificationChannelCustomHeaderArgs>());
            set => _customHeaders = value;
        }

        [Input("drEntities")]
        private InputList<Inputs.NotificationChannelDrEntityArgs>? _drEntities;

        /// <summary>
        /// The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.
        /// </summary>
        public InputList<Inputs.NotificationChannelDrEntityArgs> DrEntities
        {
            get => _drEntities ?? (_drEntities = new InputList<Inputs.NotificationChannelDrEntityArgs>());
            set => _drEntities = value;
        }

        /// <summary>
        /// The email address to be used in the Notification Channel.
        /// </summary>
        [Input("emailAddress")]
        public Input<string>? EmailAddress { get; set; }

        /// <summary>
        /// The preferred language code.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The name of the Notification Channel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The payload URL of the Notification Channel.
        /// </summary>
        [Input("payloadUrl")]
        public Input<string>? PayloadUrl { get; set; }

        /// <summary>
        /// The ID of related entity.
        /// </summary>
        [Input("relatedEntityId", required: true)]
        public Input<string> RelatedEntityId { get; set; } = null!;

        /// <summary>
        /// The type of related entity.
        /// </summary>
        [Input("relatedEntityType", required: true)]
        public Input<string> RelatedEntityType { get; set; } = null!;

        /// <summary>
        /// The secret token to be used for the Notification Channel.
        /// </summary>
        [Input("secretToken")]
        public Input<string>? SecretToken { get; set; }

        /// <summary>
        /// Defines if validate ssl or not in the Notification Channel.
        /// </summary>
        [Input("validateSsl")]
        public Input<bool>? ValidateSsl { get; set; }

        /// <summary>
        /// Required if the channel type is email.
        /// </summary>
        [Input("verificationCode")]
        public Input<string>? VerificationCode { get; set; }

        public NotificationChannelArgs()
        {
        }
        public static new NotificationChannelArgs Empty => new NotificationChannelArgs();
    }

    public sealed class NotificationChannelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Type of Notification Channel.
        /// </summary>
        [Input("channelType")]
        public Input<string>? ChannelType { get; set; }

        /// <summary>
        /// The content type of the messages of the Notification Channel.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("customHeaders")]
        private InputList<Inputs.NotificationChannelCustomHeaderGetArgs>? _customHeaders;

        /// <summary>
        /// Custom headers and their values to be sent in the Notification Channel.
        /// </summary>
        public InputList<Inputs.NotificationChannelCustomHeaderGetArgs> CustomHeaders
        {
            get => _customHeaders ?? (_customHeaders = new InputList<Inputs.NotificationChannelCustomHeaderGetArgs>());
            set => _customHeaders = value;
        }

        [Input("drEntities")]
        private InputList<Inputs.NotificationChannelDrEntityGetArgs>? _drEntities;

        /// <summary>
        /// The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.
        /// </summary>
        public InputList<Inputs.NotificationChannelDrEntityGetArgs> DrEntities
        {
            get => _drEntities ?? (_drEntities = new InputList<Inputs.NotificationChannelDrEntityGetArgs>());
            set => _drEntities = value;
        }

        /// <summary>
        /// The email address to be used in the Notification Channel.
        /// </summary>
        [Input("emailAddress")]
        public Input<string>? EmailAddress { get; set; }

        /// <summary>
        /// The preferred language code.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The name of the Notification Channel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The payload URL of the Notification Channel.
        /// </summary>
        [Input("payloadUrl")]
        public Input<string>? PayloadUrl { get; set; }

        /// <summary>
        /// The ID of related entity.
        /// </summary>
        [Input("relatedEntityId")]
        public Input<string>? RelatedEntityId { get; set; }

        /// <summary>
        /// The type of related entity.
        /// </summary>
        [Input("relatedEntityType")]
        public Input<string>? RelatedEntityType { get; set; }

        /// <summary>
        /// The secret token to be used for the Notification Channel.
        /// </summary>
        [Input("secretToken")]
        public Input<string>? SecretToken { get; set; }

        /// <summary>
        /// Defines if validate ssl or not in the Notification Channel.
        /// </summary>
        [Input("validateSsl")]
        public Input<bool>? ValidateSsl { get; set; }

        /// <summary>
        /// Required if the channel type is email.
        /// </summary>
        [Input("verificationCode")]
        public Input<string>? VerificationCode { get; set; }

        public NotificationChannelState()
        {
        }
        public static new NotificationChannelState Empty => new NotificationChannelState();
    }
}
