// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Azure Credential
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Datarobot.AzureCredential("example", new()
    ///     {
    ///         AzureConnectionString = "example_connection_string",
    ///         Description = "Description for the example Azure credential",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/azureCredential:AzureCredential")]
    public partial class AzureCredential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The connection string of the Azure Credential.
        /// </summary>
        [Output("azureConnectionString")]
        public Output<string> AzureConnectionString { get; private set; } = null!;

        /// <summary>
        /// The description of the Azure Credential.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the Azure Credential.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a AzureCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzureCredential(string name, AzureCredentialArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/azureCredential:AzureCredential", name, args ?? new AzureCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AzureCredential(string name, Input<string> id, AzureCredentialState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/azureCredential:AzureCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
                AdditionalSecretOutputs =
                {
                    "azureConnectionString",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzureCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzureCredential Get(string name, Input<string> id, AzureCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new AzureCredential(name, id, state, options);
        }
    }

    public sealed class AzureCredentialArgs : global::Pulumi.ResourceArgs
    {
        [Input("azureConnectionString", required: true)]
        private Input<string>? _azureConnectionString;

        /// <summary>
        /// The connection string of the Azure Credential.
        /// </summary>
        public Input<string>? AzureConnectionString
        {
            get => _azureConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _azureConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The description of the Azure Credential.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Azure Credential.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AzureCredentialArgs()
        {
        }
        public static new AzureCredentialArgs Empty => new AzureCredentialArgs();
    }

    public sealed class AzureCredentialState : global::Pulumi.ResourceArgs
    {
        [Input("azureConnectionString")]
        private Input<string>? _azureConnectionString;

        /// <summary>
        /// The connection string of the Azure Credential.
        /// </summary>
        public Input<string>? AzureConnectionString
        {
            get => _azureConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _azureConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The description of the Azure Credential.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Azure Credential.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AzureCredentialState()
        {
        }
        public static new AzureCredentialState Empty => new AzureCredentialState();
    }
}
