// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Custom Job
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Datarobot.CustomMetricJob("example", new()
    ///     {
    ///         Files = new[]
    ///         {
    ///             "file1.py",
    ///             "file2.py",
    ///         },
    ///         EnvironmentId = "65f9b27eab986d30d4c64268",
    ///         Description = "Example Custom Metric Job Description",
    ///         RuntimeParameterValues = new[]
    ///         {
    ///             new Datarobot.Inputs.CustomMetricJobRuntimeParameterValueArgs
    ///             {
    ///                 Key = "EXAMPLE_PARAM",
    ///                 Type = "string",
    ///                 Value = "val",
    ///             },
    ///         },
    ///         EgressNetworkPolicy = "none",
    ///         ResourceBundleId = "cpu.micro",
    ///         Units = "count",
    ///         Directionality = "lowerIsBetter",
    ///         Type = "sum",
    ///         IsModelSpecific = false,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["exampleId"] = example.Id,
    ///     };
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/customMetricJob:CustomMetricJob")]
    public partial class CustomMetricJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the Custom Metric Job.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The directionality of the Custom Metric.
        /// </summary>
        [Output("directionality")]
        public Output<string> Directionality { get; private set; } = null!;

        /// <summary>
        /// The egress network policy for the Job.
        /// </summary>
        [Output("egressNetworkPolicy")]
        public Output<string> EgressNetworkPolicy { get; private set; } = null!;

        /// <summary>
        /// The ID of the environment to use with the Job.
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The ID of the environment version to use with the Job.
        /// </summary>
        [Output("environmentVersionId")]
        public Output<string> EnvironmentVersionId { get; private set; } = null!;

        /// <summary>
        /// List of files to upload, each with a source (local path) and destination (path in job).
        /// </summary>
        [Output("files")]
        public Output<ImmutableArray<Outputs.CustomMetricJobFile>> Files { get; private set; } = null!;

        /// <summary>
        /// The hash of file contents for each file in files.
        /// </summary>
        [Output("filesHashes")]
        public Output<ImmutableArray<string>> FilesHashes { get; private set; } = null!;

        /// <summary>
        /// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
        /// </summary>
        [Output("folderPath")]
        public Output<string?> FolderPath { get; private set; } = null!;

        /// <summary>
        /// The hash of the folder path contents.
        /// </summary>
        [Output("folderPathHash")]
        public Output<string> FolderPathHash { get; private set; } = null!;

        /// <summary>
        /// Determines whether the metric is related to the model or deployment.
        /// </summary>
        [Output("isModelSpecific")]
        public Output<bool> IsModelSpecific { get; private set; } = null!;

        /// <summary>
        /// The name of the Custom Metric Job.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
        /// </summary>
        [Output("resourceBundleId")]
        public Output<string?> ResourceBundleId { get; private set; } = null!;

        /// <summary>
        /// Additional parameters to be injected into a Job at runtime.
        /// </summary>
        [Output("runtimeParameterValues")]
        public Output<ImmutableArray<Outputs.CustomMetricJobRuntimeParameterValue>> RuntimeParameterValues { get; private set; } = null!;

        /// <summary>
        /// Custom metric time bucket size.
        /// </summary>
        [Output("timeStep")]
        public Output<string> TimeStep { get; private set; } = null!;

        /// <summary>
        /// The aggregation type of the custom metric.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The units, or the y-axis label, of the given custom metric.
        /// </summary>
        [Output("units")]
        public Output<string> Units { get; private set; } = null!;


        /// <summary>
        /// Create a CustomMetricJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomMetricJob(string name, CustomMetricJobArgs? args = null, CustomResourceOptions? options = null)
            : base("datarobot:index/customMetricJob:CustomMetricJob", name, args ?? new CustomMetricJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomMetricJob(string name, Input<string> id, CustomMetricJobState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/customMetricJob:CustomMetricJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomMetricJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomMetricJob Get(string name, Input<string> id, CustomMetricJobState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomMetricJob(name, id, state, options);
        }
    }

    public sealed class CustomMetricJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Custom Metric Job.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The directionality of the Custom Metric.
        /// </summary>
        [Input("directionality")]
        public Input<string>? Directionality { get; set; }

        /// <summary>
        /// The egress network policy for the Job.
        /// </summary>
        [Input("egressNetworkPolicy")]
        public Input<string>? EgressNetworkPolicy { get; set; }

        /// <summary>
        /// The ID of the environment to use with the Job.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// The ID of the environment version to use with the Job.
        /// </summary>
        [Input("environmentVersionId")]
        public Input<string>? EnvironmentVersionId { get; set; }

        [Input("files")]
        private InputList<Inputs.CustomMetricJobFileArgs>? _files;

        /// <summary>
        /// List of files to upload, each with a source (local path) and destination (path in job).
        /// </summary>
        public InputList<Inputs.CustomMetricJobFileArgs> Files
        {
            get => _files ?? (_files = new InputList<Inputs.CustomMetricJobFileArgs>());
            set => _files = value;
        }

        /// <summary>
        /// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// Determines whether the metric is related to the model or deployment.
        /// </summary>
        [Input("isModelSpecific")]
        public Input<bool>? IsModelSpecific { get; set; }

        /// <summary>
        /// The name of the Custom Metric Job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
        /// </summary>
        [Input("resourceBundleId")]
        public Input<string>? ResourceBundleId { get; set; }

        [Input("runtimeParameterValues")]
        private InputList<Inputs.CustomMetricJobRuntimeParameterValueArgs>? _runtimeParameterValues;

        /// <summary>
        /// Additional parameters to be injected into a Job at runtime.
        /// </summary>
        public InputList<Inputs.CustomMetricJobRuntimeParameterValueArgs> RuntimeParameterValues
        {
            get => _runtimeParameterValues ?? (_runtimeParameterValues = new InputList<Inputs.CustomMetricJobRuntimeParameterValueArgs>());
            set => _runtimeParameterValues = value;
        }

        /// <summary>
        /// Custom metric time bucket size.
        /// </summary>
        [Input("timeStep")]
        public Input<string>? TimeStep { get; set; }

        /// <summary>
        /// The aggregation type of the custom metric.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The units, or the y-axis label, of the given custom metric.
        /// </summary>
        [Input("units")]
        public Input<string>? Units { get; set; }

        public CustomMetricJobArgs()
        {
        }
        public static new CustomMetricJobArgs Empty => new CustomMetricJobArgs();
    }

    public sealed class CustomMetricJobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Custom Metric Job.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The directionality of the Custom Metric.
        /// </summary>
        [Input("directionality")]
        public Input<string>? Directionality { get; set; }

        /// <summary>
        /// The egress network policy for the Job.
        /// </summary>
        [Input("egressNetworkPolicy")]
        public Input<string>? EgressNetworkPolicy { get; set; }

        /// <summary>
        /// The ID of the environment to use with the Job.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// The ID of the environment version to use with the Job.
        /// </summary>
        [Input("environmentVersionId")]
        public Input<string>? EnvironmentVersionId { get; set; }

        [Input("files")]
        private InputList<Inputs.CustomMetricJobFileGetArgs>? _files;

        /// <summary>
        /// List of files to upload, each with a source (local path) and destination (path in job).
        /// </summary>
        public InputList<Inputs.CustomMetricJobFileGetArgs> Files
        {
            get => _files ?? (_files = new InputList<Inputs.CustomMetricJobFileGetArgs>());
            set => _files = value;
        }

        [Input("filesHashes")]
        private InputList<string>? _filesHashes;

        /// <summary>
        /// The hash of file contents for each file in files.
        /// </summary>
        public InputList<string> FilesHashes
        {
            get => _filesHashes ?? (_filesHashes = new InputList<string>());
            set => _filesHashes = value;
        }

        /// <summary>
        /// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The hash of the folder path contents.
        /// </summary>
        [Input("folderPathHash")]
        public Input<string>? FolderPathHash { get; set; }

        /// <summary>
        /// Determines whether the metric is related to the model or deployment.
        /// </summary>
        [Input("isModelSpecific")]
        public Input<bool>? IsModelSpecific { get; set; }

        /// <summary>
        /// The name of the Custom Metric Job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
        /// </summary>
        [Input("resourceBundleId")]
        public Input<string>? ResourceBundleId { get; set; }

        [Input("runtimeParameterValues")]
        private InputList<Inputs.CustomMetricJobRuntimeParameterValueGetArgs>? _runtimeParameterValues;

        /// <summary>
        /// Additional parameters to be injected into a Job at runtime.
        /// </summary>
        public InputList<Inputs.CustomMetricJobRuntimeParameterValueGetArgs> RuntimeParameterValues
        {
            get => _runtimeParameterValues ?? (_runtimeParameterValues = new InputList<Inputs.CustomMetricJobRuntimeParameterValueGetArgs>());
            set => _runtimeParameterValues = value;
        }

        /// <summary>
        /// Custom metric time bucket size.
        /// </summary>
        [Input("timeStep")]
        public Input<string>? TimeStep { get; set; }

        /// <summary>
        /// The aggregation type of the custom metric.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The units, or the y-axis label, of the given custom metric.
        /// </summary>
        [Input("units")]
        public Input<string>? Units { get; set; }

        public CustomMetricJobState()
        {
        }
        public static new CustomMetricJobState Empty => new CustomMetricJobState();
    }
}
