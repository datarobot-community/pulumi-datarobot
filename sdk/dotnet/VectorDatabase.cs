// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Vector database
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleUseCase = new Datarobot.UseCase("exampleUseCase", new()
    ///     {
    ///         Description = "Description for the example use case",
    ///     });
    /// 
    ///     var exampleDatasetFromFile = new Datarobot.DatasetFromFile("exampleDatasetFromFile", new()
    ///     {
    ///         FilePath = "[Path to file to upload]",
    ///         UseCaseIds = new[]
    ///         {
    ///             exampleUseCase.Id,
    ///         },
    ///     });
    /// 
    ///     var exampleVectorDatabase = new Datarobot.VectorDatabase("exampleVectorDatabase", new()
    ///     {
    ///         UseCaseId = exampleUseCase.Id,
    ///         DatasetId = exampleDatasetFromFile.Id,
    ///     });
    /// 
    ///     // Optional
    ///     // chunking_parameters = {
    ///     //   chunk_overlap_percentage = 0
    ///     //   chunk_size               = 512
    ///     //   chunking_method          = "recursive"
    ///     //   embedding_model          = "jinaai/jina-embedding-t-en-v1"
    ///     //   separators               = ["\n", " "]
    ///     // }
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["exampleId"] = exampleVectorDatabase.Id,
    ///     };
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/vectorDatabase:VectorDatabase")]
    public partial class VectorDatabase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The chunking parameters for the Model.
        /// </summary>
        [Output("chunkingParameters")]
        public Output<Outputs.VectorDatabaseChunkingParameters> ChunkingParameters { get; private set; } = null!;

        /// <summary>
        /// The id of the Vector Database.
        /// </summary>
        [Output("datasetId")]
        public Output<string> DatasetId { get; private set; } = null!;

        /// <summary>
        /// The name of the VectorDatabase.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The id of the Use Case.
        /// </summary>
        [Output("useCaseId")]
        public Output<string> UseCaseId { get; private set; } = null!;

        /// <summary>
        /// The version of the VectorDatabase.
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a VectorDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VectorDatabase(string name, VectorDatabaseArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/vectorDatabase:VectorDatabase", name, args ?? new VectorDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VectorDatabase(string name, Input<string> id, VectorDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/vectorDatabase:VectorDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VectorDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VectorDatabase Get(string name, Input<string> id, VectorDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new VectorDatabase(name, id, state, options);
        }
    }

    public sealed class VectorDatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The chunking parameters for the Model.
        /// </summary>
        [Input("chunkingParameters")]
        public Input<Inputs.VectorDatabaseChunkingParametersArgs>? ChunkingParameters { get; set; }

        /// <summary>
        /// The id of the Vector Database.
        /// </summary>
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        /// <summary>
        /// The name of the VectorDatabase.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the Use Case.
        /// </summary>
        [Input("useCaseId", required: true)]
        public Input<string> UseCaseId { get; set; } = null!;

        public VectorDatabaseArgs()
        {
        }
        public static new VectorDatabaseArgs Empty => new VectorDatabaseArgs();
    }

    public sealed class VectorDatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The chunking parameters for the Model.
        /// </summary>
        [Input("chunkingParameters")]
        public Input<Inputs.VectorDatabaseChunkingParametersGetArgs>? ChunkingParameters { get; set; }

        /// <summary>
        /// The id of the Vector Database.
        /// </summary>
        [Input("datasetId")]
        public Input<string>? DatasetId { get; set; }

        /// <summary>
        /// The name of the VectorDatabase.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the Use Case.
        /// </summary>
        [Input("useCaseId")]
        public Input<string>? UseCaseId { get; set; }

        /// <summary>
        /// The version of the VectorDatabase.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public VectorDatabaseState()
        {
        }
        public static new VectorDatabaseState Empty => new VectorDatabaseState();
    }
}
