// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Resource for managing OAuth providers in DataRobot. This resource allows you to create, read, update, and delete OAuth provider configurations.
    /// </summary>
    [DatarobotResourceType("datarobot:index/appOauth:AppOauth")]
    public partial class AppOauth : global::Pulumi.CustomResource
    {
        /// <summary>
        /// OAuth client ID.
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// OAuth client secret.
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// Name of the OAuth provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization ID associated with the OAuth provider.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Secure config ID for the OAuth provider.
        /// </summary>
        [Output("secureConfigId")]
        public Output<string> SecureConfigId { get; private set; } = null!;

        /// <summary>
        /// Status of the OAuth provider.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Type of the OAuth provider, e.g., 'google', 'box', etc.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AppOauth resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppOauth(string name, AppOauthArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/appOauth:AppOauth", name, args ?? new AppOauthArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppOauth(string name, Input<string> id, AppOauthState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/appOauth:AppOauth", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
                AdditionalSecretOutputs =
                {
                    "clientId",
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppOauth resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppOauth Get(string name, Input<string> id, AppOauthState? state = null, CustomResourceOptions? options = null)
        {
            return new AppOauth(name, id, state, options);
        }
    }

    public sealed class AppOauthArgs : global::Pulumi.ResourceArgs
    {
        [Input("clientId", required: true)]
        private Input<string>? _clientId;

        /// <summary>
        /// OAuth client ID.
        /// </summary>
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientSecret", required: true)]
        private Input<string>? _clientSecret;

        /// <summary>
        /// OAuth client secret.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the OAuth provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of the OAuth provider, e.g., 'google', 'box', etc.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public AppOauthArgs()
        {
        }
        public static new AppOauthArgs Empty => new AppOauthArgs();
    }

    public sealed class AppOauthState : global::Pulumi.ResourceArgs
    {
        [Input("clientId")]
        private Input<string>? _clientId;

        /// <summary>
        /// OAuth client ID.
        /// </summary>
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// OAuth client secret.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the OAuth provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization ID associated with the OAuth provider.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Secure config ID for the OAuth provider.
        /// </summary>
        [Input("secureConfigId")]
        public Input<string>? SecureConfigId { get; set; }

        /// <summary>
        /// Status of the OAuth provider.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Type of the OAuth provider, e.g., 'google', 'box', etc.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AppOauthState()
        {
        }
        public static new AppOauthState Empty => new AppOauthState();
    }
}
