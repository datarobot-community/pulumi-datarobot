// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Data Set from Data Source.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Datarobot.DatasetFromDatasource("example", new()
    ///     {
    ///         DatasourceId = datarobot_datasource.Example.Id,
    ///         CredentialId = datarobot_credential.Example.Id,
    ///         DoSnapshot = false,
    ///         PersistDataAfterIngestion = false,
    ///         UseKerberos = true,
    ///         Categories = new[]
    ///         {
    ///             "TRAINING",
    ///         },
    ///         UseCaseIds = new[]
    ///         {
    ///             datarobot_use_case.Example.Id,
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["exampleId"] = example.Id,
    ///     };
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/datasetFromDatasource:DatasetFromDatasource")]
    public partial class DatasetFromDatasource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An array of strings describing the intended use of the dataset.
        /// </summary>
        [Output("categories")]
        public Output<ImmutableArray<string>> Categories { get; private set; } = null!;

        /// <summary>
        /// The ID of the set of credentials to use.
        /// </summary>
        [Output("credentialId")]
        public Output<string> CredentialId { get; private set; } = null!;

        /// <summary>
        /// The ID for the DataSource to use as the source of data.
        /// </summary>
        [Output("dataSourceId")]
        public Output<string> DataSourceId { get; private set; } = null!;

        /// <summary>
        /// If unset, uses the server default: True. If true, creates a snapshot dataset; if false, creates a remote dataset.
        /// </summary>
        [Output("doSnapshot")]
        public Output<bool> DoSnapshot { get; private set; } = null!;

        /// <summary>
        /// If unset, uses the server default: True. If true, will enforce saving all data (for download and sampling) and will allow a user to view extended data profile (which includes data statistics like min/max/median/mean, histogram, etc.). If false, will not enforce saving data. The data schema (feature names and types) still will be available.
        /// </summary>
        [Output("persistDataAfterIngestion")]
        public Output<bool> PersistDataAfterIngestion { get; private set; } = null!;

        /// <summary>
        /// The number of rows fetched during dataset registration.
        /// </summary>
        [Output("sampleSizeRows")]
        public Output<int?> SampleSizeRows { get; private set; } = null!;

        /// <summary>
        /// The list of Use Case IDs to add the Dataset to.
        /// </summary>
        [Output("useCaseIds")]
        public Output<ImmutableArray<string>> UseCaseIds { get; private set; } = null!;

        /// <summary>
        /// If unset, uses the server default: False. If true, use kerberos authentication for database authentication.
        /// </summary>
        [Output("useKerberos")]
        public Output<bool> UseKerberos { get; private set; } = null!;


        /// <summary>
        /// Create a DatasetFromDatasource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatasetFromDatasource(string name, DatasetFromDatasourceArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/datasetFromDatasource:DatasetFromDatasource", name, args ?? new DatasetFromDatasourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatasetFromDatasource(string name, Input<string> id, DatasetFromDatasourceState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/datasetFromDatasource:DatasetFromDatasource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatasetFromDatasource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatasetFromDatasource Get(string name, Input<string> id, DatasetFromDatasourceState? state = null, CustomResourceOptions? options = null)
        {
            return new DatasetFromDatasource(name, id, state, options);
        }
    }

    public sealed class DatasetFromDatasourceArgs : global::Pulumi.ResourceArgs
    {
        [Input("categories")]
        private InputList<string>? _categories;

        /// <summary>
        /// An array of strings describing the intended use of the dataset.
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        /// <summary>
        /// The ID of the set of credentials to use.
        /// </summary>
        [Input("credentialId", required: true)]
        public Input<string> CredentialId { get; set; } = null!;

        /// <summary>
        /// The ID for the DataSource to use as the source of data.
        /// </summary>
        [Input("dataSourceId", required: true)]
        public Input<string> DataSourceId { get; set; } = null!;

        /// <summary>
        /// If unset, uses the server default: True. If true, creates a snapshot dataset; if false, creates a remote dataset.
        /// </summary>
        [Input("doSnapshot")]
        public Input<bool>? DoSnapshot { get; set; }

        /// <summary>
        /// If unset, uses the server default: True. If true, will enforce saving all data (for download and sampling) and will allow a user to view extended data profile (which includes data statistics like min/max/median/mean, histogram, etc.). If false, will not enforce saving data. The data schema (feature names and types) still will be available.
        /// </summary>
        [Input("persistDataAfterIngestion")]
        public Input<bool>? PersistDataAfterIngestion { get; set; }

        /// <summary>
        /// The number of rows fetched during dataset registration.
        /// </summary>
        [Input("sampleSizeRows")]
        public Input<int>? SampleSizeRows { get; set; }

        [Input("useCaseIds")]
        private InputList<string>? _useCaseIds;

        /// <summary>
        /// The list of Use Case IDs to add the Dataset to.
        /// </summary>
        public InputList<string> UseCaseIds
        {
            get => _useCaseIds ?? (_useCaseIds = new InputList<string>());
            set => _useCaseIds = value;
        }

        /// <summary>
        /// If unset, uses the server default: False. If true, use kerberos authentication for database authentication.
        /// </summary>
        [Input("useKerberos")]
        public Input<bool>? UseKerberos { get; set; }

        public DatasetFromDatasourceArgs()
        {
        }
        public static new DatasetFromDatasourceArgs Empty => new DatasetFromDatasourceArgs();
    }

    public sealed class DatasetFromDatasourceState : global::Pulumi.ResourceArgs
    {
        [Input("categories")]
        private InputList<string>? _categories;

        /// <summary>
        /// An array of strings describing the intended use of the dataset.
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        /// <summary>
        /// The ID of the set of credentials to use.
        /// </summary>
        [Input("credentialId")]
        public Input<string>? CredentialId { get; set; }

        /// <summary>
        /// The ID for the DataSource to use as the source of data.
        /// </summary>
        [Input("dataSourceId")]
        public Input<string>? DataSourceId { get; set; }

        /// <summary>
        /// If unset, uses the server default: True. If true, creates a snapshot dataset; if false, creates a remote dataset.
        /// </summary>
        [Input("doSnapshot")]
        public Input<bool>? DoSnapshot { get; set; }

        /// <summary>
        /// If unset, uses the server default: True. If true, will enforce saving all data (for download and sampling) and will allow a user to view extended data profile (which includes data statistics like min/max/median/mean, histogram, etc.). If false, will not enforce saving data. The data schema (feature names and types) still will be available.
        /// </summary>
        [Input("persistDataAfterIngestion")]
        public Input<bool>? PersistDataAfterIngestion { get; set; }

        /// <summary>
        /// The number of rows fetched during dataset registration.
        /// </summary>
        [Input("sampleSizeRows")]
        public Input<int>? SampleSizeRows { get; set; }

        [Input("useCaseIds")]
        private InputList<string>? _useCaseIds;

        /// <summary>
        /// The list of Use Case IDs to add the Dataset to.
        /// </summary>
        public InputList<string> UseCaseIds
        {
            get => _useCaseIds ?? (_useCaseIds = new InputList<string>());
            set => _useCaseIds = value;
        }

        /// <summary>
        /// If unset, uses the server default: False. If true, use kerberos authentication for database authentication.
        /// </summary>
        [Input("useKerberos")]
        public Input<bool>? UseKerberos { get; set; }

        public DatasetFromDatasourceState()
        {
        }
        public static new DatasetFromDatasourceState Empty => new DatasetFromDatasourceState();
    }
}
