// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    public static class GetGlobalModel
    {
        /// <summary>
        /// Global Model
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datarobot = Pulumi.Datarobot;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dummyBinaryClassification = Datarobot.GetGlobalModel.Invoke(new()
        ///     {
        ///         Name = "[DataRobot] Dummy Binary Classification",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGlobalModelResult> InvokeAsync(GetGlobalModelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGlobalModelResult>("datarobot:index/getGlobalModel:getGlobalModel", args ?? new GetGlobalModelArgs(), options.WithDefaults());

        /// <summary>
        /// Global Model
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datarobot = Pulumi.Datarobot;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dummyBinaryClassification = Datarobot.GetGlobalModel.Invoke(new()
        ///     {
        ///         Name = "[DataRobot] Dummy Binary Classification",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGlobalModelResult> Invoke(GetGlobalModelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGlobalModelResult>("datarobot:index/getGlobalModel:getGlobalModel", args ?? new GetGlobalModelInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Global Model
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datarobot = Pulumi.Datarobot;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dummyBinaryClassification = Datarobot.GetGlobalModel.Invoke(new()
        ///     {
        ///         Name = "[DataRobot] Dummy Binary Classification",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGlobalModelResult> Invoke(GetGlobalModelInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGlobalModelResult>("datarobot:index/getGlobalModel:getGlobalModel", args ?? new GetGlobalModelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGlobalModelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Registered Model.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetGlobalModelArgs()
        {
        }
        public static new GetGlobalModelArgs Empty => new GetGlobalModelArgs();
    }

    public sealed class GetGlobalModelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Registered Model.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetGlobalModelInvokeArgs()
        {
        }
        public static new GetGlobalModelInvokeArgs Empty => new GetGlobalModelInvokeArgs();
    }


    [OutputType]
    public sealed class GetGlobalModelResult
    {
        /// <summary>
        /// The ID of the Global Model.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the Registered Model.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the Global Model Version.
        /// </summary>
        public readonly string VersionId;

        [OutputConstructor]
        private GetGlobalModelResult(
            string id,

            string name,

            string versionId)
        {
            Id = id;
            Name = name;
            VersionId = versionId;
        }
    }
}
