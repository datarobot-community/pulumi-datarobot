// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Execution Environment
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Datarobot.ExecutionEnvironment("example", new()
    ///     {
    ///         ProgrammingLanguage = "python",
    ///         Description = "Example Execution Environment Description",
    ///         DockerContextPath = "docker_context.zip",
    ///         DockerImage = "docker_image.tar",
    ///         UseCases = new[]
    ///         {
    ///             "customModel",
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["datarobotExecutionEnvironmentId"] = example.Id,
    ///         ["datarobotExecutionEnvironmentVersionId"] = example.VersionId,
    ///     };
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/executionEnvironment:ExecutionEnvironment")]
    public partial class ExecutionEnvironment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The status of the Execution Environment version build.
        /// </summary>
        [Output("buildStatus")]
        public Output<string> BuildStatus { get; private set; } = null!;

        /// <summary>
        /// The description of the Execution Environment.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The hash of the docker context contents.
        /// </summary>
        [Output("dockerContextHash")]
        public Output<string> DockerContextHash { get; private set; } = null!;

        /// <summary>
        /// The path to a docker context archive or folder
        /// </summary>
        [Output("dockerContextPath")]
        public Output<string?> DockerContextPath { get; private set; } = null!;

        /// <summary>
        /// A prebuilt environment image saved as a tarball using the Docker save command.
        /// </summary>
        [Output("dockerImage")]
        public Output<string?> DockerImage { get; private set; } = null!;

        /// <summary>
        /// The hash of the docker image file
        /// </summary>
        [Output("dockerImageHash")]
        public Output<string> DockerImageHash { get; private set; } = null!;

        /// <summary>
        /// The name of the Execution Environment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The programming language of the Execution Environment.
        /// </summary>
        [Output("programmingLanguage")]
        public Output<string> ProgrammingLanguage { get; private set; } = null!;

        /// <summary>
        /// The list of Use Cases that the Execution Environment supports.
        /// </summary>
        [Output("useCases")]
        public Output<ImmutableArray<string>> UseCases { get; private set; } = null!;

        /// <summary>
        /// The description of the Execution Environment version.
        /// </summary>
        [Output("versionDescription")]
        public Output<string?> VersionDescription { get; private set; } = null!;

        /// <summary>
        /// The ID of the Execution Environment Version.
        /// </summary>
        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;


        /// <summary>
        /// Create a ExecutionEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExecutionEnvironment(string name, ExecutionEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/executionEnvironment:ExecutionEnvironment", name, args ?? new ExecutionEnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExecutionEnvironment(string name, Input<string> id, ExecutionEnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/executionEnvironment:ExecutionEnvironment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExecutionEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExecutionEnvironment Get(string name, Input<string> id, ExecutionEnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ExecutionEnvironment(name, id, state, options);
        }
    }

    public sealed class ExecutionEnvironmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Execution Environment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The path to a docker context archive or folder
        /// </summary>
        [Input("dockerContextPath")]
        public Input<string>? DockerContextPath { get; set; }

        /// <summary>
        /// A prebuilt environment image saved as a tarball using the Docker save command.
        /// </summary>
        [Input("dockerImage")]
        public Input<string>? DockerImage { get; set; }

        /// <summary>
        /// The name of the Execution Environment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The programming language of the Execution Environment.
        /// </summary>
        [Input("programmingLanguage", required: true)]
        public Input<string> ProgrammingLanguage { get; set; } = null!;

        [Input("useCases", required: true)]
        private InputList<string>? _useCases;

        /// <summary>
        /// The list of Use Cases that the Execution Environment supports.
        /// </summary>
        public InputList<string> UseCases
        {
            get => _useCases ?? (_useCases = new InputList<string>());
            set => _useCases = value;
        }

        /// <summary>
        /// The description of the Execution Environment version.
        /// </summary>
        [Input("versionDescription")]
        public Input<string>? VersionDescription { get; set; }

        public ExecutionEnvironmentArgs()
        {
        }
        public static new ExecutionEnvironmentArgs Empty => new ExecutionEnvironmentArgs();
    }

    public sealed class ExecutionEnvironmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The status of the Execution Environment version build.
        /// </summary>
        [Input("buildStatus")]
        public Input<string>? BuildStatus { get; set; }

        /// <summary>
        /// The description of the Execution Environment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The hash of the docker context contents.
        /// </summary>
        [Input("dockerContextHash")]
        public Input<string>? DockerContextHash { get; set; }

        /// <summary>
        /// The path to a docker context archive or folder
        /// </summary>
        [Input("dockerContextPath")]
        public Input<string>? DockerContextPath { get; set; }

        /// <summary>
        /// A prebuilt environment image saved as a tarball using the Docker save command.
        /// </summary>
        [Input("dockerImage")]
        public Input<string>? DockerImage { get; set; }

        /// <summary>
        /// The hash of the docker image file
        /// </summary>
        [Input("dockerImageHash")]
        public Input<string>? DockerImageHash { get; set; }

        /// <summary>
        /// The name of the Execution Environment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The programming language of the Execution Environment.
        /// </summary>
        [Input("programmingLanguage")]
        public Input<string>? ProgrammingLanguage { get; set; }

        [Input("useCases")]
        private InputList<string>? _useCases;

        /// <summary>
        /// The list of Use Cases that the Execution Environment supports.
        /// </summary>
        public InputList<string> UseCases
        {
            get => _useCases ?? (_useCases = new InputList<string>());
            set => _useCases = value;
        }

        /// <summary>
        /// The description of the Execution Environment version.
        /// </summary>
        [Input("versionDescription")]
        public Input<string>? VersionDescription { get; set; }

        /// <summary>
        /// The ID of the Execution Environment Version.
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        public ExecutionEnvironmentState()
        {
        }
        public static new ExecutionEnvironmentState Empty => new ExecutionEnvironmentState();
    }
}
