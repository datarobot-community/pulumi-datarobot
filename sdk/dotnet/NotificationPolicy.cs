// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DataRobotPulumi.Datarobot
{
    /// <summary>
    /// Notification Policy
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datarobot = DataRobotPulumi.Datarobot;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Datarobot.NotificationPolicy("example", new()
    ///     {
    ///         ChannelId = "11111111111111",
    ///         ChannelScope = "template",
    ///         EventGroup = "model_deployments.all",
    ///         RelatedEntityId = datarobot_deployment.Example.Id,
    ///         RelatedEntityType = "deployment",
    ///         EventType = "model_deployments.accuracy_green",
    ///         MaximalFrequency = "PT1H",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["datarobotNotificationPolicyId"] = example.Id,
    ///     };
    /// });
    /// ```
    /// </summary>
    [DatarobotResourceType("datarobot:index/notificationPolicy:NotificationPolicy")]
    public partial class NotificationPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not the Notification Policy is active.
        /// </summary>
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// The Channel ID of the Notification Policy.
        /// </summary>
        [Output("channelId")]
        public Output<string> ChannelId { get; private set; } = null!;

        /// <summary>
        /// The Channel scope of the Notification Policy.
        /// </summary>
        [Output("channelScope")]
        public Output<string> ChannelScope { get; private set; } = null!;

        /// <summary>
        /// The group of the events that trigger the Notification.
        /// </summary>
        [Output("eventGroup")]
        public Output<string?> EventGroup { get; private set; } = null!;

        /// <summary>
        /// The group of the event that triggers the Notification.
        /// </summary>
        [Output("eventType")]
        public Output<string?> EventType { get; private set; } = null!;

        /// <summary>
        /// The maximal frequency between policy runs in ISO 8601 duration string.
        /// </summary>
        [Output("maximalFrequency")]
        public Output<string?> MaximalFrequency { get; private set; } = null!;

        /// <summary>
        /// The name of the Notification Policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the related entity for the Notification Policy.
        /// </summary>
        [Output("relatedEntityId")]
        public Output<string> RelatedEntityId { get; private set; } = null!;

        /// <summary>
        /// The Type of the related entity for the Notification Policy.
        /// </summary>
        [Output("relatedEntityType")]
        public Output<string> RelatedEntityType { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationPolicy(string name, NotificationPolicyArgs args, CustomResourceOptions? options = null)
            : base("datarobot:index/notificationPolicy:NotificationPolicy", name, args ?? new NotificationPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationPolicy(string name, Input<string> id, NotificationPolicyState? state = null, CustomResourceOptions? options = null)
            : base("datarobot:index/notificationPolicy:NotificationPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/datarobot-community/pulumi-datarobot",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationPolicy Get(string name, Input<string> id, NotificationPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationPolicy(name, id, state, options);
        }
    }

    public sealed class NotificationPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not the Notification Policy is active.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// The Channel ID of the Notification Policy.
        /// </summary>
        [Input("channelId", required: true)]
        public Input<string> ChannelId { get; set; } = null!;

        /// <summary>
        /// The Channel scope of the Notification Policy.
        /// </summary>
        [Input("channelScope", required: true)]
        public Input<string> ChannelScope { get; set; } = null!;

        /// <summary>
        /// The group of the events that trigger the Notification.
        /// </summary>
        [Input("eventGroup")]
        public Input<string>? EventGroup { get; set; }

        /// <summary>
        /// The group of the event that triggers the Notification.
        /// </summary>
        [Input("eventType")]
        public Input<string>? EventType { get; set; }

        /// <summary>
        /// The maximal frequency between policy runs in ISO 8601 duration string.
        /// </summary>
        [Input("maximalFrequency")]
        public Input<string>? MaximalFrequency { get; set; }

        /// <summary>
        /// The name of the Notification Policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the related entity for the Notification Policy.
        /// </summary>
        [Input("relatedEntityId", required: true)]
        public Input<string> RelatedEntityId { get; set; } = null!;

        /// <summary>
        /// The Type of the related entity for the Notification Policy.
        /// </summary>
        [Input("relatedEntityType", required: true)]
        public Input<string> RelatedEntityType { get; set; } = null!;

        public NotificationPolicyArgs()
        {
        }
        public static new NotificationPolicyArgs Empty => new NotificationPolicyArgs();
    }

    public sealed class NotificationPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not the Notification Policy is active.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// The Channel ID of the Notification Policy.
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// The Channel scope of the Notification Policy.
        /// </summary>
        [Input("channelScope")]
        public Input<string>? ChannelScope { get; set; }

        /// <summary>
        /// The group of the events that trigger the Notification.
        /// </summary>
        [Input("eventGroup")]
        public Input<string>? EventGroup { get; set; }

        /// <summary>
        /// The group of the event that triggers the Notification.
        /// </summary>
        [Input("eventType")]
        public Input<string>? EventType { get; set; }

        /// <summary>
        /// The maximal frequency between policy runs in ISO 8601 duration string.
        /// </summary>
        [Input("maximalFrequency")]
        public Input<string>? MaximalFrequency { get; set; }

        /// <summary>
        /// The name of the Notification Policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the related entity for the Notification Policy.
        /// </summary>
        [Input("relatedEntityId")]
        public Input<string>? RelatedEntityId { get; set; }

        /// <summary>
        /// The Type of the related entity for the Notification Policy.
        /// </summary>
        [Input("relatedEntityType")]
        public Input<string>? RelatedEntityType { get; set; }

        public NotificationPolicyState()
        {
        }
        public static new NotificationPolicyState Empty => new NotificationPolicyState();
    }
}
