// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Deployment Retraining Policy
 */
export class DeploymentRetrainingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentRetrainingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentRetrainingPolicyState, opts?: pulumi.CustomResourceOptions): DeploymentRetrainingPolicy {
        return new DeploymentRetrainingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/deploymentRetrainingPolicy:DeploymentRetrainingPolicy';

    /**
     * Returns true if the given object is an instance of DeploymentRetrainingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeploymentRetrainingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentRetrainingPolicy.__pulumiType;
    }

    /**
     * The the action to take on the resultant new model.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Options for projects used to build new models.
     */
    public readonly autopilotOptions!: pulumi.Output<outputs.DeploymentRetrainingPolicyAutopilotOptions>;
    /**
     * The ID of the Deployment for the Retraining Policy.
     */
    public readonly deploymentId!: pulumi.Output<string>;
    /**
     * The description of the Retraining Policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The feature list strategy used for modeling.
     */
    public readonly featureListStrategy!: pulumi.Output<string>;
    /**
     * Determines how the new model is selected when the retraining policy runs.
     */
    public readonly modelSelectionStrategy!: pulumi.Output<string>;
    /**
     * The name of the Retraining Policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Options for projects used to build new models.
     */
    public readonly projectOptions!: pulumi.Output<outputs.DeploymentRetrainingPolicyProjectOptions>;
    /**
     * The project option strategy used for modeling.
     */
    public readonly projectOptionsStrategy!: pulumi.Output<string>;
    /**
     * Time Series project options used to build new models.
     */
    public readonly timeSeriesOptions!: pulumi.Output<outputs.DeploymentRetrainingPolicyTimeSeriesOptions | undefined>;
    /**
     * Retraining policy trigger.
     */
    public readonly trigger!: pulumi.Output<outputs.DeploymentRetrainingPolicyTrigger | undefined>;
    /**
     * The ID of the use case to which the retraining policy belongs.
     */
    public readonly useCaseId!: pulumi.Output<string | undefined>;

    /**
     * Create a DeploymentRetrainingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentRetrainingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentRetrainingPolicyArgs | DeploymentRetrainingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentRetrainingPolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["autopilotOptions"] = state ? state.autopilotOptions : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["featureListStrategy"] = state ? state.featureListStrategy : undefined;
            resourceInputs["modelSelectionStrategy"] = state ? state.modelSelectionStrategy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectOptions"] = state ? state.projectOptions : undefined;
            resourceInputs["projectOptionsStrategy"] = state ? state.projectOptionsStrategy : undefined;
            resourceInputs["timeSeriesOptions"] = state ? state.timeSeriesOptions : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
            resourceInputs["useCaseId"] = state ? state.useCaseId : undefined;
        } else {
            const args = argsOrState as DeploymentRetrainingPolicyArgs | undefined;
            if ((!args || args.deploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["autopilotOptions"] = args ? args.autopilotOptions : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["featureListStrategy"] = args ? args.featureListStrategy : undefined;
            resourceInputs["modelSelectionStrategy"] = args ? args.modelSelectionStrategy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectOptions"] = args ? args.projectOptions : undefined;
            resourceInputs["projectOptionsStrategy"] = args ? args.projectOptionsStrategy : undefined;
            resourceInputs["timeSeriesOptions"] = args ? args.timeSeriesOptions : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
            resourceInputs["useCaseId"] = args ? args.useCaseId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeploymentRetrainingPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeploymentRetrainingPolicy resources.
 */
export interface DeploymentRetrainingPolicyState {
    /**
     * The the action to take on the resultant new model.
     */
    action?: pulumi.Input<string>;
    /**
     * Options for projects used to build new models.
     */
    autopilotOptions?: pulumi.Input<inputs.DeploymentRetrainingPolicyAutopilotOptions>;
    /**
     * The ID of the Deployment for the Retraining Policy.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * The description of the Retraining Policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The feature list strategy used for modeling.
     */
    featureListStrategy?: pulumi.Input<string>;
    /**
     * Determines how the new model is selected when the retraining policy runs.
     */
    modelSelectionStrategy?: pulumi.Input<string>;
    /**
     * The name of the Retraining Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Options for projects used to build new models.
     */
    projectOptions?: pulumi.Input<inputs.DeploymentRetrainingPolicyProjectOptions>;
    /**
     * The project option strategy used for modeling.
     */
    projectOptionsStrategy?: pulumi.Input<string>;
    /**
     * Time Series project options used to build new models.
     */
    timeSeriesOptions?: pulumi.Input<inputs.DeploymentRetrainingPolicyTimeSeriesOptions>;
    /**
     * Retraining policy trigger.
     */
    trigger?: pulumi.Input<inputs.DeploymentRetrainingPolicyTrigger>;
    /**
     * The ID of the use case to which the retraining policy belongs.
     */
    useCaseId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeploymentRetrainingPolicy resource.
 */
export interface DeploymentRetrainingPolicyArgs {
    /**
     * The the action to take on the resultant new model.
     */
    action?: pulumi.Input<string>;
    /**
     * Options for projects used to build new models.
     */
    autopilotOptions?: pulumi.Input<inputs.DeploymentRetrainingPolicyAutopilotOptions>;
    /**
     * The ID of the Deployment for the Retraining Policy.
     */
    deploymentId: pulumi.Input<string>;
    /**
     * The description of the Retraining Policy.
     */
    description: pulumi.Input<string>;
    /**
     * The feature list strategy used for modeling.
     */
    featureListStrategy?: pulumi.Input<string>;
    /**
     * Determines how the new model is selected when the retraining policy runs.
     */
    modelSelectionStrategy?: pulumi.Input<string>;
    /**
     * The name of the Retraining Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Options for projects used to build new models.
     */
    projectOptions?: pulumi.Input<inputs.DeploymentRetrainingPolicyProjectOptions>;
    /**
     * The project option strategy used for modeling.
     */
    projectOptionsStrategy?: pulumi.Input<string>;
    /**
     * Time Series project options used to build new models.
     */
    timeSeriesOptions?: pulumi.Input<inputs.DeploymentRetrainingPolicyTimeSeriesOptions>;
    /**
     * Retraining policy trigger.
     */
    trigger?: pulumi.Input<inputs.DeploymentRetrainingPolicyTrigger>;
    /**
     * The ID of the use case to which the retraining policy belongs.
     */
    useCaseId?: pulumi.Input<string>;
}
