// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApiTokenCredentialArgs, ApiTokenCredentialState } from "./apiTokenCredential";
export type ApiTokenCredential = import("./apiTokenCredential").ApiTokenCredential;
export const ApiTokenCredential: typeof import("./apiTokenCredential").ApiTokenCredential = null as any;
utilities.lazyLoad(exports, ["ApiTokenCredential"], () => require("./apiTokenCredential"));

export { ApplicationSourceArgs, ApplicationSourceState } from "./applicationSource";
export type ApplicationSource = import("./applicationSource").ApplicationSource;
export const ApplicationSource: typeof import("./applicationSource").ApplicationSource = null as any;
utilities.lazyLoad(exports, ["ApplicationSource"], () => require("./applicationSource"));

export { BasicCredentialArgs, BasicCredentialState } from "./basicCredential";
export type BasicCredential = import("./basicCredential").BasicCredential;
export const BasicCredential: typeof import("./basicCredential").BasicCredential = null as any;
utilities.lazyLoad(exports, ["BasicCredential"], () => require("./basicCredential"));

export { BatchPredictionJobDefinitionArgs, BatchPredictionJobDefinitionState } from "./batchPredictionJobDefinition";
export type BatchPredictionJobDefinition = import("./batchPredictionJobDefinition").BatchPredictionJobDefinition;
export const BatchPredictionJobDefinition: typeof import("./batchPredictionJobDefinition").BatchPredictionJobDefinition = null as any;
utilities.lazyLoad(exports, ["BatchPredictionJobDefinition"], () => require("./batchPredictionJobDefinition"));

export { CustomApplicationArgs, CustomApplicationState } from "./customApplication";
export type CustomApplication = import("./customApplication").CustomApplication;
export const CustomApplication: typeof import("./customApplication").CustomApplication = null as any;
utilities.lazyLoad(exports, ["CustomApplication"], () => require("./customApplication"));

export { CustomJobArgs, CustomJobState } from "./customJob";
export type CustomJob = import("./customJob").CustomJob;
export const CustomJob: typeof import("./customJob").CustomJob = null as any;
utilities.lazyLoad(exports, ["CustomJob"], () => require("./customJob"));

export { CustomModelArgs, CustomModelState } from "./customModel";
export type CustomModel = import("./customModel").CustomModel;
export const CustomModel: typeof import("./customModel").CustomModel = null as any;
utilities.lazyLoad(exports, ["CustomModel"], () => require("./customModel"));

export { DatasetFromDatasourceArgs, DatasetFromDatasourceState } from "./datasetFromDatasource";
export type DatasetFromDatasource = import("./datasetFromDatasource").DatasetFromDatasource;
export const DatasetFromDatasource: typeof import("./datasetFromDatasource").DatasetFromDatasource = null as any;
utilities.lazyLoad(exports, ["DatasetFromDatasource"], () => require("./datasetFromDatasource"));

export { DatasetFromFileArgs, DatasetFromFileState } from "./datasetFromFile";
export type DatasetFromFile = import("./datasetFromFile").DatasetFromFile;
export const DatasetFromFile: typeof import("./datasetFromFile").DatasetFromFile = null as any;
utilities.lazyLoad(exports, ["DatasetFromFile"], () => require("./datasetFromFile"));

export { DatasetFromUrlArgs, DatasetFromUrlState } from "./datasetFromUrl";
export type DatasetFromUrl = import("./datasetFromUrl").DatasetFromUrl;
export const DatasetFromUrl: typeof import("./datasetFromUrl").DatasetFromUrl = null as any;
utilities.lazyLoad(exports, ["DatasetFromUrl"], () => require("./datasetFromUrl"));

export { DatasourceArgs, DatasourceState } from "./datasource";
export type Datasource = import("./datasource").Datasource;
export const Datasource: typeof import("./datasource").Datasource = null as any;
utilities.lazyLoad(exports, ["Datasource"], () => require("./datasource"));

export { DatastoreArgs, DatastoreState } from "./datastore";
export type Datastore = import("./datastore").Datastore;
export const Datastore: typeof import("./datastore").Datastore = null as any;
utilities.lazyLoad(exports, ["Datastore"], () => require("./datastore"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { ExecutionEnvironmentArgs, ExecutionEnvironmentState } from "./executionEnvironment";
export type ExecutionEnvironment = import("./executionEnvironment").ExecutionEnvironment;
export const ExecutionEnvironment: typeof import("./executionEnvironment").ExecutionEnvironment = null as any;
utilities.lazyLoad(exports, ["ExecutionEnvironment"], () => require("./executionEnvironment"));

export { GetExecutionEnvironmentArgs, GetExecutionEnvironmentResult, GetExecutionEnvironmentOutputArgs } from "./getExecutionEnvironment";
export const getExecutionEnvironment: typeof import("./getExecutionEnvironment").getExecutionEnvironment = null as any;
export const getExecutionEnvironmentOutput: typeof import("./getExecutionEnvironment").getExecutionEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getExecutionEnvironment","getExecutionEnvironmentOutput"], () => require("./getExecutionEnvironment"));

export { GetGlobalModelArgs, GetGlobalModelResult, GetGlobalModelOutputArgs } from "./getGlobalModel";
export const getGlobalModel: typeof import("./getGlobalModel").getGlobalModel = null as any;
export const getGlobalModelOutput: typeof import("./getGlobalModel").getGlobalModelOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalModel","getGlobalModelOutput"], () => require("./getGlobalModel"));

export { GoogleCloudCredentialArgs, GoogleCloudCredentialState } from "./googleCloudCredential";
export type GoogleCloudCredential = import("./googleCloudCredential").GoogleCloudCredential;
export const GoogleCloudCredential: typeof import("./googleCloudCredential").GoogleCloudCredential = null as any;
utilities.lazyLoad(exports, ["GoogleCloudCredential"], () => require("./googleCloudCredential"));

export { LlmBlueprintArgs, LlmBlueprintState } from "./llmBlueprint";
export type LlmBlueprint = import("./llmBlueprint").LlmBlueprint;
export const LlmBlueprint: typeof import("./llmBlueprint").LlmBlueprint = null as any;
utilities.lazyLoad(exports, ["LlmBlueprint"], () => require("./llmBlueprint"));

export { PlaygroundArgs, PlaygroundState } from "./playground";
export type Playground = import("./playground").Playground;
export const Playground: typeof import("./playground").Playground = null as any;
utilities.lazyLoad(exports, ["Playground"], () => require("./playground"));

export { PredictionEnvironmentArgs, PredictionEnvironmentState } from "./predictionEnvironment";
export type PredictionEnvironment = import("./predictionEnvironment").PredictionEnvironment;
export const PredictionEnvironment: typeof import("./predictionEnvironment").PredictionEnvironment = null as any;
utilities.lazyLoad(exports, ["PredictionEnvironment"], () => require("./predictionEnvironment"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QaApplicationArgs, QaApplicationState } from "./qaApplication";
export type QaApplication = import("./qaApplication").QaApplication;
export const QaApplication: typeof import("./qaApplication").QaApplication = null as any;
utilities.lazyLoad(exports, ["QaApplication"], () => require("./qaApplication"));

export { RegisteredModelArgs, RegisteredModelState } from "./registeredModel";
export type RegisteredModel = import("./registeredModel").RegisteredModel;
export const RegisteredModel: typeof import("./registeredModel").RegisteredModel = null as any;
utilities.lazyLoad(exports, ["RegisteredModel"], () => require("./registeredModel"));

export { RegisteredModelFromLeaderboardArgs, RegisteredModelFromLeaderboardState } from "./registeredModelFromLeaderboard";
export type RegisteredModelFromLeaderboard = import("./registeredModelFromLeaderboard").RegisteredModelFromLeaderboard;
export const RegisteredModelFromLeaderboard: typeof import("./registeredModelFromLeaderboard").RegisteredModelFromLeaderboard = null as any;
utilities.lazyLoad(exports, ["RegisteredModelFromLeaderboard"], () => require("./registeredModelFromLeaderboard"));

export { RemoteRepositoryArgs, RemoteRepositoryState } from "./remoteRepository";
export type RemoteRepository = import("./remoteRepository").RemoteRepository;
export const RemoteRepository: typeof import("./remoteRepository").RemoteRepository = null as any;
utilities.lazyLoad(exports, ["RemoteRepository"], () => require("./remoteRepository"));

export { UseCaseArgs, UseCaseState } from "./useCase";
export type UseCase = import("./useCase").UseCase;
export const UseCase: typeof import("./useCase").UseCase = null as any;
utilities.lazyLoad(exports, ["UseCase"], () => require("./useCase"));

export { VectorDatabaseArgs, VectorDatabaseState } from "./vectorDatabase";
export type VectorDatabase = import("./vectorDatabase").VectorDatabase;
export const VectorDatabase: typeof import("./vectorDatabase").VectorDatabase = null as any;
utilities.lazyLoad(exports, ["VectorDatabase"], () => require("./vectorDatabase"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "datarobot:index/apiTokenCredential:ApiTokenCredential":
                return new ApiTokenCredential(name, <any>undefined, { urn })
            case "datarobot:index/applicationSource:ApplicationSource":
                return new ApplicationSource(name, <any>undefined, { urn })
            case "datarobot:index/basicCredential:BasicCredential":
                return new BasicCredential(name, <any>undefined, { urn })
            case "datarobot:index/batchPredictionJobDefinition:BatchPredictionJobDefinition":
                return new BatchPredictionJobDefinition(name, <any>undefined, { urn })
            case "datarobot:index/customApplication:CustomApplication":
                return new CustomApplication(name, <any>undefined, { urn })
            case "datarobot:index/customJob:CustomJob":
                return new CustomJob(name, <any>undefined, { urn })
            case "datarobot:index/customModel:CustomModel":
                return new CustomModel(name, <any>undefined, { urn })
            case "datarobot:index/datasetFromDatasource:DatasetFromDatasource":
                return new DatasetFromDatasource(name, <any>undefined, { urn })
            case "datarobot:index/datasetFromFile:DatasetFromFile":
                return new DatasetFromFile(name, <any>undefined, { urn })
            case "datarobot:index/datasetFromUrl:DatasetFromUrl":
                return new DatasetFromUrl(name, <any>undefined, { urn })
            case "datarobot:index/datasource:Datasource":
                return new Datasource(name, <any>undefined, { urn })
            case "datarobot:index/datastore:Datastore":
                return new Datastore(name, <any>undefined, { urn })
            case "datarobot:index/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "datarobot:index/executionEnvironment:ExecutionEnvironment":
                return new ExecutionEnvironment(name, <any>undefined, { urn })
            case "datarobot:index/googleCloudCredential:GoogleCloudCredential":
                return new GoogleCloudCredential(name, <any>undefined, { urn })
            case "datarobot:index/llmBlueprint:LlmBlueprint":
                return new LlmBlueprint(name, <any>undefined, { urn })
            case "datarobot:index/playground:Playground":
                return new Playground(name, <any>undefined, { urn })
            case "datarobot:index/predictionEnvironment:PredictionEnvironment":
                return new PredictionEnvironment(name, <any>undefined, { urn })
            case "datarobot:index/qaApplication:QaApplication":
                return new QaApplication(name, <any>undefined, { urn })
            case "datarobot:index/registeredModel:RegisteredModel":
                return new RegisteredModel(name, <any>undefined, { urn })
            case "datarobot:index/registeredModelFromLeaderboard:RegisteredModelFromLeaderboard":
                return new RegisteredModelFromLeaderboard(name, <any>undefined, { urn })
            case "datarobot:index/remoteRepository:RemoteRepository":
                return new RemoteRepository(name, <any>undefined, { urn })
            case "datarobot:index/useCase:UseCase":
                return new UseCase(name, <any>undefined, { urn })
            case "datarobot:index/vectorDatabase:VectorDatabase":
                return new VectorDatabase(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("datarobot", "index/apiTokenCredential", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/applicationSource", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/basicCredential", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/batchPredictionJobDefinition", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/customApplication", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/customJob", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/customModel", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/datasetFromDatasource", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/datasetFromFile", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/datasetFromUrl", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/datasource", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/datastore", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/deployment", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/executionEnvironment", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/googleCloudCredential", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/llmBlueprint", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/playground", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/predictionEnvironment", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/qaApplication", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/registeredModel", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/registeredModelFromLeaderboard", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/remoteRepository", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/useCase", _module)
pulumi.runtime.registerResourceModule("datarobot", "index/vectorDatabase", _module)
pulumi.runtime.registerResourcePackage("datarobot", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:datarobot") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
