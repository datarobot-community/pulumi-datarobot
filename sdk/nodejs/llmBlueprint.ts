// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * LLMBlueprint
 */
export class LlmBlueprint extends pulumi.CustomResource {
    /**
     * Get an existing LlmBlueprint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LlmBlueprintState, opts?: pulumi.CustomResourceOptions): LlmBlueprint {
        return new LlmBlueprint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/llmBlueprint:LlmBlueprint';

    /**
     * Returns true if the given object is an instance of LlmBlueprint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LlmBlueprint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LlmBlueprint.__pulumiType;
    }

    /**
     * The custom model LLM settings for the LLM Blueprint.
     */
    public readonly customModelLlmSettings!: pulumi.Output<outputs.LlmBlueprintCustomModelLlmSettings | undefined>;
    /**
     * The description of the LLM Blueprint.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The id of the LLM for the LLM Blueprint. If custom*model*llm_settings is set, this value must be 'custom-model'.
     */
    public readonly llmId!: pulumi.Output<string | undefined>;
    /**
     * The LLM settings for the LLM Blueprint.
     */
    public readonly llmSettings!: pulumi.Output<outputs.LlmBlueprintLlmSettings | undefined>;
    /**
     * The name of the LLM Blueprint.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the Playground for the LLM Blueprint.
     */
    public readonly playgroundId!: pulumi.Output<string>;
    /**
     * The prompt type for the LLM Blueprint.
     */
    public readonly promptType!: pulumi.Output<string>;
    /**
     * The id of the Vector Database for the LLM Blueprint.
     */
    public readonly vectorDatabaseId!: pulumi.Output<string | undefined>;
    /**
     * The Vector Database settings for the LLM Blueprint.
     */
    public readonly vectorDatabaseSettings!: pulumi.Output<outputs.LlmBlueprintVectorDatabaseSettings | undefined>;

    /**
     * Create a LlmBlueprint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LlmBlueprintArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LlmBlueprintArgs | LlmBlueprintState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LlmBlueprintState | undefined;
            resourceInputs["customModelLlmSettings"] = state ? state.customModelLlmSettings : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["llmId"] = state ? state.llmId : undefined;
            resourceInputs["llmSettings"] = state ? state.llmSettings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["playgroundId"] = state ? state.playgroundId : undefined;
            resourceInputs["promptType"] = state ? state.promptType : undefined;
            resourceInputs["vectorDatabaseId"] = state ? state.vectorDatabaseId : undefined;
            resourceInputs["vectorDatabaseSettings"] = state ? state.vectorDatabaseSettings : undefined;
        } else {
            const args = argsOrState as LlmBlueprintArgs | undefined;
            if ((!args || args.playgroundId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'playgroundId'");
            }
            resourceInputs["customModelLlmSettings"] = args ? args.customModelLlmSettings : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["llmId"] = args ? args.llmId : undefined;
            resourceInputs["llmSettings"] = args ? args.llmSettings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["playgroundId"] = args ? args.playgroundId : undefined;
            resourceInputs["promptType"] = args ? args.promptType : undefined;
            resourceInputs["vectorDatabaseId"] = args ? args.vectorDatabaseId : undefined;
            resourceInputs["vectorDatabaseSettings"] = args ? args.vectorDatabaseSettings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LlmBlueprint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LlmBlueprint resources.
 */
export interface LlmBlueprintState {
    /**
     * The custom model LLM settings for the LLM Blueprint.
     */
    customModelLlmSettings?: pulumi.Input<inputs.LlmBlueprintCustomModelLlmSettings>;
    /**
     * The description of the LLM Blueprint.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of the LLM for the LLM Blueprint. If custom*model*llm_settings is set, this value must be 'custom-model'.
     */
    llmId?: pulumi.Input<string>;
    /**
     * The LLM settings for the LLM Blueprint.
     */
    llmSettings?: pulumi.Input<inputs.LlmBlueprintLlmSettings>;
    /**
     * The name of the LLM Blueprint.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the Playground for the LLM Blueprint.
     */
    playgroundId?: pulumi.Input<string>;
    /**
     * The prompt type for the LLM Blueprint.
     */
    promptType?: pulumi.Input<string>;
    /**
     * The id of the Vector Database for the LLM Blueprint.
     */
    vectorDatabaseId?: pulumi.Input<string>;
    /**
     * The Vector Database settings for the LLM Blueprint.
     */
    vectorDatabaseSettings?: pulumi.Input<inputs.LlmBlueprintVectorDatabaseSettings>;
}

/**
 * The set of arguments for constructing a LlmBlueprint resource.
 */
export interface LlmBlueprintArgs {
    /**
     * The custom model LLM settings for the LLM Blueprint.
     */
    customModelLlmSettings?: pulumi.Input<inputs.LlmBlueprintCustomModelLlmSettings>;
    /**
     * The description of the LLM Blueprint.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of the LLM for the LLM Blueprint. If custom*model*llm_settings is set, this value must be 'custom-model'.
     */
    llmId?: pulumi.Input<string>;
    /**
     * The LLM settings for the LLM Blueprint.
     */
    llmSettings?: pulumi.Input<inputs.LlmBlueprintLlmSettings>;
    /**
     * The name of the LLM Blueprint.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the Playground for the LLM Blueprint.
     */
    playgroundId: pulumi.Input<string>;
    /**
     * The prompt type for the LLM Blueprint.
     */
    promptType?: pulumi.Input<string>;
    /**
     * The id of the Vector Database for the LLM Blueprint.
     */
    vectorDatabaseId?: pulumi.Input<string>;
    /**
     * The Vector Database settings for the LLM Blueprint.
     */
    vectorDatabaseSettings?: pulumi.Input<inputs.LlmBlueprintVectorDatabaseSettings>;
}
