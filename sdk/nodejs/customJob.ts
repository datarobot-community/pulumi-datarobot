// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Custom Job
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const example = new datarobot.CustomJob("example", {
 *     jobType: "retraining",
 *     files: [
 *         "file1.py",
 *         "file2.py",
 *     ],
 *     environmentId: "65f9b27eab986d30d4c64268",
 *     description: "Example Custom Job Description",
 *     runtimeParameterValues: [{
 *         key: "EXAMPLE_PARAM",
 *         type: "string",
 *         value: "val",
 *     }],
 *     egressNetworkPolicy: "none",
 *     resourceBundleId: "cpu.micro",
 * });
 * export const exampleId = example.id;
 * ```
 */
export class CustomJob extends pulumi.CustomResource {
    /**
     * Get an existing CustomJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomJobState, opts?: pulumi.CustomResourceOptions): CustomJob {
        return new CustomJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/customJob:CustomJob';

    /**
     * Returns true if the given object is an instance of CustomJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomJob.__pulumiType;
    }

    /**
     * The description of the Custom Job.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The egress network policy for the Job.
     */
    public readonly egressNetworkPolicy!: pulumi.Output<string>;
    /**
     * The ID of the environment to use with the Job.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The ID of the environment version to use with the Job.
     */
    public readonly environmentVersionId!: pulumi.Output<string>;
    /**
     * The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Job. If list is of strings, then basenames will be used for tuples.
     */
    public readonly files!: pulumi.Output<any | undefined>;
    /**
     * The hash of file contents for each file in files.
     */
    public /*out*/ readonly filesHashes!: pulumi.Output<string[]>;
    /**
     * The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
     */
    public readonly folderPath!: pulumi.Output<string | undefined>;
    /**
     * The hash of the folder path contents.
     */
    public /*out*/ readonly folderPathHash!: pulumi.Output<string>;
    /**
     * The type of the Custom Job.
     */
    public readonly jobType!: pulumi.Output<string>;
    /**
     * The name of the Custom Job.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
     */
    public readonly resourceBundleId!: pulumi.Output<string | undefined>;
    /**
     * Additional parameters to be injected into a Job at runtime.
     */
    public readonly runtimeParameterValues!: pulumi.Output<outputs.CustomJobRuntimeParameterValue[]>;

    /**
     * Create a CustomJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CustomJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomJobArgs | CustomJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomJobState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["egressNetworkPolicy"] = state ? state.egressNetworkPolicy : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["environmentVersionId"] = state ? state.environmentVersionId : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["filesHashes"] = state ? state.filesHashes : undefined;
            resourceInputs["folderPath"] = state ? state.folderPath : undefined;
            resourceInputs["folderPathHash"] = state ? state.folderPathHash : undefined;
            resourceInputs["jobType"] = state ? state.jobType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceBundleId"] = state ? state.resourceBundleId : undefined;
            resourceInputs["runtimeParameterValues"] = state ? state.runtimeParameterValues : undefined;
        } else {
            const args = argsOrState as CustomJobArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["egressNetworkPolicy"] = args ? args.egressNetworkPolicy : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["environmentVersionId"] = args ? args.environmentVersionId : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["folderPath"] = args ? args.folderPath : undefined;
            resourceInputs["jobType"] = args ? args.jobType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceBundleId"] = args ? args.resourceBundleId : undefined;
            resourceInputs["runtimeParameterValues"] = args ? args.runtimeParameterValues : undefined;
            resourceInputs["filesHashes"] = undefined /*out*/;
            resourceInputs["folderPathHash"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomJob resources.
 */
export interface CustomJobState {
    /**
     * The description of the Custom Job.
     */
    description?: pulumi.Input<string>;
    /**
     * The egress network policy for the Job.
     */
    egressNetworkPolicy?: pulumi.Input<string>;
    /**
     * The ID of the environment to use with the Job.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The ID of the environment version to use with the Job.
     */
    environmentVersionId?: pulumi.Input<string>;
    /**
     * The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Job. If list is of strings, then basenames will be used for tuples.
     */
    files?: any;
    /**
     * The hash of file contents for each file in files.
     */
    filesHashes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The hash of the folder path contents.
     */
    folderPathHash?: pulumi.Input<string>;
    /**
     * The type of the Custom Job.
     */
    jobType?: pulumi.Input<string>;
    /**
     * The name of the Custom Job.
     */
    name?: pulumi.Input<string>;
    /**
     * A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
     */
    resourceBundleId?: pulumi.Input<string>;
    /**
     * Additional parameters to be injected into a Job at runtime.
     */
    runtimeParameterValues?: pulumi.Input<pulumi.Input<inputs.CustomJobRuntimeParameterValue>[]>;
}

/**
 * The set of arguments for constructing a CustomJob resource.
 */
export interface CustomJobArgs {
    /**
     * The description of the Custom Job.
     */
    description?: pulumi.Input<string>;
    /**
     * The egress network policy for the Job.
     */
    egressNetworkPolicy?: pulumi.Input<string>;
    /**
     * The ID of the environment to use with the Job.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The ID of the environment version to use with the Job.
     */
    environmentVersionId?: pulumi.Input<string>;
    /**
     * The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Job. If list is of strings, then basenames will be used for tuples.
     */
    files?: any;
    /**
     * The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The type of the Custom Job.
     */
    jobType?: pulumi.Input<string>;
    /**
     * The name of the Custom Job.
     */
    name?: pulumi.Input<string>;
    /**
     * A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
     */
    resourceBundleId?: pulumi.Input<string>;
    /**
     * Additional parameters to be injected into a Job at runtime.
     */
    runtimeParameterValues?: pulumi.Input<pulumi.Input<inputs.CustomJobRuntimeParameterValue>[]>;
}
