// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Deployment
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const exampleCustomModel = new datarobot.CustomModel("exampleCustomModel", {
 *     description: "Description for the example custom model",
 *     targetType: "Binary",
 *     targetName: "my_label",
 *     baseEnvironmentId: "65f9b27eab986d30d4c64268",
 *     files: ["example.py"],
 * });
 * const exampleRegisteredModel = new datarobot.RegisteredModel("exampleRegisteredModel", {
 *     customModelVersionId: exampleCustomModel.versionId,
 *     description: "Description for the example registered model",
 * });
 * const examplePredictionEnvironment = new datarobot.PredictionEnvironment("examplePredictionEnvironment", {
 *     description: "Description for the example prediction environment",
 *     platform: "datarobotServerless",
 * });
 * const exampleDeployment = new datarobot.Deployment("exampleDeployment", {
 *     label: "An example deployment",
 *     predictionEnvironmentId: examplePredictionEnvironment.id,
 *     registeredModelVersionId: exampleRegisteredModel.versionId,
 *     challengerModelsSettings: {},
 *     challengerReplaySettings: {},
 *     segmentAnalysisSettings: {},
 *     biasAndFairnessSettings: {},
 *     predictionsByForecastDateSettings: {},
 *     driftTrackingSettings: {},
 *     associationIdSettings: {},
 *     predictionsDataCollectionSettings: {},
 *     predictionWarningSettings: {},
 *     predictionIntervalsSettings: {},
 *     predictionsSettings: {},
 *     featureCacheSettings: {},
 *     healthSettings: {},
 *     runtimeParameterValues: [{
 *         key: "EXAMPLE_PARAM",
 *         type: "string",
 *         value: "val",
 *     }],
 * });
 * export const datarobotDeploymentId = exampleDeployment.id;
 * ```
 */
export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentState, opts?: pulumi.CustomResourceOptions): Deployment {
        return new Deployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/deployment:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    /**
     * Association ID settings for this Deployment.
     */
    public readonly associationIdSettings!: pulumi.Output<outputs.DeploymentAssociationIdSettings | undefined>;
    /**
     * The batch monitoring settings for the Deployment.
     */
    public readonly batchMonitoringSettings!: pulumi.Output<outputs.DeploymentBatchMonitoringSettings | undefined>;
    /**
     * Bias and fairness settings for the Deployment.
     */
    public readonly biasAndFairnessSettings!: pulumi.Output<outputs.DeploymentBiasAndFairnessSettings | undefined>;
    /**
     * The challenger models settings for the Deployment.
     */
    public readonly challengerModelsSettings!: pulumi.Output<outputs.DeploymentChallengerModelsSettings | undefined>;
    /**
     * The challenger replay settings for the Deployment.
     */
    public readonly challengerReplaySettings!: pulumi.Output<outputs.DeploymentChallengerReplaySettings | undefined>;
    /**
     * The drift tracking settings for the Deployment.
     */
    public readonly driftTrackingSettings!: pulumi.Output<outputs.DeploymentDriftTrackingSettings | undefined>;
    /**
     * The feature cache settings for this Deployment.
     */
    public readonly featureCacheSettings!: pulumi.Output<outputs.DeploymentFeatureCacheSettings | undefined>;
    /**
     * The health settings for this Deployment.
     */
    public readonly healthSettings!: pulumi.Output<outputs.DeploymentHealthSettings | undefined>;
    /**
     * The importance of the Deployment.
     */
    public readonly importance!: pulumi.Output<string>;
    /**
     * The label of the Deployment.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The ID of the predication environment for this Deployment.
     */
    public readonly predictionEnvironmentId!: pulumi.Output<string>;
    /**
     * The prediction intervals settings for this Deployment.
     */
    public readonly predictionIntervalsSettings!: pulumi.Output<outputs.DeploymentPredictionIntervalsSettings | undefined>;
    /**
     * The prediction warning settings for the Deployment.
     */
    public readonly predictionWarningSettings!: pulumi.Output<outputs.DeploymentPredictionWarningSettings | undefined>;
    /**
     * The predictions by forecase date settings for the Deployment.
     */
    public readonly predictionsByForecastDateSettings!: pulumi.Output<outputs.DeploymentPredictionsByForecastDateSettings | undefined>;
    /**
     * The predictions data collection settings for the Deployment.
     */
    public readonly predictionsDataCollectionSettings!: pulumi.Output<outputs.DeploymentPredictionsDataCollectionSettings | undefined>;
    /**
     * Settings for the predictions.
     */
    public readonly predictionsSettings!: pulumi.Output<outputs.DeploymentPredictionsSettings | undefined>;
    /**
     * The ID of the registered model version for this Deployment.
     */
    public readonly registeredModelVersionId!: pulumi.Output<string>;
    /**
     * The runtime parameter values for the Deployment.
     */
    public readonly runtimeParameterValues!: pulumi.Output<outputs.DeploymentRuntimeParameterValue[] | undefined>;
    /**
     * The segment analysis settings for the Deployment.
     */
    public readonly segmentAnalysisSettings!: pulumi.Output<outputs.DeploymentSegmentAnalysisSettings | undefined>;
    /**
     * The list of Use Case IDs to add the Deployment to.
     */
    public readonly useCaseIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentArgs | DeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentState | undefined;
            resourceInputs["associationIdSettings"] = state ? state.associationIdSettings : undefined;
            resourceInputs["batchMonitoringSettings"] = state ? state.batchMonitoringSettings : undefined;
            resourceInputs["biasAndFairnessSettings"] = state ? state.biasAndFairnessSettings : undefined;
            resourceInputs["challengerModelsSettings"] = state ? state.challengerModelsSettings : undefined;
            resourceInputs["challengerReplaySettings"] = state ? state.challengerReplaySettings : undefined;
            resourceInputs["driftTrackingSettings"] = state ? state.driftTrackingSettings : undefined;
            resourceInputs["featureCacheSettings"] = state ? state.featureCacheSettings : undefined;
            resourceInputs["healthSettings"] = state ? state.healthSettings : undefined;
            resourceInputs["importance"] = state ? state.importance : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["predictionEnvironmentId"] = state ? state.predictionEnvironmentId : undefined;
            resourceInputs["predictionIntervalsSettings"] = state ? state.predictionIntervalsSettings : undefined;
            resourceInputs["predictionWarningSettings"] = state ? state.predictionWarningSettings : undefined;
            resourceInputs["predictionsByForecastDateSettings"] = state ? state.predictionsByForecastDateSettings : undefined;
            resourceInputs["predictionsDataCollectionSettings"] = state ? state.predictionsDataCollectionSettings : undefined;
            resourceInputs["predictionsSettings"] = state ? state.predictionsSettings : undefined;
            resourceInputs["registeredModelVersionId"] = state ? state.registeredModelVersionId : undefined;
            resourceInputs["runtimeParameterValues"] = state ? state.runtimeParameterValues : undefined;
            resourceInputs["segmentAnalysisSettings"] = state ? state.segmentAnalysisSettings : undefined;
            resourceInputs["useCaseIds"] = state ? state.useCaseIds : undefined;
        } else {
            const args = argsOrState as DeploymentArgs | undefined;
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if ((!args || args.predictionEnvironmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'predictionEnvironmentId'");
            }
            if ((!args || args.registeredModelVersionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registeredModelVersionId'");
            }
            resourceInputs["associationIdSettings"] = args ? args.associationIdSettings : undefined;
            resourceInputs["batchMonitoringSettings"] = args ? args.batchMonitoringSettings : undefined;
            resourceInputs["biasAndFairnessSettings"] = args ? args.biasAndFairnessSettings : undefined;
            resourceInputs["challengerModelsSettings"] = args ? args.challengerModelsSettings : undefined;
            resourceInputs["challengerReplaySettings"] = args ? args.challengerReplaySettings : undefined;
            resourceInputs["driftTrackingSettings"] = args ? args.driftTrackingSettings : undefined;
            resourceInputs["featureCacheSettings"] = args ? args.featureCacheSettings : undefined;
            resourceInputs["healthSettings"] = args ? args.healthSettings : undefined;
            resourceInputs["importance"] = args ? args.importance : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["predictionEnvironmentId"] = args ? args.predictionEnvironmentId : undefined;
            resourceInputs["predictionIntervalsSettings"] = args ? args.predictionIntervalsSettings : undefined;
            resourceInputs["predictionWarningSettings"] = args ? args.predictionWarningSettings : undefined;
            resourceInputs["predictionsByForecastDateSettings"] = args ? args.predictionsByForecastDateSettings : undefined;
            resourceInputs["predictionsDataCollectionSettings"] = args ? args.predictionsDataCollectionSettings : undefined;
            resourceInputs["predictionsSettings"] = args ? args.predictionsSettings : undefined;
            resourceInputs["registeredModelVersionId"] = args ? args.registeredModelVersionId : undefined;
            resourceInputs["runtimeParameterValues"] = args ? args.runtimeParameterValues : undefined;
            resourceInputs["segmentAnalysisSettings"] = args ? args.segmentAnalysisSettings : undefined;
            resourceInputs["useCaseIds"] = args ? args.useCaseIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Deployment resources.
 */
export interface DeploymentState {
    /**
     * Association ID settings for this Deployment.
     */
    associationIdSettings?: pulumi.Input<inputs.DeploymentAssociationIdSettings>;
    /**
     * The batch monitoring settings for the Deployment.
     */
    batchMonitoringSettings?: pulumi.Input<inputs.DeploymentBatchMonitoringSettings>;
    /**
     * Bias and fairness settings for the Deployment.
     */
    biasAndFairnessSettings?: pulumi.Input<inputs.DeploymentBiasAndFairnessSettings>;
    /**
     * The challenger models settings for the Deployment.
     */
    challengerModelsSettings?: pulumi.Input<inputs.DeploymentChallengerModelsSettings>;
    /**
     * The challenger replay settings for the Deployment.
     */
    challengerReplaySettings?: pulumi.Input<inputs.DeploymentChallengerReplaySettings>;
    /**
     * The drift tracking settings for the Deployment.
     */
    driftTrackingSettings?: pulumi.Input<inputs.DeploymentDriftTrackingSettings>;
    /**
     * The feature cache settings for this Deployment.
     */
    featureCacheSettings?: pulumi.Input<inputs.DeploymentFeatureCacheSettings>;
    /**
     * The health settings for this Deployment.
     */
    healthSettings?: pulumi.Input<inputs.DeploymentHealthSettings>;
    /**
     * The importance of the Deployment.
     */
    importance?: pulumi.Input<string>;
    /**
     * The label of the Deployment.
     */
    label?: pulumi.Input<string>;
    /**
     * The ID of the predication environment for this Deployment.
     */
    predictionEnvironmentId?: pulumi.Input<string>;
    /**
     * The prediction intervals settings for this Deployment.
     */
    predictionIntervalsSettings?: pulumi.Input<inputs.DeploymentPredictionIntervalsSettings>;
    /**
     * The prediction warning settings for the Deployment.
     */
    predictionWarningSettings?: pulumi.Input<inputs.DeploymentPredictionWarningSettings>;
    /**
     * The predictions by forecase date settings for the Deployment.
     */
    predictionsByForecastDateSettings?: pulumi.Input<inputs.DeploymentPredictionsByForecastDateSettings>;
    /**
     * The predictions data collection settings for the Deployment.
     */
    predictionsDataCollectionSettings?: pulumi.Input<inputs.DeploymentPredictionsDataCollectionSettings>;
    /**
     * Settings for the predictions.
     */
    predictionsSettings?: pulumi.Input<inputs.DeploymentPredictionsSettings>;
    /**
     * The ID of the registered model version for this Deployment.
     */
    registeredModelVersionId?: pulumi.Input<string>;
    /**
     * The runtime parameter values for the Deployment.
     */
    runtimeParameterValues?: pulumi.Input<pulumi.Input<inputs.DeploymentRuntimeParameterValue>[]>;
    /**
     * The segment analysis settings for the Deployment.
     */
    segmentAnalysisSettings?: pulumi.Input<inputs.DeploymentSegmentAnalysisSettings>;
    /**
     * The list of Use Case IDs to add the Deployment to.
     */
    useCaseIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    /**
     * Association ID settings for this Deployment.
     */
    associationIdSettings?: pulumi.Input<inputs.DeploymentAssociationIdSettings>;
    /**
     * The batch monitoring settings for the Deployment.
     */
    batchMonitoringSettings?: pulumi.Input<inputs.DeploymentBatchMonitoringSettings>;
    /**
     * Bias and fairness settings for the Deployment.
     */
    biasAndFairnessSettings?: pulumi.Input<inputs.DeploymentBiasAndFairnessSettings>;
    /**
     * The challenger models settings for the Deployment.
     */
    challengerModelsSettings?: pulumi.Input<inputs.DeploymentChallengerModelsSettings>;
    /**
     * The challenger replay settings for the Deployment.
     */
    challengerReplaySettings?: pulumi.Input<inputs.DeploymentChallengerReplaySettings>;
    /**
     * The drift tracking settings for the Deployment.
     */
    driftTrackingSettings?: pulumi.Input<inputs.DeploymentDriftTrackingSettings>;
    /**
     * The feature cache settings for this Deployment.
     */
    featureCacheSettings?: pulumi.Input<inputs.DeploymentFeatureCacheSettings>;
    /**
     * The health settings for this Deployment.
     */
    healthSettings?: pulumi.Input<inputs.DeploymentHealthSettings>;
    /**
     * The importance of the Deployment.
     */
    importance?: pulumi.Input<string>;
    /**
     * The label of the Deployment.
     */
    label: pulumi.Input<string>;
    /**
     * The ID of the predication environment for this Deployment.
     */
    predictionEnvironmentId: pulumi.Input<string>;
    /**
     * The prediction intervals settings for this Deployment.
     */
    predictionIntervalsSettings?: pulumi.Input<inputs.DeploymentPredictionIntervalsSettings>;
    /**
     * The prediction warning settings for the Deployment.
     */
    predictionWarningSettings?: pulumi.Input<inputs.DeploymentPredictionWarningSettings>;
    /**
     * The predictions by forecase date settings for the Deployment.
     */
    predictionsByForecastDateSettings?: pulumi.Input<inputs.DeploymentPredictionsByForecastDateSettings>;
    /**
     * The predictions data collection settings for the Deployment.
     */
    predictionsDataCollectionSettings?: pulumi.Input<inputs.DeploymentPredictionsDataCollectionSettings>;
    /**
     * Settings for the predictions.
     */
    predictionsSettings?: pulumi.Input<inputs.DeploymentPredictionsSettings>;
    /**
     * The ID of the registered model version for this Deployment.
     */
    registeredModelVersionId: pulumi.Input<string>;
    /**
     * The runtime parameter values for the Deployment.
     */
    runtimeParameterValues?: pulumi.Input<pulumi.Input<inputs.DeploymentRuntimeParameterValue>[]>;
    /**
     * The segment analysis settings for the Deployment.
     */
    segmentAnalysisSettings?: pulumi.Input<inputs.DeploymentSegmentAnalysisSettings>;
    /**
     * The list of Use Case IDs to add the Deployment to.
     */
    useCaseIds?: pulumi.Input<pulumi.Input<string>[]>;
}
