// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Data Set from Data Source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const example = new datarobot.DatasetFromDatasource("example", {
 *     datasourceId: datarobot_datasource.example.id,
 *     credentialId: datarobot_credential.example.id,
 *     doSnapshot: false,
 *     persistDataAfterIngestion: false,
 *     useKerberos: true,
 *     categories: ["TRAINING"],
 *     useCaseIds: [datarobot_use_case.example.id],
 * });
 * export const exampleId = example.id;
 * ```
 */
export class DatasetFromDatasource extends pulumi.CustomResource {
    /**
     * Get an existing DatasetFromDatasource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasetFromDatasourceState, opts?: pulumi.CustomResourceOptions): DatasetFromDatasource {
        return new DatasetFromDatasource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/datasetFromDatasource:DatasetFromDatasource';

    /**
     * Returns true if the given object is an instance of DatasetFromDatasource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasetFromDatasource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasetFromDatasource.__pulumiType;
    }

    /**
     * An array of strings describing the intended use of the dataset.
     */
    public readonly categories!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the set of credentials to use.
     */
    public readonly credentialId!: pulumi.Output<string>;
    /**
     * The ID for the DataSource to use as the source of data.
     */
    public readonly dataSourceId!: pulumi.Output<string>;
    /**
     * If unset, uses the server default: True. If true, creates a snapshot dataset; if false, creates a remote dataset.
     */
    public readonly doSnapshot!: pulumi.Output<boolean>;
    /**
     * If unset, uses the server default: True. If true, will enforce saving all data (for download and sampling) and will allow a user to view extended data profile (which includes data statistics like min/max/median/mean, histogram, etc.). If false, will not enforce saving data. The data schema (feature names and types) still will be available.
     */
    public readonly persistDataAfterIngestion!: pulumi.Output<boolean>;
    /**
     * The number of rows fetched during dataset registration.
     */
    public readonly sampleSizeRows!: pulumi.Output<number | undefined>;
    /**
     * The list of Use Case IDs to add the Dataset to.
     */
    public readonly useCaseIds!: pulumi.Output<string[] | undefined>;
    /**
     * If unset, uses the server default: False. If true, use kerberos authentication for database authentication.
     */
    public readonly useKerberos!: pulumi.Output<boolean>;

    /**
     * Create a DatasetFromDatasource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasetFromDatasourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasetFromDatasourceArgs | DatasetFromDatasourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasetFromDatasourceState | undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["doSnapshot"] = state ? state.doSnapshot : undefined;
            resourceInputs["persistDataAfterIngestion"] = state ? state.persistDataAfterIngestion : undefined;
            resourceInputs["sampleSizeRows"] = state ? state.sampleSizeRows : undefined;
            resourceInputs["useCaseIds"] = state ? state.useCaseIds : undefined;
            resourceInputs["useKerberos"] = state ? state.useKerberos : undefined;
        } else {
            const args = argsOrState as DatasetFromDatasourceArgs | undefined;
            if ((!args || args.credentialId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialId'");
            }
            if ((!args || args.dataSourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceId'");
            }
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["credentialId"] = args ? args.credentialId : undefined;
            resourceInputs["dataSourceId"] = args ? args.dataSourceId : undefined;
            resourceInputs["doSnapshot"] = args ? args.doSnapshot : undefined;
            resourceInputs["persistDataAfterIngestion"] = args ? args.persistDataAfterIngestion : undefined;
            resourceInputs["sampleSizeRows"] = args ? args.sampleSizeRows : undefined;
            resourceInputs["useCaseIds"] = args ? args.useCaseIds : undefined;
            resourceInputs["useKerberos"] = args ? args.useKerberos : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasetFromDatasource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatasetFromDatasource resources.
 */
export interface DatasetFromDatasourceState {
    /**
     * An array of strings describing the intended use of the dataset.
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the set of credentials to use.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The ID for the DataSource to use as the source of data.
     */
    dataSourceId?: pulumi.Input<string>;
    /**
     * If unset, uses the server default: True. If true, creates a snapshot dataset; if false, creates a remote dataset.
     */
    doSnapshot?: pulumi.Input<boolean>;
    /**
     * If unset, uses the server default: True. If true, will enforce saving all data (for download and sampling) and will allow a user to view extended data profile (which includes data statistics like min/max/median/mean, histogram, etc.). If false, will not enforce saving data. The data schema (feature names and types) still will be available.
     */
    persistDataAfterIngestion?: pulumi.Input<boolean>;
    /**
     * The number of rows fetched during dataset registration.
     */
    sampleSizeRows?: pulumi.Input<number>;
    /**
     * The list of Use Case IDs to add the Dataset to.
     */
    useCaseIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If unset, uses the server default: False. If true, use kerberos authentication for database authentication.
     */
    useKerberos?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DatasetFromDatasource resource.
 */
export interface DatasetFromDatasourceArgs {
    /**
     * An array of strings describing the intended use of the dataset.
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the set of credentials to use.
     */
    credentialId: pulumi.Input<string>;
    /**
     * The ID for the DataSource to use as the source of data.
     */
    dataSourceId: pulumi.Input<string>;
    /**
     * If unset, uses the server default: True. If true, creates a snapshot dataset; if false, creates a remote dataset.
     */
    doSnapshot?: pulumi.Input<boolean>;
    /**
     * If unset, uses the server default: True. If true, will enforce saving all data (for download and sampling) and will allow a user to view extended data profile (which includes data statistics like min/max/median/mean, histogram, etc.). If false, will not enforce saving data. The data schema (feature names and types) still will be available.
     */
    persistDataAfterIngestion?: pulumi.Input<boolean>;
    /**
     * The number of rows fetched during dataset registration.
     */
    sampleSizeRows?: pulumi.Input<number>;
    /**
     * The list of Use Case IDs to add the Dataset to.
     */
    useCaseIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If unset, uses the server default: False. If true, use kerberos authentication for database authentication.
     */
    useKerberos?: pulumi.Input<boolean>;
}
