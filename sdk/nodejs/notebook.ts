// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Notebook resource for importing and managing Jupyter notebooks in DataRobot.
 *
 * **NOTE**
 *
 * The synchronization of the file hash is one way. The provider will track changes of the Notebook file on disk
 * and update _only_ when that changes. If the remote Notebook changes, the provider will not update the local file.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const exampleUseCase = new datarobot.UseCase("exampleUseCase", {});
 * const exampleNotebook = new datarobot.Notebook("exampleNotebook", {
 *     filePath: "/path/to/your/notebook.ipynb",
 *     useCaseId: exampleUseCase.id,
 * });
 * ```
 */
export class Notebook extends pulumi.CustomResource {
    /**
     * Get an existing Notebook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotebookState, opts?: pulumi.CustomResourceOptions): Notebook {
        return new Notebook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/notebook:Notebook';

    /**
     * Returns true if the given object is an instance of Notebook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notebook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notebook.__pulumiType;
    }

    /**
     * The SHA-256 hash of the file contents.
     */
    public /*out*/ readonly fileHash!: pulumi.Output<string>;
    /**
     * The path to the .ipynb file to import.
     */
    public readonly filePath!: pulumi.Output<string>;
    /**
     * The name of the Notebook.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The URL to the Notebook.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * The Use Case ID to add the Notebook to.
     */
    public readonly useCaseId!: pulumi.Output<string | undefined>;

    /**
     * Create a Notebook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotebookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotebookArgs | NotebookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotebookState | undefined;
            resourceInputs["fileHash"] = state ? state.fileHash : undefined;
            resourceInputs["filePath"] = state ? state.filePath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["useCaseId"] = state ? state.useCaseId : undefined;
        } else {
            const args = argsOrState as NotebookArgs | undefined;
            if ((!args || args.filePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filePath'");
            }
            resourceInputs["filePath"] = args ? args.filePath : undefined;
            resourceInputs["useCaseId"] = args ? args.useCaseId : undefined;
            resourceInputs["fileHash"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Notebook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Notebook resources.
 */
export interface NotebookState {
    /**
     * The SHA-256 hash of the file contents.
     */
    fileHash?: pulumi.Input<string>;
    /**
     * The path to the .ipynb file to import.
     */
    filePath?: pulumi.Input<string>;
    /**
     * The name of the Notebook.
     */
    name?: pulumi.Input<string>;
    /**
     * The URL to the Notebook.
     */
    url?: pulumi.Input<string>;
    /**
     * The Use Case ID to add the Notebook to.
     */
    useCaseId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Notebook resource.
 */
export interface NotebookArgs {
    /**
     * The path to the .ipynb file to import.
     */
    filePath: pulumi.Input<string>;
    /**
     * The Use Case ID to add the Notebook to.
     */
    useCaseId?: pulumi.Input<string>;
}
