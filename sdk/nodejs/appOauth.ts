// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource for managing OAuth providers in DataRobot. This resource allows you to create, read, update, and delete OAuth provider configurations.
 */
export class AppOauth extends pulumi.CustomResource {
    /**
     * Get an existing AppOauth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppOauthState, opts?: pulumi.CustomResourceOptions): AppOauth {
        return new AppOauth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/appOauth:AppOauth';

    /**
     * Returns true if the given object is an instance of AppOauth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppOauth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppOauth.__pulumiType;
    }

    /**
     * OAuth client ID.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * OAuth client secret.
     */
    public readonly clientSecret!: pulumi.Output<string>;
    /**
     * Name of the OAuth provider.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organization ID associated with the OAuth provider.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * Secure config ID for the OAuth provider.
     */
    public /*out*/ readonly secureConfigId!: pulumi.Output<string>;
    /**
     * Status of the OAuth provider.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Type of the OAuth provider, e.g., 'google', 'box', etc.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a AppOauth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppOauthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppOauthArgs | AppOauthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppOauthState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["secureConfigId"] = state ? state.secureConfigId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AppOauthArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["clientId"] = args?.clientId ? pulumi.secret(args.clientId) : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["secureConfigId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientId", "clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AppOauth.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppOauth resources.
 */
export interface AppOauthState {
    /**
     * OAuth client ID.
     */
    clientId?: pulumi.Input<string>;
    /**
     * OAuth client secret.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Name of the OAuth provider.
     */
    name?: pulumi.Input<string>;
    /**
     * Organization ID associated with the OAuth provider.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Secure config ID for the OAuth provider.
     */
    secureConfigId?: pulumi.Input<string>;
    /**
     * Status of the OAuth provider.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the OAuth provider, e.g., 'google', 'box', etc.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppOauth resource.
 */
export interface AppOauthArgs {
    /**
     * OAuth client ID.
     */
    clientId: pulumi.Input<string>;
    /**
     * OAuth client secret.
     */
    clientSecret: pulumi.Input<string>;
    /**
     * Name of the OAuth provider.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of the OAuth provider, e.g., 'google', 'box', etc.
     */
    type: pulumi.Input<string>;
}
