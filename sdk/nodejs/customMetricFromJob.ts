// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Custom Metric From Job
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const example = new datarobot.CustomMetricFromJob("example", {
 *     deploymentId: datarobot_deployment.example.id,
 *     customJobId: datarobot_custom_metric_job.example.id,
 * });
 * export const exampleId = example.id;
 * ```
 */
export class CustomMetricFromJob extends pulumi.CustomResource {
    /**
     * Get an existing CustomMetricFromJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomMetricFromJobState, opts?: pulumi.CustomResourceOptions): CustomMetricFromJob {
        return new CustomMetricFromJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/customMetricFromJob:CustomMetricFromJob';

    /**
     * Returns true if the given object is an instance of CustomMetricFromJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomMetricFromJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomMetricFromJob.__pulumiType;
    }

    /**
     * Baseline value for the metric.
     */
    public readonly baselineValue!: pulumi.Output<number | undefined>;
    /**
     * Batch ID source when reading values from columnar dataset like a file.
     */
    public readonly batch!: pulumi.Output<outputs.CustomMetricFromJobBatch | undefined>;
    /**
     * ID of the Custom Job.
     */
    public readonly customJobId!: pulumi.Output<string>;
    /**
     * ID of the Deployment.
     */
    public readonly deploymentId!: pulumi.Output<string>;
    /**
     * Description of the metric.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the metric.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Additional parameters to be injected into the Metric Job at runtime.
     */
    public readonly parameterOverrides!: pulumi.Output<outputs.CustomMetricFromJobParameterOverride[] | undefined>;
    /**
     * Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.
     */
    public readonly sampleCount!: pulumi.Output<outputs.CustomMetricFromJobSampleCount | undefined>;
    /**
     * Defines at what intervals the metric job should run.
     */
    public readonly schedule!: pulumi.Output<outputs.CustomMetricFromJobSchedule | undefined>;
    /**
     * Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.
     */
    public readonly timestamp!: pulumi.Output<outputs.CustomMetricFromJobTimestamp | undefined>;
    /**
     * Value source when reading values from columnar dataset like a file.
     */
    public readonly value!: pulumi.Output<outputs.CustomMetricFromJobValue | undefined>;

    /**
     * Create a CustomMetricFromJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomMetricFromJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomMetricFromJobArgs | CustomMetricFromJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomMetricFromJobState | undefined;
            resourceInputs["baselineValue"] = state ? state.baselineValue : undefined;
            resourceInputs["batch"] = state ? state.batch : undefined;
            resourceInputs["customJobId"] = state ? state.customJobId : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameterOverrides"] = state ? state.parameterOverrides : undefined;
            resourceInputs["sampleCount"] = state ? state.sampleCount : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as CustomMetricFromJobArgs | undefined;
            if ((!args || args.customJobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customJobId'");
            }
            if ((!args || args.deploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentId'");
            }
            resourceInputs["baselineValue"] = args ? args.baselineValue : undefined;
            resourceInputs["batch"] = args ? args.batch : undefined;
            resourceInputs["customJobId"] = args ? args.customJobId : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameterOverrides"] = args ? args.parameterOverrides : undefined;
            resourceInputs["sampleCount"] = args ? args.sampleCount : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["timestamp"] = args ? args.timestamp : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomMetricFromJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomMetricFromJob resources.
 */
export interface CustomMetricFromJobState {
    /**
     * Baseline value for the metric.
     */
    baselineValue?: pulumi.Input<number>;
    /**
     * Batch ID source when reading values from columnar dataset like a file.
     */
    batch?: pulumi.Input<inputs.CustomMetricFromJobBatch>;
    /**
     * ID of the Custom Job.
     */
    customJobId?: pulumi.Input<string>;
    /**
     * ID of the Deployment.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * Description of the metric.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the metric.
     */
    name?: pulumi.Input<string>;
    /**
     * Additional parameters to be injected into the Metric Job at runtime.
     */
    parameterOverrides?: pulumi.Input<pulumi.Input<inputs.CustomMetricFromJobParameterOverride>[]>;
    /**
     * Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.
     */
    sampleCount?: pulumi.Input<inputs.CustomMetricFromJobSampleCount>;
    /**
     * Defines at what intervals the metric job should run.
     */
    schedule?: pulumi.Input<inputs.CustomMetricFromJobSchedule>;
    /**
     * Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.
     */
    timestamp?: pulumi.Input<inputs.CustomMetricFromJobTimestamp>;
    /**
     * Value source when reading values from columnar dataset like a file.
     */
    value?: pulumi.Input<inputs.CustomMetricFromJobValue>;
}

/**
 * The set of arguments for constructing a CustomMetricFromJob resource.
 */
export interface CustomMetricFromJobArgs {
    /**
     * Baseline value for the metric.
     */
    baselineValue?: pulumi.Input<number>;
    /**
     * Batch ID source when reading values from columnar dataset like a file.
     */
    batch?: pulumi.Input<inputs.CustomMetricFromJobBatch>;
    /**
     * ID of the Custom Job.
     */
    customJobId: pulumi.Input<string>;
    /**
     * ID of the Deployment.
     */
    deploymentId: pulumi.Input<string>;
    /**
     * Description of the metric.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the metric.
     */
    name?: pulumi.Input<string>;
    /**
     * Additional parameters to be injected into the Metric Job at runtime.
     */
    parameterOverrides?: pulumi.Input<pulumi.Input<inputs.CustomMetricFromJobParameterOverride>[]>;
    /**
     * Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.
     */
    sampleCount?: pulumi.Input<inputs.CustomMetricFromJobSampleCount>;
    /**
     * Defines at what intervals the metric job should run.
     */
    schedule?: pulumi.Input<inputs.CustomMetricFromJobSchedule>;
    /**
     * Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.
     */
    timestamp?: pulumi.Input<inputs.CustomMetricFromJobTimestamp>;
    /**
     * Value source when reading values from columnar dataset like a file.
     */
    value?: pulumi.Input<inputs.CustomMetricFromJobValue>;
}
