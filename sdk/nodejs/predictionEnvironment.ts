// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * prediction environment
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const example = new datarobot.PredictionEnvironment("example", {
 *     description: "Description for the example prediction environment",
 *     platform: "datarobotServerless",
 * });
 * ```
 */
export class PredictionEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing PredictionEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PredictionEnvironmentState, opts?: pulumi.CustomResourceOptions): PredictionEnvironment {
        return new PredictionEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/predictionEnvironment:PredictionEnvironment';

    /**
     * Returns true if the given object is an instance of PredictionEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PredictionEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PredictionEnvironment.__pulumiType;
    }

    /**
     * The description of the Prediction Environment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the Prediction Environment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The platform for the Prediction Environment.
     */
    public readonly platform!: pulumi.Output<string>;

    /**
     * Create a PredictionEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PredictionEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PredictionEnvironmentArgs | PredictionEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PredictionEnvironmentState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
        } else {
            const args = argsOrState as PredictionEnvironmentArgs | undefined;
            if ((!args || args.platform === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platform'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PredictionEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PredictionEnvironment resources.
 */
export interface PredictionEnvironmentState {
    /**
     * The description of the Prediction Environment.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Prediction Environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The platform for the Prediction Environment.
     */
    platform?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PredictionEnvironment resource.
 */
export interface PredictionEnvironmentArgs {
    /**
     * The description of the Prediction Environment.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Prediction Environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The platform for the Prediction Environment.
     */
    platform: pulumi.Input<string>;
}
