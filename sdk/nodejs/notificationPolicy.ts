// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Notification Policy
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const example = new datarobot.NotificationPolicy("example", {
 *     channelId: "11111111111111",
 *     channelScope: "template",
 *     eventGroup: "model_deployments.all",
 *     relatedEntityId: datarobot_deployment.example.id,
 *     relatedEntityType: "deployment",
 *     eventType: "model_deployments.accuracy_green",
 *     maximalFrequency: "PT1H",
 * });
 * export const datarobotNotificationPolicyId = example.id;
 * ```
 */
export class NotificationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NotificationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationPolicyState, opts?: pulumi.CustomResourceOptions): NotificationPolicy {
        return new NotificationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/notificationPolicy:NotificationPolicy';

    /**
     * Returns true if the given object is an instance of NotificationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationPolicy.__pulumiType;
    }

    /**
     * Whether or not the Notification Policy is active.
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * The Channel ID of the Notification Policy.
     */
    public readonly channelId!: pulumi.Output<string>;
    /**
     * The Channel scope of the Notification Policy.
     */
    public readonly channelScope!: pulumi.Output<string>;
    /**
     * The group of the events that trigger the Notification.
     */
    public readonly eventGroup!: pulumi.Output<string | undefined>;
    /**
     * The group of the event that triggers the Notification.
     */
    public readonly eventType!: pulumi.Output<string | undefined>;
    /**
     * The maximal frequency between policy runs in ISO 8601 duration string.
     */
    public readonly maximalFrequency!: pulumi.Output<string | undefined>;
    /**
     * The name of the Notification Policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the related entity for the Notification Policy.
     */
    public readonly relatedEntityId!: pulumi.Output<string>;
    /**
     * The Type of the related entity for the Notification Policy.
     */
    public readonly relatedEntityType!: pulumi.Output<string>;

    /**
     * Create a NotificationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationPolicyArgs | NotificationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationPolicyState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["channelId"] = state ? state.channelId : undefined;
            resourceInputs["channelScope"] = state ? state.channelScope : undefined;
            resourceInputs["eventGroup"] = state ? state.eventGroup : undefined;
            resourceInputs["eventType"] = state ? state.eventType : undefined;
            resourceInputs["maximalFrequency"] = state ? state.maximalFrequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["relatedEntityId"] = state ? state.relatedEntityId : undefined;
            resourceInputs["relatedEntityType"] = state ? state.relatedEntityType : undefined;
        } else {
            const args = argsOrState as NotificationPolicyArgs | undefined;
            if ((!args || args.channelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelId'");
            }
            if ((!args || args.channelScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelScope'");
            }
            if ((!args || args.relatedEntityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relatedEntityId'");
            }
            if ((!args || args.relatedEntityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relatedEntityType'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["channelId"] = args ? args.channelId : undefined;
            resourceInputs["channelScope"] = args ? args.channelScope : undefined;
            resourceInputs["eventGroup"] = args ? args.eventGroup : undefined;
            resourceInputs["eventType"] = args ? args.eventType : undefined;
            resourceInputs["maximalFrequency"] = args ? args.maximalFrequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["relatedEntityId"] = args ? args.relatedEntityId : undefined;
            resourceInputs["relatedEntityType"] = args ? args.relatedEntityType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationPolicy resources.
 */
export interface NotificationPolicyState {
    /**
     * Whether or not the Notification Policy is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The Channel ID of the Notification Policy.
     */
    channelId?: pulumi.Input<string>;
    /**
     * The Channel scope of the Notification Policy.
     */
    channelScope?: pulumi.Input<string>;
    /**
     * The group of the events that trigger the Notification.
     */
    eventGroup?: pulumi.Input<string>;
    /**
     * The group of the event that triggers the Notification.
     */
    eventType?: pulumi.Input<string>;
    /**
     * The maximal frequency between policy runs in ISO 8601 duration string.
     */
    maximalFrequency?: pulumi.Input<string>;
    /**
     * The name of the Notification Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the related entity for the Notification Policy.
     */
    relatedEntityId?: pulumi.Input<string>;
    /**
     * The Type of the related entity for the Notification Policy.
     */
    relatedEntityType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationPolicy resource.
 */
export interface NotificationPolicyArgs {
    /**
     * Whether or not the Notification Policy is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The Channel ID of the Notification Policy.
     */
    channelId: pulumi.Input<string>;
    /**
     * The Channel scope of the Notification Policy.
     */
    channelScope: pulumi.Input<string>;
    /**
     * The group of the events that trigger the Notification.
     */
    eventGroup?: pulumi.Input<string>;
    /**
     * The group of the event that triggers the Notification.
     */
    eventType?: pulumi.Input<string>;
    /**
     * The maximal frequency between policy runs in ISO 8601 duration string.
     */
    maximalFrequency?: pulumi.Input<string>;
    /**
     * The name of the Notification Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the related entity for the Notification Policy.
     */
    relatedEntityId: pulumi.Input<string>;
    /**
     * The Type of the related entity for the Notification Policy.
     */
    relatedEntityType: pulumi.Input<string>;
}
