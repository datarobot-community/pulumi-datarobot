// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Data set from file
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const exampleRemoteRepository = new datarobot.RemoteRepository("exampleRemoteRepository", {
 *     description: "GitHub repository with Datarobot user models",
 *     location: "https://github.com/datarobot/datarobot-user-models",
 *     sourceType: "github",
 * });
 * // set the credential id for private repositories
 * // credential_id = datarobot_api_token_credential.example.id
 * const exampleCustomModel = new datarobot.CustomModel("exampleCustomModel", {
 *     description: "An example custom model from GitHub repository",
 *     files: [
 *         "file1.py",
 *         "file2.py",
 *     ],
 *     targetType: "Binary",
 *     targetName: "my_label",
 *     baseEnvironmentId: "65f9b27eab986d30d4c64268",
 * });
 * // Optional
 * // source_remote_repositories = [
 * //   {
 * //     id  = datarobot_remote_repository.example.id
 * //     ref = "master"
 * //     source_paths = [
 * //       "model_templates/python3_dummy_binary",
 * //     ]
 * //   }
 * // ]
 * // guard_configurations = [
 * //   {
 * //     template_name = "Rouge 1"
 * //     name          = "Rouge 1 response"
 * //     stages        = ["response"]
 * //     intervention = {
 * //       action  = "block"
 * //       message = "response has been blocked by Rogue 1 guard"
 * //       condition = {
 * //         comparand  = 0.8
 * //         comparator = "lessThan"
 * //       }
 * //     }
 * //   },
 * // ]
 * // overall_moderation_configuration = {
 * //   timeout_sec    = 120
 * //   timeout_action = "score"
 * // }
 * // resource_settings = {
 * //   memory_mb      = 512
 * //   replicas       = 2
 * //   network_access = "NONE"
 * // }
 * export const exampleId = exampleCustomModel.id;
 * ```
 */
export class CustomModel extends pulumi.CustomResource {
    /**
     * Get an existing CustomModel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomModelState, opts?: pulumi.CustomResourceOptions): CustomModel {
        return new CustomModel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/customModel:CustomModel';

    /**
     * Returns true if the given object is an instance of CustomModel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomModel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomModel.__pulumiType;
    }

    /**
     * The ID of the base environment for the Custom Model.
     */
    public readonly baseEnvironmentId!: pulumi.Output<string>;
    /**
     * The ID of the base environment version for the Custom Model.
     */
    public readonly baseEnvironmentVersionId!: pulumi.Output<string>;
    /**
     * Class labels for multiclass classification. Cannot be used with class*labels*file.
     */
    public readonly classLabels!: pulumi.Output<string[] | undefined>;
    /**
     * Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.
     */
    public readonly classLabelsFile!: pulumi.Output<string | undefined>;
    /**
     * The number of deployments for the Custom Model.
     */
    public /*out*/ readonly deploymentsCount!: pulumi.Output<number>;
    /**
     * The description of the Custom Model.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.
     */
    public readonly files!: pulumi.Output<any | undefined>;
    /**
     * The hash of file contents for each file in files.
     */
    public /*out*/ readonly filesHashes!: pulumi.Output<string[]>;
    /**
     * The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.
     */
    public readonly folderPath!: pulumi.Output<string | undefined>;
    /**
     * The hash of the folder path contents.
     */
    public /*out*/ readonly folderPathHash!: pulumi.Output<string>;
    /**
     * The guard configurations for the Custom Model.
     */
    public readonly guardConfigurations!: pulumi.Output<outputs.CustomModelGuardConfiguration[] | undefined>;
    /**
     * Flag indicating if the Custom Model is a proxy model.
     */
    public readonly isProxy!: pulumi.Output<boolean>;
    /**
     * The language used to build the Custom Model.
     */
    public readonly language!: pulumi.Output<string | undefined>;
    /**
     * The name of the Custom Model.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The negative class label of the Custom Model.
     */
    public readonly negativeClassLabel!: pulumi.Output<string>;
    /**
     * The overall moderation configuration for the Custom Model.
     */
    public readonly overallModerationConfiguration!: pulumi.Output<outputs.CustomModelOverallModerationConfiguration | undefined>;
    /**
     * The positive class label of the Custom Model.
     */
    public readonly positiveClassLabel!: pulumi.Output<string>;
    /**
     * The prediction threshold of the Custom Model.
     */
    public readonly predictionThreshold!: pulumi.Output<number>;
    /**
     * The resource settings for the Custom Model.
     */
    public readonly resourceSettings!: pulumi.Output<outputs.CustomModelResourceSettings>;
    /**
     * The runtime parameter values for the Custom Model.
     */
    public readonly runtimeParameterValues!: pulumi.Output<outputs.CustomModelRuntimeParameterValue[]>;
    /**
     * The ID of the source LLM Blueprint for the Custom Model.
     */
    public readonly sourceLlmBlueprintId!: pulumi.Output<string | undefined>;
    /**
     * The source remote repositories for the Custom Model.
     */
    public readonly sourceRemoteRepositories!: pulumi.Output<outputs.CustomModelSourceRemoteRepository[] | undefined>;
    /**
     * The target name of the Custom Model.
     */
    public readonly targetName!: pulumi.Output<string>;
    /**
     * The target type of the Custom Model.
     */
    public readonly targetType!: pulumi.Output<string>;
    /**
     * The name of the partition column in the training dataset assigned to the Custom Model.
     */
    public readonly trainingDataPartitionColumn!: pulumi.Output<string | undefined>;
    /**
     * The ID of the training dataset assigned to the Custom Model.
     */
    public readonly trainingDatasetId!: pulumi.Output<string | undefined>;
    /**
     * The name of the training dataset assigned to the Custom Model.
     */
    public /*out*/ readonly trainingDatasetName!: pulumi.Output<string>;
    /**
     * The version ID of the training dataset assigned to the Custom Model.
     */
    public /*out*/ readonly trainingDatasetVersionId!: pulumi.Output<string>;
    /**
     * The ID of the latest Custom Model version.
     */
    public /*out*/ readonly versionId!: pulumi.Output<string>;

    /**
     * Create a CustomModel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CustomModelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomModelArgs | CustomModelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomModelState | undefined;
            resourceInputs["baseEnvironmentId"] = state ? state.baseEnvironmentId : undefined;
            resourceInputs["baseEnvironmentVersionId"] = state ? state.baseEnvironmentVersionId : undefined;
            resourceInputs["classLabels"] = state ? state.classLabels : undefined;
            resourceInputs["classLabelsFile"] = state ? state.classLabelsFile : undefined;
            resourceInputs["deploymentsCount"] = state ? state.deploymentsCount : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["filesHashes"] = state ? state.filesHashes : undefined;
            resourceInputs["folderPath"] = state ? state.folderPath : undefined;
            resourceInputs["folderPathHash"] = state ? state.folderPathHash : undefined;
            resourceInputs["guardConfigurations"] = state ? state.guardConfigurations : undefined;
            resourceInputs["isProxy"] = state ? state.isProxy : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["negativeClassLabel"] = state ? state.negativeClassLabel : undefined;
            resourceInputs["overallModerationConfiguration"] = state ? state.overallModerationConfiguration : undefined;
            resourceInputs["positiveClassLabel"] = state ? state.positiveClassLabel : undefined;
            resourceInputs["predictionThreshold"] = state ? state.predictionThreshold : undefined;
            resourceInputs["resourceSettings"] = state ? state.resourceSettings : undefined;
            resourceInputs["runtimeParameterValues"] = state ? state.runtimeParameterValues : undefined;
            resourceInputs["sourceLlmBlueprintId"] = state ? state.sourceLlmBlueprintId : undefined;
            resourceInputs["sourceRemoteRepositories"] = state ? state.sourceRemoteRepositories : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["trainingDataPartitionColumn"] = state ? state.trainingDataPartitionColumn : undefined;
            resourceInputs["trainingDatasetId"] = state ? state.trainingDatasetId : undefined;
            resourceInputs["trainingDatasetName"] = state ? state.trainingDatasetName : undefined;
            resourceInputs["trainingDatasetVersionId"] = state ? state.trainingDatasetVersionId : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as CustomModelArgs | undefined;
            resourceInputs["baseEnvironmentId"] = args ? args.baseEnvironmentId : undefined;
            resourceInputs["baseEnvironmentVersionId"] = args ? args.baseEnvironmentVersionId : undefined;
            resourceInputs["classLabels"] = args ? args.classLabels : undefined;
            resourceInputs["classLabelsFile"] = args ? args.classLabelsFile : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["folderPath"] = args ? args.folderPath : undefined;
            resourceInputs["guardConfigurations"] = args ? args.guardConfigurations : undefined;
            resourceInputs["isProxy"] = args ? args.isProxy : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["negativeClassLabel"] = args ? args.negativeClassLabel : undefined;
            resourceInputs["overallModerationConfiguration"] = args ? args.overallModerationConfiguration : undefined;
            resourceInputs["positiveClassLabel"] = args ? args.positiveClassLabel : undefined;
            resourceInputs["predictionThreshold"] = args ? args.predictionThreshold : undefined;
            resourceInputs["resourceSettings"] = args ? args.resourceSettings : undefined;
            resourceInputs["runtimeParameterValues"] = args ? args.runtimeParameterValues : undefined;
            resourceInputs["sourceLlmBlueprintId"] = args ? args.sourceLlmBlueprintId : undefined;
            resourceInputs["sourceRemoteRepositories"] = args ? args.sourceRemoteRepositories : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["trainingDataPartitionColumn"] = args ? args.trainingDataPartitionColumn : undefined;
            resourceInputs["trainingDatasetId"] = args ? args.trainingDatasetId : undefined;
            resourceInputs["deploymentsCount"] = undefined /*out*/;
            resourceInputs["filesHashes"] = undefined /*out*/;
            resourceInputs["folderPathHash"] = undefined /*out*/;
            resourceInputs["trainingDatasetName"] = undefined /*out*/;
            resourceInputs["trainingDatasetVersionId"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomModel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomModel resources.
 */
export interface CustomModelState {
    /**
     * The ID of the base environment for the Custom Model.
     */
    baseEnvironmentId?: pulumi.Input<string>;
    /**
     * The ID of the base environment version for the Custom Model.
     */
    baseEnvironmentVersionId?: pulumi.Input<string>;
    /**
     * Class labels for multiclass classification. Cannot be used with class*labels*file.
     */
    classLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.
     */
    classLabelsFile?: pulumi.Input<string>;
    /**
     * The number of deployments for the Custom Model.
     */
    deploymentsCount?: pulumi.Input<number>;
    /**
     * The description of the Custom Model.
     */
    description?: pulumi.Input<string>;
    /**
     * The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.
     */
    files?: any;
    /**
     * The hash of file contents for each file in files.
     */
    filesHashes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The hash of the folder path contents.
     */
    folderPathHash?: pulumi.Input<string>;
    /**
     * The guard configurations for the Custom Model.
     */
    guardConfigurations?: pulumi.Input<pulumi.Input<inputs.CustomModelGuardConfiguration>[]>;
    /**
     * Flag indicating if the Custom Model is a proxy model.
     */
    isProxy?: pulumi.Input<boolean>;
    /**
     * The language used to build the Custom Model.
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the Custom Model.
     */
    name?: pulumi.Input<string>;
    /**
     * The negative class label of the Custom Model.
     */
    negativeClassLabel?: pulumi.Input<string>;
    /**
     * The overall moderation configuration for the Custom Model.
     */
    overallModerationConfiguration?: pulumi.Input<inputs.CustomModelOverallModerationConfiguration>;
    /**
     * The positive class label of the Custom Model.
     */
    positiveClassLabel?: pulumi.Input<string>;
    /**
     * The prediction threshold of the Custom Model.
     */
    predictionThreshold?: pulumi.Input<number>;
    /**
     * The resource settings for the Custom Model.
     */
    resourceSettings?: pulumi.Input<inputs.CustomModelResourceSettings>;
    /**
     * The runtime parameter values for the Custom Model.
     */
    runtimeParameterValues?: pulumi.Input<pulumi.Input<inputs.CustomModelRuntimeParameterValue>[]>;
    /**
     * The ID of the source LLM Blueprint for the Custom Model.
     */
    sourceLlmBlueprintId?: pulumi.Input<string>;
    /**
     * The source remote repositories for the Custom Model.
     */
    sourceRemoteRepositories?: pulumi.Input<pulumi.Input<inputs.CustomModelSourceRemoteRepository>[]>;
    /**
     * The target name of the Custom Model.
     */
    targetName?: pulumi.Input<string>;
    /**
     * The target type of the Custom Model.
     */
    targetType?: pulumi.Input<string>;
    /**
     * The name of the partition column in the training dataset assigned to the Custom Model.
     */
    trainingDataPartitionColumn?: pulumi.Input<string>;
    /**
     * The ID of the training dataset assigned to the Custom Model.
     */
    trainingDatasetId?: pulumi.Input<string>;
    /**
     * The name of the training dataset assigned to the Custom Model.
     */
    trainingDatasetName?: pulumi.Input<string>;
    /**
     * The version ID of the training dataset assigned to the Custom Model.
     */
    trainingDatasetVersionId?: pulumi.Input<string>;
    /**
     * The ID of the latest Custom Model version.
     */
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomModel resource.
 */
export interface CustomModelArgs {
    /**
     * The ID of the base environment for the Custom Model.
     */
    baseEnvironmentId?: pulumi.Input<string>;
    /**
     * The ID of the base environment version for the Custom Model.
     */
    baseEnvironmentVersionId?: pulumi.Input<string>;
    /**
     * Class labels for multiclass classification. Cannot be used with class*labels*file.
     */
    classLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.
     */
    classLabelsFile?: pulumi.Input<string>;
    /**
     * The description of the Custom Model.
     */
    description?: pulumi.Input<string>;
    /**
     * The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.
     */
    files?: any;
    /**
     * The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The guard configurations for the Custom Model.
     */
    guardConfigurations?: pulumi.Input<pulumi.Input<inputs.CustomModelGuardConfiguration>[]>;
    /**
     * Flag indicating if the Custom Model is a proxy model.
     */
    isProxy?: pulumi.Input<boolean>;
    /**
     * The language used to build the Custom Model.
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the Custom Model.
     */
    name?: pulumi.Input<string>;
    /**
     * The negative class label of the Custom Model.
     */
    negativeClassLabel?: pulumi.Input<string>;
    /**
     * The overall moderation configuration for the Custom Model.
     */
    overallModerationConfiguration?: pulumi.Input<inputs.CustomModelOverallModerationConfiguration>;
    /**
     * The positive class label of the Custom Model.
     */
    positiveClassLabel?: pulumi.Input<string>;
    /**
     * The prediction threshold of the Custom Model.
     */
    predictionThreshold?: pulumi.Input<number>;
    /**
     * The resource settings for the Custom Model.
     */
    resourceSettings?: pulumi.Input<inputs.CustomModelResourceSettings>;
    /**
     * The runtime parameter values for the Custom Model.
     */
    runtimeParameterValues?: pulumi.Input<pulumi.Input<inputs.CustomModelRuntimeParameterValue>[]>;
    /**
     * The ID of the source LLM Blueprint for the Custom Model.
     */
    sourceLlmBlueprintId?: pulumi.Input<string>;
    /**
     * The source remote repositories for the Custom Model.
     */
    sourceRemoteRepositories?: pulumi.Input<pulumi.Input<inputs.CustomModelSourceRemoteRepository>[]>;
    /**
     * The target name of the Custom Model.
     */
    targetName?: pulumi.Input<string>;
    /**
     * The target type of the Custom Model.
     */
    targetType?: pulumi.Input<string>;
    /**
     * The name of the partition column in the training dataset assigned to the Custom Model.
     */
    trainingDataPartitionColumn?: pulumi.Input<string>;
    /**
     * The ID of the training dataset assigned to the Custom Model.
     */
    trainingDatasetId?: pulumi.Input<string>;
}
