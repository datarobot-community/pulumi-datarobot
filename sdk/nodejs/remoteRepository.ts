// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * remote repository
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const githubExample = new datarobot.RemoteRepository("githubExample", {
 *     description: "Description for the example remote repository",
 *     location: "https://github.com/datarobot/datarobot-user-models",
 *     sourceType: "github",
 * });
 * const gitlabExample = new datarobot.RemoteRepository("gitlabExample", {
 *     location: "https://gitlab.yourcompany.com/username/repository",
 *     personalAccessToken: "your_personal_access_token",
 *     sourceType: "gitlab-cloud",
 * });
 * const bitbucketExample = new datarobot.RemoteRepository("bitbucketExample", {
 *     location: "https://bitbucket.yourcompany.com/projects/PROJECTKEY/repos/REPONAME/browse",
 *     sourceType: "bitbucket-server",
 * });
 * const s3Example = new datarobot.RemoteRepository("s3Example", {
 *     location: "my-s3-bucket",
 *     sourceType: "s3",
 * });
 * ```
 */
export class RemoteRepository extends pulumi.CustomResource {
    /**
     * Get an existing RemoteRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteRepositoryState, opts?: pulumi.CustomResourceOptions): RemoteRepository {
        return new RemoteRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/remoteRepository:RemoteRepository';

    /**
     * Returns true if the given object is an instance of RemoteRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteRepository.__pulumiType;
    }

    /**
     * The AWS access key ID for the Remote Repository.
     */
    public readonly awsAccessKeyId!: pulumi.Output<string | undefined>;
    /**
     * The AWS secret access key for the Remote Repository.
     */
    public readonly awsSecretAccessKey!: pulumi.Output<string | undefined>;
    /**
     * The AWS session token for the Remote Repository.
     */
    public readonly awsSessionToken!: pulumi.Output<string | undefined>;
    /**
     * The description of the Remote Repository.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The location of the Remote Repository. (Bucket name for S3)
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the Remote Repository.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The personal access token for the Remote Repository.
     */
    public readonly personalAccessToken!: pulumi.Output<string | undefined>;
    /**
     * The source type of the Remote Repository.
     */
    public readonly sourceType!: pulumi.Output<string>;

    /**
     * Create a RemoteRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemoteRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteRepositoryArgs | RemoteRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteRepositoryState | undefined;
            resourceInputs["awsAccessKeyId"] = state ? state.awsAccessKeyId : undefined;
            resourceInputs["awsSecretAccessKey"] = state ? state.awsSecretAccessKey : undefined;
            resourceInputs["awsSessionToken"] = state ? state.awsSessionToken : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["personalAccessToken"] = state ? state.personalAccessToken : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
        } else {
            const args = argsOrState as RemoteRepositoryArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            resourceInputs["awsAccessKeyId"] = args ? args.awsAccessKeyId : undefined;
            resourceInputs["awsSecretAccessKey"] = args ? args.awsSecretAccessKey : undefined;
            resourceInputs["awsSessionToken"] = args ? args.awsSessionToken : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["personalAccessToken"] = args ? args.personalAccessToken : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RemoteRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RemoteRepository resources.
 */
export interface RemoteRepositoryState {
    /**
     * The AWS access key ID for the Remote Repository.
     */
    awsAccessKeyId?: pulumi.Input<string>;
    /**
     * The AWS secret access key for the Remote Repository.
     */
    awsSecretAccessKey?: pulumi.Input<string>;
    /**
     * The AWS session token for the Remote Repository.
     */
    awsSessionToken?: pulumi.Input<string>;
    /**
     * The description of the Remote Repository.
     */
    description?: pulumi.Input<string>;
    /**
     * The location of the Remote Repository. (Bucket name for S3)
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the Remote Repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The personal access token for the Remote Repository.
     */
    personalAccessToken?: pulumi.Input<string>;
    /**
     * The source type of the Remote Repository.
     */
    sourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemoteRepository resource.
 */
export interface RemoteRepositoryArgs {
    /**
     * The AWS access key ID for the Remote Repository.
     */
    awsAccessKeyId?: pulumi.Input<string>;
    /**
     * The AWS secret access key for the Remote Repository.
     */
    awsSecretAccessKey?: pulumi.Input<string>;
    /**
     * The AWS session token for the Remote Repository.
     */
    awsSessionToken?: pulumi.Input<string>;
    /**
     * The description of the Remote Repository.
     */
    description?: pulumi.Input<string>;
    /**
     * The location of the Remote Repository. (Bucket name for S3)
     */
    location: pulumi.Input<string>;
    /**
     * The name of the Remote Repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The personal access token for the Remote Repository.
     */
    personalAccessToken?: pulumi.Input<string>;
    /**
     * The source type of the Remote Repository.
     */
    sourceType: pulumi.Input<string>;
}
