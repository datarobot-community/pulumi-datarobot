// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Batch Prediction Job Definition
 */
export class BatchPredictionJobDefinition extends pulumi.CustomResource {
    /**
     * Get an existing BatchPredictionJobDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BatchPredictionJobDefinitionState, opts?: pulumi.CustomResourceOptions): BatchPredictionJobDefinition {
        return new BatchPredictionJobDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/batchPredictionJobDefinition:BatchPredictionJobDefinition';

    /**
     * Returns true if the given object is an instance of BatchPredictionJobDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BatchPredictionJobDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BatchPredictionJobDefinition.__pulumiType;
    }

    /**
     * Default behavior is to abort the job if too many rows fail scoring. This will free up resources for other jobs that may score successfully. Set to false to unconditionally score every row no matter how many errors are encountered. Defaults to True.
     */
    public readonly abortOnError!: pulumi.Output<boolean>;
    /**
     * Which strategy should be used to determine the chunk size. Can be either a named strategy or a fixed size in bytes.
     */
    public readonly chunkSize!: pulumi.Output<any | undefined>;
    /**
     * Mapping with column renaming for output table.
     */
    public readonly columnNamesRemapping!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * CSV intake and output settings.
     */
    public readonly csvSettings!: pulumi.Output<outputs.BatchPredictionJobDefinitionCsvSettings>;
    /**
     * The ID of the deployment to use for the batch prediction job.
     */
    public readonly deploymentId!: pulumi.Output<string>;
    /**
     * Whether or not the job definition should be active on a scheduled basis. If True, schedule is required.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Which algorithm will be used to calculate prediction explanations.
     */
    public readonly explanationAlgorithm!: pulumi.Output<string>;
    /**
     * Include the predictionStatus column in the output. Defaults to False.
     */
    public readonly includePredictionStatus!: pulumi.Output<boolean>;
    /**
     * Flag that enables returning of all probability columns. Defaults to True.
     */
    public readonly includeProbabilities!: pulumi.Output<boolean>;
    /**
     * List the subset of classes if a user doesn’t want all the classes. Defaults to [].
     */
    public readonly includeProbabilitiesClasses!: pulumi.Output<string[] | undefined>;
    /**
     * A dict configuring how data is coming from.
     */
    public readonly intakeSettings!: pulumi.Output<outputs.BatchPredictionJobDefinitionIntakeSettings>;
    /**
     * Compute prediction explanations for this amount of features.
     */
    public readonly maxExplanations!: pulumi.Output<number>;
    /**
     * The name you want your job to be identified with. Must be unique across the organization’s existing jobs.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of concurrent chunks to score simultaneously. Defaults to the available number of cores of the deployment. Lower it to leave resources for real-time scoring.
     */
    public readonly numConcurrent!: pulumi.Output<number | undefined>;
    /**
     * A dict configuring how scored data is to be saved.
     */
    public readonly outputSettings!: pulumi.Output<outputs.BatchPredictionJobDefinitionOutputSettings>;
    /**
     * Keep these columns from the scoring dataset in the scored dataset. This is useful for correlating predictions with source data.
     */
    public readonly passthroughColumns!: pulumi.Output<string[] | undefined>;
    /**
     * To pass through every column from the scoring dataset, set this to all.
     */
    public readonly passthroughColumnsSet!: pulumi.Output<string | undefined>;
    /**
     * Defaults to instance specified by deployment or system configuration.
     */
    public readonly predictionInstance!: pulumi.Output<outputs.BatchPredictionJobDefinitionPredictionInstance | undefined>;
    /**
     * Threshold is the point that sets the class boundary for a predicted value. This value can be set between 0.0 and 1.0.
     */
    public readonly predictionThreshold!: pulumi.Output<number | undefined>;
    /**
     * Add prediction warnings to the scored data. Currently only supported for regression models. Defaults to False.
     */
    public readonly predictionWarningEnabled!: pulumi.Output<boolean>;
    /**
     * Defines at what intervals the job should run.
     */
    public readonly schedule!: pulumi.Output<outputs.BatchPredictionJobDefinitionSchedule | undefined>;
    /**
     * Skips drift tracking on any predictions made from this job. This is useful when running non-production workloads to not affect drift tracking and cause unnecessary alerts. Defaults to false.
     */
    public readonly skipDriftTracking!: pulumi.Output<boolean>;
    /**
     * Only compute prediction explanations for predictions above this threshold. Can be combined with threshold_low.
     */
    public readonly thresholdHigh!: pulumi.Output<number | undefined>;
    /**
     * Only compute prediction explanations for predictions below this threshold. Can be combined with threshold_high.
     */
    public readonly thresholdLow!: pulumi.Output<number | undefined>;
    /**
     * Configuration for time-series scoring.
     */
    public readonly timeseriesSettings!: pulumi.Output<outputs.BatchPredictionJobDefinitionTimeseriesSettings | undefined>;

    /**
     * Create a BatchPredictionJobDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BatchPredictionJobDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BatchPredictionJobDefinitionArgs | BatchPredictionJobDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BatchPredictionJobDefinitionState | undefined;
            resourceInputs["abortOnError"] = state ? state.abortOnError : undefined;
            resourceInputs["chunkSize"] = state ? state.chunkSize : undefined;
            resourceInputs["columnNamesRemapping"] = state ? state.columnNamesRemapping : undefined;
            resourceInputs["csvSettings"] = state ? state.csvSettings : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["explanationAlgorithm"] = state ? state.explanationAlgorithm : undefined;
            resourceInputs["includePredictionStatus"] = state ? state.includePredictionStatus : undefined;
            resourceInputs["includeProbabilities"] = state ? state.includeProbabilities : undefined;
            resourceInputs["includeProbabilitiesClasses"] = state ? state.includeProbabilitiesClasses : undefined;
            resourceInputs["intakeSettings"] = state ? state.intakeSettings : undefined;
            resourceInputs["maxExplanations"] = state ? state.maxExplanations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numConcurrent"] = state ? state.numConcurrent : undefined;
            resourceInputs["outputSettings"] = state ? state.outputSettings : undefined;
            resourceInputs["passthroughColumns"] = state ? state.passthroughColumns : undefined;
            resourceInputs["passthroughColumnsSet"] = state ? state.passthroughColumnsSet : undefined;
            resourceInputs["predictionInstance"] = state ? state.predictionInstance : undefined;
            resourceInputs["predictionThreshold"] = state ? state.predictionThreshold : undefined;
            resourceInputs["predictionWarningEnabled"] = state ? state.predictionWarningEnabled : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["skipDriftTracking"] = state ? state.skipDriftTracking : undefined;
            resourceInputs["thresholdHigh"] = state ? state.thresholdHigh : undefined;
            resourceInputs["thresholdLow"] = state ? state.thresholdLow : undefined;
            resourceInputs["timeseriesSettings"] = state ? state.timeseriesSettings : undefined;
        } else {
            const args = argsOrState as BatchPredictionJobDefinitionArgs | undefined;
            if ((!args || args.deploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentId'");
            }
            if ((!args || args.intakeSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intakeSettings'");
            }
            resourceInputs["abortOnError"] = args ? args.abortOnError : undefined;
            resourceInputs["chunkSize"] = args ? args.chunkSize : undefined;
            resourceInputs["columnNamesRemapping"] = args ? args.columnNamesRemapping : undefined;
            resourceInputs["csvSettings"] = args ? args.csvSettings : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["explanationAlgorithm"] = args ? args.explanationAlgorithm : undefined;
            resourceInputs["includePredictionStatus"] = args ? args.includePredictionStatus : undefined;
            resourceInputs["includeProbabilities"] = args ? args.includeProbabilities : undefined;
            resourceInputs["includeProbabilitiesClasses"] = args ? args.includeProbabilitiesClasses : undefined;
            resourceInputs["intakeSettings"] = args ? args.intakeSettings : undefined;
            resourceInputs["maxExplanations"] = args ? args.maxExplanations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numConcurrent"] = args ? args.numConcurrent : undefined;
            resourceInputs["outputSettings"] = args ? args.outputSettings : undefined;
            resourceInputs["passthroughColumns"] = args ? args.passthroughColumns : undefined;
            resourceInputs["passthroughColumnsSet"] = args ? args.passthroughColumnsSet : undefined;
            resourceInputs["predictionInstance"] = args ? args.predictionInstance : undefined;
            resourceInputs["predictionThreshold"] = args ? args.predictionThreshold : undefined;
            resourceInputs["predictionWarningEnabled"] = args ? args.predictionWarningEnabled : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["skipDriftTracking"] = args ? args.skipDriftTracking : undefined;
            resourceInputs["thresholdHigh"] = args ? args.thresholdHigh : undefined;
            resourceInputs["thresholdLow"] = args ? args.thresholdLow : undefined;
            resourceInputs["timeseriesSettings"] = args ? args.timeseriesSettings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BatchPredictionJobDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BatchPredictionJobDefinition resources.
 */
export interface BatchPredictionJobDefinitionState {
    /**
     * Default behavior is to abort the job if too many rows fail scoring. This will free up resources for other jobs that may score successfully. Set to false to unconditionally score every row no matter how many errors are encountered. Defaults to True.
     */
    abortOnError?: pulumi.Input<boolean>;
    /**
     * Which strategy should be used to determine the chunk size. Can be either a named strategy or a fixed size in bytes.
     */
    chunkSize?: any;
    /**
     * Mapping with column renaming for output table.
     */
    columnNamesRemapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * CSV intake and output settings.
     */
    csvSettings?: pulumi.Input<inputs.BatchPredictionJobDefinitionCsvSettings>;
    /**
     * The ID of the deployment to use for the batch prediction job.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * Whether or not the job definition should be active on a scheduled basis. If True, schedule is required.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Which algorithm will be used to calculate prediction explanations.
     */
    explanationAlgorithm?: pulumi.Input<string>;
    /**
     * Include the predictionStatus column in the output. Defaults to False.
     */
    includePredictionStatus?: pulumi.Input<boolean>;
    /**
     * Flag that enables returning of all probability columns. Defaults to True.
     */
    includeProbabilities?: pulumi.Input<boolean>;
    /**
     * List the subset of classes if a user doesn’t want all the classes. Defaults to [].
     */
    includeProbabilitiesClasses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A dict configuring how data is coming from.
     */
    intakeSettings?: pulumi.Input<inputs.BatchPredictionJobDefinitionIntakeSettings>;
    /**
     * Compute prediction explanations for this amount of features.
     */
    maxExplanations?: pulumi.Input<number>;
    /**
     * The name you want your job to be identified with. Must be unique across the organization’s existing jobs.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of concurrent chunks to score simultaneously. Defaults to the available number of cores of the deployment. Lower it to leave resources for real-time scoring.
     */
    numConcurrent?: pulumi.Input<number>;
    /**
     * A dict configuring how scored data is to be saved.
     */
    outputSettings?: pulumi.Input<inputs.BatchPredictionJobDefinitionOutputSettings>;
    /**
     * Keep these columns from the scoring dataset in the scored dataset. This is useful for correlating predictions with source data.
     */
    passthroughColumns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * To pass through every column from the scoring dataset, set this to all.
     */
    passthroughColumnsSet?: pulumi.Input<string>;
    /**
     * Defaults to instance specified by deployment or system configuration.
     */
    predictionInstance?: pulumi.Input<inputs.BatchPredictionJobDefinitionPredictionInstance>;
    /**
     * Threshold is the point that sets the class boundary for a predicted value. This value can be set between 0.0 and 1.0.
     */
    predictionThreshold?: pulumi.Input<number>;
    /**
     * Add prediction warnings to the scored data. Currently only supported for regression models. Defaults to False.
     */
    predictionWarningEnabled?: pulumi.Input<boolean>;
    /**
     * Defines at what intervals the job should run.
     */
    schedule?: pulumi.Input<inputs.BatchPredictionJobDefinitionSchedule>;
    /**
     * Skips drift tracking on any predictions made from this job. This is useful when running non-production workloads to not affect drift tracking and cause unnecessary alerts. Defaults to false.
     */
    skipDriftTracking?: pulumi.Input<boolean>;
    /**
     * Only compute prediction explanations for predictions above this threshold. Can be combined with threshold_low.
     */
    thresholdHigh?: pulumi.Input<number>;
    /**
     * Only compute prediction explanations for predictions below this threshold. Can be combined with threshold_high.
     */
    thresholdLow?: pulumi.Input<number>;
    /**
     * Configuration for time-series scoring.
     */
    timeseriesSettings?: pulumi.Input<inputs.BatchPredictionJobDefinitionTimeseriesSettings>;
}

/**
 * The set of arguments for constructing a BatchPredictionJobDefinition resource.
 */
export interface BatchPredictionJobDefinitionArgs {
    /**
     * Default behavior is to abort the job if too many rows fail scoring. This will free up resources for other jobs that may score successfully. Set to false to unconditionally score every row no matter how many errors are encountered. Defaults to True.
     */
    abortOnError?: pulumi.Input<boolean>;
    /**
     * Which strategy should be used to determine the chunk size. Can be either a named strategy or a fixed size in bytes.
     */
    chunkSize?: any;
    /**
     * Mapping with column renaming for output table.
     */
    columnNamesRemapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * CSV intake and output settings.
     */
    csvSettings?: pulumi.Input<inputs.BatchPredictionJobDefinitionCsvSettings>;
    /**
     * The ID of the deployment to use for the batch prediction job.
     */
    deploymentId: pulumi.Input<string>;
    /**
     * Whether or not the job definition should be active on a scheduled basis. If True, schedule is required.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Which algorithm will be used to calculate prediction explanations.
     */
    explanationAlgorithm?: pulumi.Input<string>;
    /**
     * Include the predictionStatus column in the output. Defaults to False.
     */
    includePredictionStatus?: pulumi.Input<boolean>;
    /**
     * Flag that enables returning of all probability columns. Defaults to True.
     */
    includeProbabilities?: pulumi.Input<boolean>;
    /**
     * List the subset of classes if a user doesn’t want all the classes. Defaults to [].
     */
    includeProbabilitiesClasses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A dict configuring how data is coming from.
     */
    intakeSettings: pulumi.Input<inputs.BatchPredictionJobDefinitionIntakeSettings>;
    /**
     * Compute prediction explanations for this amount of features.
     */
    maxExplanations?: pulumi.Input<number>;
    /**
     * The name you want your job to be identified with. Must be unique across the organization’s existing jobs.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of concurrent chunks to score simultaneously. Defaults to the available number of cores of the deployment. Lower it to leave resources for real-time scoring.
     */
    numConcurrent?: pulumi.Input<number>;
    /**
     * A dict configuring how scored data is to be saved.
     */
    outputSettings?: pulumi.Input<inputs.BatchPredictionJobDefinitionOutputSettings>;
    /**
     * Keep these columns from the scoring dataset in the scored dataset. This is useful for correlating predictions with source data.
     */
    passthroughColumns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * To pass through every column from the scoring dataset, set this to all.
     */
    passthroughColumnsSet?: pulumi.Input<string>;
    /**
     * Defaults to instance specified by deployment or system configuration.
     */
    predictionInstance?: pulumi.Input<inputs.BatchPredictionJobDefinitionPredictionInstance>;
    /**
     * Threshold is the point that sets the class boundary for a predicted value. This value can be set between 0.0 and 1.0.
     */
    predictionThreshold?: pulumi.Input<number>;
    /**
     * Add prediction warnings to the scored data. Currently only supported for regression models. Defaults to False.
     */
    predictionWarningEnabled?: pulumi.Input<boolean>;
    /**
     * Defines at what intervals the job should run.
     */
    schedule?: pulumi.Input<inputs.BatchPredictionJobDefinitionSchedule>;
    /**
     * Skips drift tracking on any predictions made from this job. This is useful when running non-production workloads to not affect drift tracking and cause unnecessary alerts. Defaults to false.
     */
    skipDriftTracking?: pulumi.Input<boolean>;
    /**
     * Only compute prediction explanations for predictions above this threshold. Can be combined with threshold_low.
     */
    thresholdHigh?: pulumi.Input<number>;
    /**
     * Only compute prediction explanations for predictions below this threshold. Can be combined with threshold_high.
     */
    thresholdLow?: pulumi.Input<number>;
    /**
     * Configuration for time-series scoring.
     */
    timeseriesSettings?: pulumi.Input<inputs.BatchPredictionJobDefinitionTimeseriesSettings>;
}
