// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Execution Environment
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const example = new datarobot.ExecutionEnvironment("example", {
 *     programmingLanguage: "python",
 *     description: "Example Execution Environment Description",
 *     dockerContextPath: "docker_context.zip",
 *     dockerImage: "docker_image.tar",
 *     useCases: ["customModel"],
 * });
 * export const datarobotExecutionEnvironmentId = example.id;
 * export const datarobotExecutionEnvironmentVersionId = example.versionId;
 * ```
 */
export class ExecutionEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing ExecutionEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExecutionEnvironmentState, opts?: pulumi.CustomResourceOptions): ExecutionEnvironment {
        return new ExecutionEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/executionEnvironment:ExecutionEnvironment';

    /**
     * Returns true if the given object is an instance of ExecutionEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExecutionEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExecutionEnvironment.__pulumiType;
    }

    /**
     * The status of the Execution Environment version build.
     */
    public /*out*/ readonly buildStatus!: pulumi.Output<string>;
    /**
     * The description of the Execution Environment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The hash of the docker context contents.
     */
    public /*out*/ readonly dockerContextHash!: pulumi.Output<string>;
    /**
     * The path to a docker context archive or folder
     */
    public readonly dockerContextPath!: pulumi.Output<string | undefined>;
    /**
     * A prebuilt environment image saved as a tarball using the Docker save command.
     */
    public readonly dockerImage!: pulumi.Output<string | undefined>;
    /**
     * The hash of the docker image file
     */
    public /*out*/ readonly dockerImageHash!: pulumi.Output<string>;
    /**
     * The name of the Execution Environment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The programming language of the Execution Environment.
     */
    public readonly programmingLanguage!: pulumi.Output<string>;
    /**
     * The list of Use Cases that the Execution Environment supports.
     */
    public readonly useCases!: pulumi.Output<string[]>;
    /**
     * The description of the Execution Environment version.
     */
    public readonly versionDescription!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Execution Environment Version.
     */
    public /*out*/ readonly versionId!: pulumi.Output<string>;

    /**
     * Create a ExecutionEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExecutionEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExecutionEnvironmentArgs | ExecutionEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExecutionEnvironmentState | undefined;
            resourceInputs["buildStatus"] = state ? state.buildStatus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dockerContextHash"] = state ? state.dockerContextHash : undefined;
            resourceInputs["dockerContextPath"] = state ? state.dockerContextPath : undefined;
            resourceInputs["dockerImage"] = state ? state.dockerImage : undefined;
            resourceInputs["dockerImageHash"] = state ? state.dockerImageHash : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["programmingLanguage"] = state ? state.programmingLanguage : undefined;
            resourceInputs["useCases"] = state ? state.useCases : undefined;
            resourceInputs["versionDescription"] = state ? state.versionDescription : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as ExecutionEnvironmentArgs | undefined;
            if ((!args || args.programmingLanguage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'programmingLanguage'");
            }
            if ((!args || args.useCases === undefined) && !opts.urn) {
                throw new Error("Missing required property 'useCases'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dockerContextPath"] = args ? args.dockerContextPath : undefined;
            resourceInputs["dockerImage"] = args ? args.dockerImage : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["programmingLanguage"] = args ? args.programmingLanguage : undefined;
            resourceInputs["useCases"] = args ? args.useCases : undefined;
            resourceInputs["versionDescription"] = args ? args.versionDescription : undefined;
            resourceInputs["buildStatus"] = undefined /*out*/;
            resourceInputs["dockerContextHash"] = undefined /*out*/;
            resourceInputs["dockerImageHash"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExecutionEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExecutionEnvironment resources.
 */
export interface ExecutionEnvironmentState {
    /**
     * The status of the Execution Environment version build.
     */
    buildStatus?: pulumi.Input<string>;
    /**
     * The description of the Execution Environment.
     */
    description?: pulumi.Input<string>;
    /**
     * The hash of the docker context contents.
     */
    dockerContextHash?: pulumi.Input<string>;
    /**
     * The path to a docker context archive or folder
     */
    dockerContextPath?: pulumi.Input<string>;
    /**
     * A prebuilt environment image saved as a tarball using the Docker save command.
     */
    dockerImage?: pulumi.Input<string>;
    /**
     * The hash of the docker image file
     */
    dockerImageHash?: pulumi.Input<string>;
    /**
     * The name of the Execution Environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The programming language of the Execution Environment.
     */
    programmingLanguage?: pulumi.Input<string>;
    /**
     * The list of Use Cases that the Execution Environment supports.
     */
    useCases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Execution Environment version.
     */
    versionDescription?: pulumi.Input<string>;
    /**
     * The ID of the Execution Environment Version.
     */
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExecutionEnvironment resource.
 */
export interface ExecutionEnvironmentArgs {
    /**
     * The description of the Execution Environment.
     */
    description?: pulumi.Input<string>;
    /**
     * The path to a docker context archive or folder
     */
    dockerContextPath?: pulumi.Input<string>;
    /**
     * A prebuilt environment image saved as a tarball using the Docker save command.
     */
    dockerImage?: pulumi.Input<string>;
    /**
     * The name of the Execution Environment.
     */
    name?: pulumi.Input<string>;
    /**
     * The programming language of the Execution Environment.
     */
    programmingLanguage: pulumi.Input<string>;
    /**
     * The list of Use Cases that the Execution Environment supports.
     */
    useCases: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Execution Environment version.
     */
    versionDescription?: pulumi.Input<string>;
}
