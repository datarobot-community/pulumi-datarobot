// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Data set from file
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const example = new datarobot.DatasetFromUrl("example", {
 *     url: "[URL to upload from]",
 *     useCaseIds: [datarobot_use_case.example.id],
 * });
 * export const exampleId = example.id;
 * ```
 */
export class DatasetFromUrl extends pulumi.CustomResource {
    /**
     * Get an existing DatasetFromUrl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasetFromUrlState, opts?: pulumi.CustomResourceOptions): DatasetFromUrl {
        return new DatasetFromUrl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/datasetFromUrl:DatasetFromUrl';

    /**
     * Returns true if the given object is an instance of DatasetFromUrl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasetFromUrl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasetFromUrl.__pulumiType;
    }

    /**
     * The name of the Dataset.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The URL to upload the Dataset from.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The list of Use Case IDs to add the Dataset to.
     */
    public readonly useCaseIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a DatasetFromUrl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasetFromUrlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasetFromUrlArgs | DatasetFromUrlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasetFromUrlState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["useCaseIds"] = state ? state.useCaseIds : undefined;
        } else {
            const args = argsOrState as DatasetFromUrlArgs | undefined;
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["useCaseIds"] = args ? args.useCaseIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasetFromUrl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatasetFromUrl resources.
 */
export interface DatasetFromUrlState {
    /**
     * The name of the Dataset.
     */
    name?: pulumi.Input<string>;
    /**
     * The URL to upload the Dataset from.
     */
    url?: pulumi.Input<string>;
    /**
     * The list of Use Case IDs to add the Dataset to.
     */
    useCaseIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DatasetFromUrl resource.
 */
export interface DatasetFromUrlArgs {
    /**
     * The name of the Dataset.
     */
    name?: pulumi.Input<string>;
    /**
     * The URL to upload the Dataset from.
     */
    url: pulumi.Input<string>;
    /**
     * The list of Use Case IDs to add the Dataset to.
     */
    useCaseIds?: pulumi.Input<pulumi.Input<string>[]>;
}
