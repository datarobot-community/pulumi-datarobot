// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Custom Metric
 */
export class CustomMetric extends pulumi.CustomResource {
    /**
     * Get an existing CustomMetric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomMetricState, opts?: pulumi.CustomResourceOptions): CustomMetric {
        return new CustomMetric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/customMetric:CustomMetric';

    /**
     * Returns true if the given object is an instance of CustomMetric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomMetric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomMetric.__pulumiType;
    }

    /**
     * The baseline value used to add “reference dots” to the values over time chart.
     */
    public readonly baselineValue!: pulumi.Output<number | undefined>;
    /**
     * A Custom Metric batch ID source when reading values from columnar dataset.
     */
    public readonly batch!: pulumi.Output<outputs.CustomMetricBatch | undefined>;
    /**
     * ID of the Deployment for the Custom Metric.
     */
    public readonly deploymentId!: pulumi.Output<string>;
    /**
     * Description of the Custom Metric.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Directionality of the Custom Metric
     */
    public readonly directionality!: pulumi.Output<string>;
    /**
     * Determines whether the metric is geospatial.
     */
    public readonly isGeospatial!: pulumi.Output<boolean>;
    /**
     * Determines whether the metric is related to the model or deployment.
     */
    public readonly isModelSpecific!: pulumi.Output<boolean>;
    /**
     * Name of the Custom Metric.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A Custom Metric sample source when reading values from columnar dataset.
     */
    public readonly sampleCount!: pulumi.Output<outputs.CustomMetricSampleCount | undefined>;
    /**
     * A Custom Metric timestamp column source when reading values from columnar dataset.
     */
    public readonly timestamp!: pulumi.Output<outputs.CustomMetricTimestamp | undefined>;
    /**
     * Aggregation type of the Custom Metric.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The units, or the y-axis label, of the given Custom Metric.
     */
    public readonly units!: pulumi.Output<string>;
    /**
     * A Custom Metric value source when reading values from columnar dataset.
     */
    public readonly value!: pulumi.Output<outputs.CustomMetricValue | undefined>;

    /**
     * Create a CustomMetric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomMetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomMetricArgs | CustomMetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomMetricState | undefined;
            resourceInputs["baselineValue"] = state ? state.baselineValue : undefined;
            resourceInputs["batch"] = state ? state.batch : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["directionality"] = state ? state.directionality : undefined;
            resourceInputs["isGeospatial"] = state ? state.isGeospatial : undefined;
            resourceInputs["isModelSpecific"] = state ? state.isModelSpecific : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sampleCount"] = state ? state.sampleCount : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["units"] = state ? state.units : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as CustomMetricArgs | undefined;
            if ((!args || args.deploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentId'");
            }
            if ((!args || args.directionality === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directionality'");
            }
            if ((!args || args.isGeospatial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isGeospatial'");
            }
            if ((!args || args.isModelSpecific === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isModelSpecific'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.units === undefined) && !opts.urn) {
                throw new Error("Missing required property 'units'");
            }
            resourceInputs["baselineValue"] = args ? args.baselineValue : undefined;
            resourceInputs["batch"] = args ? args.batch : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["directionality"] = args ? args.directionality : undefined;
            resourceInputs["isGeospatial"] = args ? args.isGeospatial : undefined;
            resourceInputs["isModelSpecific"] = args ? args.isModelSpecific : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sampleCount"] = args ? args.sampleCount : undefined;
            resourceInputs["timestamp"] = args ? args.timestamp : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["units"] = args ? args.units : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomMetric.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomMetric resources.
 */
export interface CustomMetricState {
    /**
     * The baseline value used to add “reference dots” to the values over time chart.
     */
    baselineValue?: pulumi.Input<number>;
    /**
     * A Custom Metric batch ID source when reading values from columnar dataset.
     */
    batch?: pulumi.Input<inputs.CustomMetricBatch>;
    /**
     * ID of the Deployment for the Custom Metric.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * Description of the Custom Metric.
     */
    description?: pulumi.Input<string>;
    /**
     * Directionality of the Custom Metric
     */
    directionality?: pulumi.Input<string>;
    /**
     * Determines whether the metric is geospatial.
     */
    isGeospatial?: pulumi.Input<boolean>;
    /**
     * Determines whether the metric is related to the model or deployment.
     */
    isModelSpecific?: pulumi.Input<boolean>;
    /**
     * Name of the Custom Metric.
     */
    name?: pulumi.Input<string>;
    /**
     * A Custom Metric sample source when reading values from columnar dataset.
     */
    sampleCount?: pulumi.Input<inputs.CustomMetricSampleCount>;
    /**
     * A Custom Metric timestamp column source when reading values from columnar dataset.
     */
    timestamp?: pulumi.Input<inputs.CustomMetricTimestamp>;
    /**
     * Aggregation type of the Custom Metric.
     */
    type?: pulumi.Input<string>;
    /**
     * The units, or the y-axis label, of the given Custom Metric.
     */
    units?: pulumi.Input<string>;
    /**
     * A Custom Metric value source when reading values from columnar dataset.
     */
    value?: pulumi.Input<inputs.CustomMetricValue>;
}

/**
 * The set of arguments for constructing a CustomMetric resource.
 */
export interface CustomMetricArgs {
    /**
     * The baseline value used to add “reference dots” to the values over time chart.
     */
    baselineValue?: pulumi.Input<number>;
    /**
     * A Custom Metric batch ID source when reading values from columnar dataset.
     */
    batch?: pulumi.Input<inputs.CustomMetricBatch>;
    /**
     * ID of the Deployment for the Custom Metric.
     */
    deploymentId: pulumi.Input<string>;
    /**
     * Description of the Custom Metric.
     */
    description?: pulumi.Input<string>;
    /**
     * Directionality of the Custom Metric
     */
    directionality: pulumi.Input<string>;
    /**
     * Determines whether the metric is geospatial.
     */
    isGeospatial: pulumi.Input<boolean>;
    /**
     * Determines whether the metric is related to the model or deployment.
     */
    isModelSpecific: pulumi.Input<boolean>;
    /**
     * Name of the Custom Metric.
     */
    name?: pulumi.Input<string>;
    /**
     * A Custom Metric sample source when reading values from columnar dataset.
     */
    sampleCount?: pulumi.Input<inputs.CustomMetricSampleCount>;
    /**
     * A Custom Metric timestamp column source when reading values from columnar dataset.
     */
    timestamp?: pulumi.Input<inputs.CustomMetricTimestamp>;
    /**
     * Aggregation type of the Custom Metric.
     */
    type: pulumi.Input<string>;
    /**
     * The units, or the y-axis label, of the given Custom Metric.
     */
    units: pulumi.Input<string>;
    /**
     * A Custom Metric value source when reading values from columnar dataset.
     */
    value?: pulumi.Input<inputs.CustomMetricValue>;
}
