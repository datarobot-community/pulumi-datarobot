// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Data set from file
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datarobot from "@datarobot/pulumi-datarobot";
 *
 * const example = new datarobot.DatasetFromFile("example", {
 *     sourceFile: "[Path to file to upload]",
 *     useCaseId: datarobot_use_case.example.id,
 * });
 * export const exampleId = example.id;
 * ```
 */
export class DatasetFromFile extends pulumi.CustomResource {
    /**
     * Get an existing DatasetFromFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasetFromFileState, opts?: pulumi.CustomResourceOptions): DatasetFromFile {
        return new DatasetFromFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datarobot:index/datasetFromFile:DatasetFromFile';

    /**
     * Returns true if the given object is an instance of DatasetFromFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasetFromFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasetFromFile.__pulumiType;
    }

    /**
     * The path to the file to upload.
     */
    public readonly sourceFile!: pulumi.Output<string>;
    /**
     * The id of the Use Case.
     */
    public readonly useCaseId!: pulumi.Output<string>;

    /**
     * Create a DatasetFromFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasetFromFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasetFromFileArgs | DatasetFromFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasetFromFileState | undefined;
            resourceInputs["sourceFile"] = state ? state.sourceFile : undefined;
            resourceInputs["useCaseId"] = state ? state.useCaseId : undefined;
        } else {
            const args = argsOrState as DatasetFromFileArgs | undefined;
            if ((!args || args.sourceFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceFile'");
            }
            if ((!args || args.useCaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'useCaseId'");
            }
            resourceInputs["sourceFile"] = args ? args.sourceFile : undefined;
            resourceInputs["useCaseId"] = args ? args.useCaseId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasetFromFile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatasetFromFile resources.
 */
export interface DatasetFromFileState {
    /**
     * The path to the file to upload.
     */
    sourceFile?: pulumi.Input<string>;
    /**
     * The id of the Use Case.
     */
    useCaseId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatasetFromFile resource.
 */
export interface DatasetFromFileArgs {
    /**
     * The path to the file to upload.
     */
    sourceFile: pulumi.Input<string>;
    /**
     * The id of the Use Case.
     */
    useCaseId: pulumi.Input<string>;
}
