// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Custom Job
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := datarobot.NewCustomMetricJob(ctx, "example", &datarobot.CustomMetricJobArgs{
//				Files: datarobot.CustomMetricJobFileArray{
//					"file1.py",
//					"file2.py",
//				},
//				EnvironmentId: pulumi.String("65f9b27eab986d30d4c64268"),
//				Description:   pulumi.String("Example Custom Metric Job Description"),
//				RuntimeParameterValues: datarobot.CustomMetricJobRuntimeParameterValueArray{
//					&datarobot.CustomMetricJobRuntimeParameterValueArgs{
//						Key:   pulumi.String("EXAMPLE_PARAM"),
//						Type:  pulumi.String("string"),
//						Value: pulumi.String("val"),
//					},
//				},
//				EgressNetworkPolicy: pulumi.String("none"),
//				ResourceBundleId:    pulumi.String("cpu.micro"),
//				Units:               pulumi.String("count"),
//				Directionality:      pulumi.String("lowerIsBetter"),
//				Type:                pulumi.String("sum"),
//				IsModelSpecific:     pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleId", example.ID())
//			return nil
//		})
//	}
//
// ```
type CustomMetricJob struct {
	pulumi.CustomResourceState

	// The description of the Custom Metric Job.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The directionality of the Custom Metric.
	Directionality pulumi.StringOutput `pulumi:"directionality"`
	// The egress network policy for the Job.
	EgressNetworkPolicy pulumi.StringOutput `pulumi:"egressNetworkPolicy"`
	// The ID of the environment to use with the Job.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId pulumi.StringOutput `pulumi:"environmentVersionId"`
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files CustomMetricJobFileArrayOutput `pulumi:"files"`
	// The hash of file contents for each file in files.
	FilesHashes pulumi.StringArrayOutput `pulumi:"filesHashes"`
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrOutput `pulumi:"folderPath"`
	// The hash of the folder path contents.
	FolderPathHash pulumi.StringOutput `pulumi:"folderPathHash"`
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific pulumi.BoolOutput `pulumi:"isModelSpecific"`
	// The name of the Custom Metric Job.
	Name pulumi.StringOutput `pulumi:"name"`
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId pulumi.StringPtrOutput `pulumi:"resourceBundleId"`
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues CustomMetricJobRuntimeParameterValueArrayOutput `pulumi:"runtimeParameterValues"`
	// Custom metric time bucket size.
	TimeStep pulumi.StringOutput `pulumi:"timeStep"`
	// The aggregation type of the custom metric.
	Type pulumi.StringOutput `pulumi:"type"`
	// The units, or the y-axis label, of the given custom metric.
	Units pulumi.StringOutput `pulumi:"units"`
}

// NewCustomMetricJob registers a new resource with the given unique name, arguments, and options.
func NewCustomMetricJob(ctx *pulumi.Context,
	name string, args *CustomMetricJobArgs, opts ...pulumi.ResourceOption) (*CustomMetricJob, error) {
	if args == nil {
		args = &CustomMetricJobArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomMetricJob
	err := ctx.RegisterResource("datarobot:index/customMetricJob:CustomMetricJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomMetricJob gets an existing CustomMetricJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomMetricJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomMetricJobState, opts ...pulumi.ResourceOption) (*CustomMetricJob, error) {
	var resource CustomMetricJob
	err := ctx.ReadResource("datarobot:index/customMetricJob:CustomMetricJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomMetricJob resources.
type customMetricJobState struct {
	// The description of the Custom Metric Job.
	Description *string `pulumi:"description"`
	// The directionality of the Custom Metric.
	Directionality *string `pulumi:"directionality"`
	// The egress network policy for the Job.
	EgressNetworkPolicy *string `pulumi:"egressNetworkPolicy"`
	// The ID of the environment to use with the Job.
	EnvironmentId *string `pulumi:"environmentId"`
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId *string `pulumi:"environmentVersionId"`
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files []CustomMetricJobFile `pulumi:"files"`
	// The hash of file contents for each file in files.
	FilesHashes []string `pulumi:"filesHashes"`
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// The hash of the folder path contents.
	FolderPathHash *string `pulumi:"folderPathHash"`
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific *bool `pulumi:"isModelSpecific"`
	// The name of the Custom Metric Job.
	Name *string `pulumi:"name"`
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId *string `pulumi:"resourceBundleId"`
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues []CustomMetricJobRuntimeParameterValue `pulumi:"runtimeParameterValues"`
	// Custom metric time bucket size.
	TimeStep *string `pulumi:"timeStep"`
	// The aggregation type of the custom metric.
	Type *string `pulumi:"type"`
	// The units, or the y-axis label, of the given custom metric.
	Units *string `pulumi:"units"`
}

type CustomMetricJobState struct {
	// The description of the Custom Metric Job.
	Description pulumi.StringPtrInput
	// The directionality of the Custom Metric.
	Directionality pulumi.StringPtrInput
	// The egress network policy for the Job.
	EgressNetworkPolicy pulumi.StringPtrInput
	// The ID of the environment to use with the Job.
	EnvironmentId pulumi.StringPtrInput
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId pulumi.StringPtrInput
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files CustomMetricJobFileArrayInput
	// The hash of file contents for each file in files.
	FilesHashes pulumi.StringArrayInput
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// The hash of the folder path contents.
	FolderPathHash pulumi.StringPtrInput
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific pulumi.BoolPtrInput
	// The name of the Custom Metric Job.
	Name pulumi.StringPtrInput
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId pulumi.StringPtrInput
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues CustomMetricJobRuntimeParameterValueArrayInput
	// Custom metric time bucket size.
	TimeStep pulumi.StringPtrInput
	// The aggregation type of the custom metric.
	Type pulumi.StringPtrInput
	// The units, or the y-axis label, of the given custom metric.
	Units pulumi.StringPtrInput
}

func (CustomMetricJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*customMetricJobState)(nil)).Elem()
}

type customMetricJobArgs struct {
	// The description of the Custom Metric Job.
	Description *string `pulumi:"description"`
	// The directionality of the Custom Metric.
	Directionality *string `pulumi:"directionality"`
	// The egress network policy for the Job.
	EgressNetworkPolicy *string `pulumi:"egressNetworkPolicy"`
	// The ID of the environment to use with the Job.
	EnvironmentId *string `pulumi:"environmentId"`
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId *string `pulumi:"environmentVersionId"`
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files []CustomMetricJobFile `pulumi:"files"`
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific *bool `pulumi:"isModelSpecific"`
	// The name of the Custom Metric Job.
	Name *string `pulumi:"name"`
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId *string `pulumi:"resourceBundleId"`
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues []CustomMetricJobRuntimeParameterValue `pulumi:"runtimeParameterValues"`
	// Custom metric time bucket size.
	TimeStep *string `pulumi:"timeStep"`
	// The aggregation type of the custom metric.
	Type *string `pulumi:"type"`
	// The units, or the y-axis label, of the given custom metric.
	Units *string `pulumi:"units"`
}

// The set of arguments for constructing a CustomMetricJob resource.
type CustomMetricJobArgs struct {
	// The description of the Custom Metric Job.
	Description pulumi.StringPtrInput
	// The directionality of the Custom Metric.
	Directionality pulumi.StringPtrInput
	// The egress network policy for the Job.
	EgressNetworkPolicy pulumi.StringPtrInput
	// The ID of the environment to use with the Job.
	EnvironmentId pulumi.StringPtrInput
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId pulumi.StringPtrInput
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files CustomMetricJobFileArrayInput
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific pulumi.BoolPtrInput
	// The name of the Custom Metric Job.
	Name pulumi.StringPtrInput
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId pulumi.StringPtrInput
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues CustomMetricJobRuntimeParameterValueArrayInput
	// Custom metric time bucket size.
	TimeStep pulumi.StringPtrInput
	// The aggregation type of the custom metric.
	Type pulumi.StringPtrInput
	// The units, or the y-axis label, of the given custom metric.
	Units pulumi.StringPtrInput
}

func (CustomMetricJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customMetricJobArgs)(nil)).Elem()
}

type CustomMetricJobInput interface {
	pulumi.Input

	ToCustomMetricJobOutput() CustomMetricJobOutput
	ToCustomMetricJobOutputWithContext(ctx context.Context) CustomMetricJobOutput
}

func (*CustomMetricJob) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMetricJob)(nil)).Elem()
}

func (i *CustomMetricJob) ToCustomMetricJobOutput() CustomMetricJobOutput {
	return i.ToCustomMetricJobOutputWithContext(context.Background())
}

func (i *CustomMetricJob) ToCustomMetricJobOutputWithContext(ctx context.Context) CustomMetricJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricJobOutput)
}

// CustomMetricJobArrayInput is an input type that accepts CustomMetricJobArray and CustomMetricJobArrayOutput values.
// You can construct a concrete instance of `CustomMetricJobArrayInput` via:
//
//	CustomMetricJobArray{ CustomMetricJobArgs{...} }
type CustomMetricJobArrayInput interface {
	pulumi.Input

	ToCustomMetricJobArrayOutput() CustomMetricJobArrayOutput
	ToCustomMetricJobArrayOutputWithContext(context.Context) CustomMetricJobArrayOutput
}

type CustomMetricJobArray []CustomMetricJobInput

func (CustomMetricJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomMetricJob)(nil)).Elem()
}

func (i CustomMetricJobArray) ToCustomMetricJobArrayOutput() CustomMetricJobArrayOutput {
	return i.ToCustomMetricJobArrayOutputWithContext(context.Background())
}

func (i CustomMetricJobArray) ToCustomMetricJobArrayOutputWithContext(ctx context.Context) CustomMetricJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricJobArrayOutput)
}

// CustomMetricJobMapInput is an input type that accepts CustomMetricJobMap and CustomMetricJobMapOutput values.
// You can construct a concrete instance of `CustomMetricJobMapInput` via:
//
//	CustomMetricJobMap{ "key": CustomMetricJobArgs{...} }
type CustomMetricJobMapInput interface {
	pulumi.Input

	ToCustomMetricJobMapOutput() CustomMetricJobMapOutput
	ToCustomMetricJobMapOutputWithContext(context.Context) CustomMetricJobMapOutput
}

type CustomMetricJobMap map[string]CustomMetricJobInput

func (CustomMetricJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomMetricJob)(nil)).Elem()
}

func (i CustomMetricJobMap) ToCustomMetricJobMapOutput() CustomMetricJobMapOutput {
	return i.ToCustomMetricJobMapOutputWithContext(context.Background())
}

func (i CustomMetricJobMap) ToCustomMetricJobMapOutputWithContext(ctx context.Context) CustomMetricJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricJobMapOutput)
}

type CustomMetricJobOutput struct{ *pulumi.OutputState }

func (CustomMetricJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMetricJob)(nil)).Elem()
}

func (o CustomMetricJobOutput) ToCustomMetricJobOutput() CustomMetricJobOutput {
	return o
}

func (o CustomMetricJobOutput) ToCustomMetricJobOutputWithContext(ctx context.Context) CustomMetricJobOutput {
	return o
}

// The description of the Custom Metric Job.
func (o CustomMetricJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The directionality of the Custom Metric.
func (o CustomMetricJobOutput) Directionality() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringOutput { return v.Directionality }).(pulumi.StringOutput)
}

// The egress network policy for the Job.
func (o CustomMetricJobOutput) EgressNetworkPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringOutput { return v.EgressNetworkPolicy }).(pulumi.StringOutput)
}

// The ID of the environment to use with the Job.
func (o CustomMetricJobOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The ID of the environment version to use with the Job.
func (o CustomMetricJobOutput) EnvironmentVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringOutput { return v.EnvironmentVersionId }).(pulumi.StringOutput)
}

// List of files to upload, each with a source (local path) and destination (path in job).
func (o CustomMetricJobOutput) Files() CustomMetricJobFileArrayOutput {
	return o.ApplyT(func(v *CustomMetricJob) CustomMetricJobFileArrayOutput { return v.Files }).(CustomMetricJobFileArrayOutput)
}

// The hash of file contents for each file in files.
func (o CustomMetricJobOutput) FilesHashes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringArrayOutput { return v.FilesHashes }).(pulumi.StringArrayOutput)
}

// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
func (o CustomMetricJobOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringPtrOutput { return v.FolderPath }).(pulumi.StringPtrOutput)
}

// The hash of the folder path contents.
func (o CustomMetricJobOutput) FolderPathHash() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringOutput { return v.FolderPathHash }).(pulumi.StringOutput)
}

// Determines whether the metric is related to the model or deployment.
func (o CustomMetricJobOutput) IsModelSpecific() pulumi.BoolOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.BoolOutput { return v.IsModelSpecific }).(pulumi.BoolOutput)
}

// The name of the Custom Metric Job.
func (o CustomMetricJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
func (o CustomMetricJobOutput) ResourceBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringPtrOutput { return v.ResourceBundleId }).(pulumi.StringPtrOutput)
}

// Additional parameters to be injected into a Job at runtime.
func (o CustomMetricJobOutput) RuntimeParameterValues() CustomMetricJobRuntimeParameterValueArrayOutput {
	return o.ApplyT(func(v *CustomMetricJob) CustomMetricJobRuntimeParameterValueArrayOutput {
		return v.RuntimeParameterValues
	}).(CustomMetricJobRuntimeParameterValueArrayOutput)
}

// Custom metric time bucket size.
func (o CustomMetricJobOutput) TimeStep() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringOutput { return v.TimeStep }).(pulumi.StringOutput)
}

// The aggregation type of the custom metric.
func (o CustomMetricJobOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The units, or the y-axis label, of the given custom metric.
func (o CustomMetricJobOutput) Units() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricJob) pulumi.StringOutput { return v.Units }).(pulumi.StringOutput)
}

type CustomMetricJobArrayOutput struct{ *pulumi.OutputState }

func (CustomMetricJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomMetricJob)(nil)).Elem()
}

func (o CustomMetricJobArrayOutput) ToCustomMetricJobArrayOutput() CustomMetricJobArrayOutput {
	return o
}

func (o CustomMetricJobArrayOutput) ToCustomMetricJobArrayOutputWithContext(ctx context.Context) CustomMetricJobArrayOutput {
	return o
}

func (o CustomMetricJobArrayOutput) Index(i pulumi.IntInput) CustomMetricJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomMetricJob {
		return vs[0].([]*CustomMetricJob)[vs[1].(int)]
	}).(CustomMetricJobOutput)
}

type CustomMetricJobMapOutput struct{ *pulumi.OutputState }

func (CustomMetricJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomMetricJob)(nil)).Elem()
}

func (o CustomMetricJobMapOutput) ToCustomMetricJobMapOutput() CustomMetricJobMapOutput {
	return o
}

func (o CustomMetricJobMapOutput) ToCustomMetricJobMapOutputWithContext(ctx context.Context) CustomMetricJobMapOutput {
	return o
}

func (o CustomMetricJobMapOutput) MapIndex(k pulumi.StringInput) CustomMetricJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomMetricJob {
		return vs[0].(map[string]*CustomMetricJob)[vs[1].(string)]
	}).(CustomMetricJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMetricJobInput)(nil)).Elem(), &CustomMetricJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMetricJobArrayInput)(nil)).Elem(), CustomMetricJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMetricJobMapInput)(nil)).Elem(), CustomMetricJobMap{})
	pulumi.RegisterOutputType(CustomMetricJobOutput{})
	pulumi.RegisterOutputType(CustomMetricJobArrayOutput{})
	pulumi.RegisterOutputType(CustomMetricJobMapOutput{})
}
