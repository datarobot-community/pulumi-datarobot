// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Custom Job
type CustomJob struct {
	pulumi.CustomResourceState

	// The description of the Custom Job.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The egress network policy for the Job.
	EgressNetworkPolicy pulumi.StringOutput `pulumi:"egressNetworkPolicy"`
	// The ID of the environment to use with the Job.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId pulumi.StringOutput `pulumi:"environmentVersionId"`
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files CustomJobFileArrayOutput `pulumi:"files"`
	// The hash of file contents for each file in files.
	FilesHashes pulumi.StringArrayOutput `pulumi:"filesHashes"`
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrOutput `pulumi:"folderPath"`
	// The hash of the folder path contents.
	FolderPathHash pulumi.StringOutput `pulumi:"folderPathHash"`
	// The type of the Custom Job.
	JobType pulumi.StringOutput `pulumi:"jobType"`
	// The name of the Custom Job.
	Name pulumi.StringOutput `pulumi:"name"`
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId pulumi.StringPtrOutput `pulumi:"resourceBundleId"`
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues CustomJobRuntimeParameterValueArrayOutput `pulumi:"runtimeParameterValues"`
	// The schedule configuration for the custom job.
	Schedule CustomJobSchedulePtrOutput `pulumi:"schedule"`
	// The ID of the schedule associated with the custom job.
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
}

// NewCustomJob registers a new resource with the given unique name, arguments, and options.
func NewCustomJob(ctx *pulumi.Context,
	name string, args *CustomJobArgs, opts ...pulumi.ResourceOption) (*CustomJob, error) {
	if args == nil {
		args = &CustomJobArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomJob
	err := ctx.RegisterResource("datarobot:index/customJob:CustomJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomJob gets an existing CustomJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomJobState, opts ...pulumi.ResourceOption) (*CustomJob, error) {
	var resource CustomJob
	err := ctx.ReadResource("datarobot:index/customJob:CustomJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomJob resources.
type customJobState struct {
	// The description of the Custom Job.
	Description *string `pulumi:"description"`
	// The egress network policy for the Job.
	EgressNetworkPolicy *string `pulumi:"egressNetworkPolicy"`
	// The ID of the environment to use with the Job.
	EnvironmentId *string `pulumi:"environmentId"`
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId *string `pulumi:"environmentVersionId"`
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files []CustomJobFile `pulumi:"files"`
	// The hash of file contents for each file in files.
	FilesHashes []string `pulumi:"filesHashes"`
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// The hash of the folder path contents.
	FolderPathHash *string `pulumi:"folderPathHash"`
	// The type of the Custom Job.
	JobType *string `pulumi:"jobType"`
	// The name of the Custom Job.
	Name *string `pulumi:"name"`
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId *string `pulumi:"resourceBundleId"`
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues []CustomJobRuntimeParameterValue `pulumi:"runtimeParameterValues"`
	// The schedule configuration for the custom job.
	Schedule *CustomJobSchedule `pulumi:"schedule"`
	// The ID of the schedule associated with the custom job.
	ScheduleId *string `pulumi:"scheduleId"`
}

type CustomJobState struct {
	// The description of the Custom Job.
	Description pulumi.StringPtrInput
	// The egress network policy for the Job.
	EgressNetworkPolicy pulumi.StringPtrInput
	// The ID of the environment to use with the Job.
	EnvironmentId pulumi.StringPtrInput
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId pulumi.StringPtrInput
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files CustomJobFileArrayInput
	// The hash of file contents for each file in files.
	FilesHashes pulumi.StringArrayInput
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// The hash of the folder path contents.
	FolderPathHash pulumi.StringPtrInput
	// The type of the Custom Job.
	JobType pulumi.StringPtrInput
	// The name of the Custom Job.
	Name pulumi.StringPtrInput
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId pulumi.StringPtrInput
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues CustomJobRuntimeParameterValueArrayInput
	// The schedule configuration for the custom job.
	Schedule CustomJobSchedulePtrInput
	// The ID of the schedule associated with the custom job.
	ScheduleId pulumi.StringPtrInput
}

func (CustomJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*customJobState)(nil)).Elem()
}

type customJobArgs struct {
	// The description of the Custom Job.
	Description *string `pulumi:"description"`
	// The egress network policy for the Job.
	EgressNetworkPolicy *string `pulumi:"egressNetworkPolicy"`
	// The ID of the environment to use with the Job.
	EnvironmentId *string `pulumi:"environmentId"`
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId *string `pulumi:"environmentVersionId"`
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files []CustomJobFile `pulumi:"files"`
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// The type of the Custom Job.
	JobType *string `pulumi:"jobType"`
	// The name of the Custom Job.
	Name *string `pulumi:"name"`
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId *string `pulumi:"resourceBundleId"`
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues []CustomJobRuntimeParameterValue `pulumi:"runtimeParameterValues"`
	// The schedule configuration for the custom job.
	Schedule *CustomJobSchedule `pulumi:"schedule"`
	// The ID of the schedule associated with the custom job.
	ScheduleId *string `pulumi:"scheduleId"`
}

// The set of arguments for constructing a CustomJob resource.
type CustomJobArgs struct {
	// The description of the Custom Job.
	Description pulumi.StringPtrInput
	// The egress network policy for the Job.
	EgressNetworkPolicy pulumi.StringPtrInput
	// The ID of the environment to use with the Job.
	EnvironmentId pulumi.StringPtrInput
	// The ID of the environment version to use with the Job.
	EnvironmentVersionId pulumi.StringPtrInput
	// List of files to upload, each with a source (local path) and destination (path in job).
	Files CustomJobFileArrayInput
	// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// The type of the Custom Job.
	JobType pulumi.StringPtrInput
	// The name of the Custom Job.
	Name pulumi.StringPtrInput
	// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
	ResourceBundleId pulumi.StringPtrInput
	// Additional parameters to be injected into a Job at runtime.
	RuntimeParameterValues CustomJobRuntimeParameterValueArrayInput
	// The schedule configuration for the custom job.
	Schedule CustomJobSchedulePtrInput
	// The ID of the schedule associated with the custom job.
	ScheduleId pulumi.StringPtrInput
}

func (CustomJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customJobArgs)(nil)).Elem()
}

type CustomJobInput interface {
	pulumi.Input

	ToCustomJobOutput() CustomJobOutput
	ToCustomJobOutputWithContext(ctx context.Context) CustomJobOutput
}

func (*CustomJob) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomJob)(nil)).Elem()
}

func (i *CustomJob) ToCustomJobOutput() CustomJobOutput {
	return i.ToCustomJobOutputWithContext(context.Background())
}

func (i *CustomJob) ToCustomJobOutputWithContext(ctx context.Context) CustomJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomJobOutput)
}

// CustomJobArrayInput is an input type that accepts CustomJobArray and CustomJobArrayOutput values.
// You can construct a concrete instance of `CustomJobArrayInput` via:
//
//	CustomJobArray{ CustomJobArgs{...} }
type CustomJobArrayInput interface {
	pulumi.Input

	ToCustomJobArrayOutput() CustomJobArrayOutput
	ToCustomJobArrayOutputWithContext(context.Context) CustomJobArrayOutput
}

type CustomJobArray []CustomJobInput

func (CustomJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomJob)(nil)).Elem()
}

func (i CustomJobArray) ToCustomJobArrayOutput() CustomJobArrayOutput {
	return i.ToCustomJobArrayOutputWithContext(context.Background())
}

func (i CustomJobArray) ToCustomJobArrayOutputWithContext(ctx context.Context) CustomJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomJobArrayOutput)
}

// CustomJobMapInput is an input type that accepts CustomJobMap and CustomJobMapOutput values.
// You can construct a concrete instance of `CustomJobMapInput` via:
//
//	CustomJobMap{ "key": CustomJobArgs{...} }
type CustomJobMapInput interface {
	pulumi.Input

	ToCustomJobMapOutput() CustomJobMapOutput
	ToCustomJobMapOutputWithContext(context.Context) CustomJobMapOutput
}

type CustomJobMap map[string]CustomJobInput

func (CustomJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomJob)(nil)).Elem()
}

func (i CustomJobMap) ToCustomJobMapOutput() CustomJobMapOutput {
	return i.ToCustomJobMapOutputWithContext(context.Background())
}

func (i CustomJobMap) ToCustomJobMapOutputWithContext(ctx context.Context) CustomJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomJobMapOutput)
}

type CustomJobOutput struct{ *pulumi.OutputState }

func (CustomJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomJob)(nil)).Elem()
}

func (o CustomJobOutput) ToCustomJobOutput() CustomJobOutput {
	return o
}

func (o CustomJobOutput) ToCustomJobOutputWithContext(ctx context.Context) CustomJobOutput {
	return o
}

// The description of the Custom Job.
func (o CustomJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The egress network policy for the Job.
func (o CustomJobOutput) EgressNetworkPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringOutput { return v.EgressNetworkPolicy }).(pulumi.StringOutput)
}

// The ID of the environment to use with the Job.
func (o CustomJobOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The ID of the environment version to use with the Job.
func (o CustomJobOutput) EnvironmentVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringOutput { return v.EnvironmentVersionId }).(pulumi.StringOutput)
}

// List of files to upload, each with a source (local path) and destination (path in job).
func (o CustomJobOutput) Files() CustomJobFileArrayOutput {
	return o.ApplyT(func(v *CustomJob) CustomJobFileArrayOutput { return v.Files }).(CustomJobFileArrayOutput)
}

// The hash of file contents for each file in files.
func (o CustomJobOutput) FilesHashes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringArrayOutput { return v.FilesHashes }).(pulumi.StringArrayOutput)
}

// The path to a folder containing files to be uploaded. Each file in the folder is uploaded under path relative to a folder path.
func (o CustomJobOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringPtrOutput { return v.FolderPath }).(pulumi.StringPtrOutput)
}

// The hash of the folder path contents.
func (o CustomJobOutput) FolderPathHash() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringOutput { return v.FolderPathHash }).(pulumi.StringOutput)
}

// The type of the Custom Job.
func (o CustomJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringOutput { return v.JobType }).(pulumi.StringOutput)
}

// The name of the Custom Job.
func (o CustomJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A single identifier that represents a bundle of resources: Memory, CPU, GPU, etc.
func (o CustomJobOutput) ResourceBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringPtrOutput { return v.ResourceBundleId }).(pulumi.StringPtrOutput)
}

// Additional parameters to be injected into a Job at runtime.
func (o CustomJobOutput) RuntimeParameterValues() CustomJobRuntimeParameterValueArrayOutput {
	return o.ApplyT(func(v *CustomJob) CustomJobRuntimeParameterValueArrayOutput { return v.RuntimeParameterValues }).(CustomJobRuntimeParameterValueArrayOutput)
}

// The schedule configuration for the custom job.
func (o CustomJobOutput) Schedule() CustomJobSchedulePtrOutput {
	return o.ApplyT(func(v *CustomJob) CustomJobSchedulePtrOutput { return v.Schedule }).(CustomJobSchedulePtrOutput)
}

// The ID of the schedule associated with the custom job.
func (o CustomJobOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomJob) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

type CustomJobArrayOutput struct{ *pulumi.OutputState }

func (CustomJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomJob)(nil)).Elem()
}

func (o CustomJobArrayOutput) ToCustomJobArrayOutput() CustomJobArrayOutput {
	return o
}

func (o CustomJobArrayOutput) ToCustomJobArrayOutputWithContext(ctx context.Context) CustomJobArrayOutput {
	return o
}

func (o CustomJobArrayOutput) Index(i pulumi.IntInput) CustomJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomJob {
		return vs[0].([]*CustomJob)[vs[1].(int)]
	}).(CustomJobOutput)
}

type CustomJobMapOutput struct{ *pulumi.OutputState }

func (CustomJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomJob)(nil)).Elem()
}

func (o CustomJobMapOutput) ToCustomJobMapOutput() CustomJobMapOutput {
	return o
}

func (o CustomJobMapOutput) ToCustomJobMapOutputWithContext(ctx context.Context) CustomJobMapOutput {
	return o
}

func (o CustomJobMapOutput) MapIndex(k pulumi.StringInput) CustomJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomJob {
		return vs[0].(map[string]*CustomJob)[vs[1].(string)]
	}).(CustomJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomJobInput)(nil)).Elem(), &CustomJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomJobArrayInput)(nil)).Elem(), CustomJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomJobMapInput)(nil)).Elem(), CustomJobMap{})
	pulumi.RegisterOutputType(CustomJobOutput{})
	pulumi.RegisterOutputType(CustomJobArrayOutput{})
	pulumi.RegisterOutputType(CustomJobMapOutput{})
}
