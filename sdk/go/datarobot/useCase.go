// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UseCase struct {
	pulumi.CustomResourceState

	// The description of the Use Case.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the Use Case.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewUseCase registers a new resource with the given unique name, arguments, and options.
func NewUseCase(ctx *pulumi.Context,
	name string, args *UseCaseArgs, opts ...pulumi.ResourceOption) (*UseCase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UseCase
	err := ctx.RegisterResource("datarobot:index/useCase:UseCase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUseCase gets an existing UseCase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUseCase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UseCaseState, opts ...pulumi.ResourceOption) (*UseCase, error) {
	var resource UseCase
	err := ctx.ReadResource("datarobot:index/useCase:UseCase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UseCase resources.
type useCaseState struct {
	// The description of the Use Case.
	Description *string `pulumi:"description"`
	// The name of the Use Case.
	Name *string `pulumi:"name"`
}

type UseCaseState struct {
	// The description of the Use Case.
	Description pulumi.StringPtrInput
	// The name of the Use Case.
	Name pulumi.StringPtrInput
}

func (UseCaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*useCaseState)(nil)).Elem()
}

type useCaseArgs struct {
	// The description of the Use Case.
	Description string `pulumi:"description"`
	// The name of the Use Case.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a UseCase resource.
type UseCaseArgs struct {
	// The description of the Use Case.
	Description pulumi.StringInput
	// The name of the Use Case.
	Name pulumi.StringPtrInput
}

func (UseCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*useCaseArgs)(nil)).Elem()
}

type UseCaseInput interface {
	pulumi.Input

	ToUseCaseOutput() UseCaseOutput
	ToUseCaseOutputWithContext(ctx context.Context) UseCaseOutput
}

func (*UseCase) ElementType() reflect.Type {
	return reflect.TypeOf((**UseCase)(nil)).Elem()
}

func (i *UseCase) ToUseCaseOutput() UseCaseOutput {
	return i.ToUseCaseOutputWithContext(context.Background())
}

func (i *UseCase) ToUseCaseOutputWithContext(ctx context.Context) UseCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UseCaseOutput)
}

// UseCaseArrayInput is an input type that accepts UseCaseArray and UseCaseArrayOutput values.
// You can construct a concrete instance of `UseCaseArrayInput` via:
//
//	UseCaseArray{ UseCaseArgs{...} }
type UseCaseArrayInput interface {
	pulumi.Input

	ToUseCaseArrayOutput() UseCaseArrayOutput
	ToUseCaseArrayOutputWithContext(context.Context) UseCaseArrayOutput
}

type UseCaseArray []UseCaseInput

func (UseCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UseCase)(nil)).Elem()
}

func (i UseCaseArray) ToUseCaseArrayOutput() UseCaseArrayOutput {
	return i.ToUseCaseArrayOutputWithContext(context.Background())
}

func (i UseCaseArray) ToUseCaseArrayOutputWithContext(ctx context.Context) UseCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UseCaseArrayOutput)
}

// UseCaseMapInput is an input type that accepts UseCaseMap and UseCaseMapOutput values.
// You can construct a concrete instance of `UseCaseMapInput` via:
//
//	UseCaseMap{ "key": UseCaseArgs{...} }
type UseCaseMapInput interface {
	pulumi.Input

	ToUseCaseMapOutput() UseCaseMapOutput
	ToUseCaseMapOutputWithContext(context.Context) UseCaseMapOutput
}

type UseCaseMap map[string]UseCaseInput

func (UseCaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UseCase)(nil)).Elem()
}

func (i UseCaseMap) ToUseCaseMapOutput() UseCaseMapOutput {
	return i.ToUseCaseMapOutputWithContext(context.Background())
}

func (i UseCaseMap) ToUseCaseMapOutputWithContext(ctx context.Context) UseCaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UseCaseMapOutput)
}

type UseCaseOutput struct{ *pulumi.OutputState }

func (UseCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UseCase)(nil)).Elem()
}

func (o UseCaseOutput) ToUseCaseOutput() UseCaseOutput {
	return o
}

func (o UseCaseOutput) ToUseCaseOutputWithContext(ctx context.Context) UseCaseOutput {
	return o
}

// The description of the Use Case.
func (o UseCaseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *UseCase) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the Use Case.
func (o UseCaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UseCase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type UseCaseArrayOutput struct{ *pulumi.OutputState }

func (UseCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UseCase)(nil)).Elem()
}

func (o UseCaseArrayOutput) ToUseCaseArrayOutput() UseCaseArrayOutput {
	return o
}

func (o UseCaseArrayOutput) ToUseCaseArrayOutputWithContext(ctx context.Context) UseCaseArrayOutput {
	return o
}

func (o UseCaseArrayOutput) Index(i pulumi.IntInput) UseCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UseCase {
		return vs[0].([]*UseCase)[vs[1].(int)]
	}).(UseCaseOutput)
}

type UseCaseMapOutput struct{ *pulumi.OutputState }

func (UseCaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UseCase)(nil)).Elem()
}

func (o UseCaseMapOutput) ToUseCaseMapOutput() UseCaseMapOutput {
	return o
}

func (o UseCaseMapOutput) ToUseCaseMapOutputWithContext(ctx context.Context) UseCaseMapOutput {
	return o
}

func (o UseCaseMapOutput) MapIndex(k pulumi.StringInput) UseCaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UseCase {
		return vs[0].(map[string]*UseCase)[vs[1].(string)]
	}).(UseCaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UseCaseInput)(nil)).Elem(), &UseCase{})
	pulumi.RegisterInputType(reflect.TypeOf((*UseCaseArrayInput)(nil)).Elem(), UseCaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UseCaseMapInput)(nil)).Elem(), UseCaseMap{})
	pulumi.RegisterOutputType(UseCaseOutput{})
	pulumi.RegisterOutputType(UseCaseArrayOutput{})
	pulumi.RegisterOutputType(UseCaseMapOutput{})
}
