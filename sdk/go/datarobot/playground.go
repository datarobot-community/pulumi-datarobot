// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Playground
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUseCase, err := datarobot.NewUseCase(ctx, "exampleUseCase", nil)
//			if err != nil {
//				return err
//			}
//			examplePlayground, err := datarobot.NewPlayground(ctx, "examplePlayground", &datarobot.PlaygroundArgs{
//				UseCaseId: exampleUseCase.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleId", examplePlayground.ID())
//			return nil
//		})
//	}
//
// ```
type Playground struct {
	pulumi.CustomResourceState

	// The description of the Playground.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Playground.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the Playground.
	UseCaseId pulumi.StringOutput `pulumi:"useCaseId"`
}

// NewPlayground registers a new resource with the given unique name, arguments, and options.
func NewPlayground(ctx *pulumi.Context,
	name string, args *PlaygroundArgs, opts ...pulumi.ResourceOption) (*Playground, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UseCaseId == nil {
		return nil, errors.New("invalid value for required argument 'UseCaseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Playground
	err := ctx.RegisterResource("datarobot:index/playground:Playground", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlayground gets an existing Playground resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlayground(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaygroundState, opts ...pulumi.ResourceOption) (*Playground, error) {
	var resource Playground
	err := ctx.ReadResource("datarobot:index/playground:Playground", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Playground resources.
type playgroundState struct {
	// The description of the Playground.
	Description *string `pulumi:"description"`
	// The name of the Playground.
	Name *string `pulumi:"name"`
	// The id of the Playground.
	UseCaseId *string `pulumi:"useCaseId"`
}

type PlaygroundState struct {
	// The description of the Playground.
	Description pulumi.StringPtrInput
	// The name of the Playground.
	Name pulumi.StringPtrInput
	// The id of the Playground.
	UseCaseId pulumi.StringPtrInput
}

func (PlaygroundState) ElementType() reflect.Type {
	return reflect.TypeOf((*playgroundState)(nil)).Elem()
}

type playgroundArgs struct {
	// The description of the Playground.
	Description *string `pulumi:"description"`
	// The name of the Playground.
	Name *string `pulumi:"name"`
	// The id of the Playground.
	UseCaseId string `pulumi:"useCaseId"`
}

// The set of arguments for constructing a Playground resource.
type PlaygroundArgs struct {
	// The description of the Playground.
	Description pulumi.StringPtrInput
	// The name of the Playground.
	Name pulumi.StringPtrInput
	// The id of the Playground.
	UseCaseId pulumi.StringInput
}

func (PlaygroundArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playgroundArgs)(nil)).Elem()
}

type PlaygroundInput interface {
	pulumi.Input

	ToPlaygroundOutput() PlaygroundOutput
	ToPlaygroundOutputWithContext(ctx context.Context) PlaygroundOutput
}

func (*Playground) ElementType() reflect.Type {
	return reflect.TypeOf((**Playground)(nil)).Elem()
}

func (i *Playground) ToPlaygroundOutput() PlaygroundOutput {
	return i.ToPlaygroundOutputWithContext(context.Background())
}

func (i *Playground) ToPlaygroundOutputWithContext(ctx context.Context) PlaygroundOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaygroundOutput)
}

// PlaygroundArrayInput is an input type that accepts PlaygroundArray and PlaygroundArrayOutput values.
// You can construct a concrete instance of `PlaygroundArrayInput` via:
//
//	PlaygroundArray{ PlaygroundArgs{...} }
type PlaygroundArrayInput interface {
	pulumi.Input

	ToPlaygroundArrayOutput() PlaygroundArrayOutput
	ToPlaygroundArrayOutputWithContext(context.Context) PlaygroundArrayOutput
}

type PlaygroundArray []PlaygroundInput

func (PlaygroundArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Playground)(nil)).Elem()
}

func (i PlaygroundArray) ToPlaygroundArrayOutput() PlaygroundArrayOutput {
	return i.ToPlaygroundArrayOutputWithContext(context.Background())
}

func (i PlaygroundArray) ToPlaygroundArrayOutputWithContext(ctx context.Context) PlaygroundArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaygroundArrayOutput)
}

// PlaygroundMapInput is an input type that accepts PlaygroundMap and PlaygroundMapOutput values.
// You can construct a concrete instance of `PlaygroundMapInput` via:
//
//	PlaygroundMap{ "key": PlaygroundArgs{...} }
type PlaygroundMapInput interface {
	pulumi.Input

	ToPlaygroundMapOutput() PlaygroundMapOutput
	ToPlaygroundMapOutputWithContext(context.Context) PlaygroundMapOutput
}

type PlaygroundMap map[string]PlaygroundInput

func (PlaygroundMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Playground)(nil)).Elem()
}

func (i PlaygroundMap) ToPlaygroundMapOutput() PlaygroundMapOutput {
	return i.ToPlaygroundMapOutputWithContext(context.Background())
}

func (i PlaygroundMap) ToPlaygroundMapOutputWithContext(ctx context.Context) PlaygroundMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaygroundMapOutput)
}

type PlaygroundOutput struct{ *pulumi.OutputState }

func (PlaygroundOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Playground)(nil)).Elem()
}

func (o PlaygroundOutput) ToPlaygroundOutput() PlaygroundOutput {
	return o
}

func (o PlaygroundOutput) ToPlaygroundOutputWithContext(ctx context.Context) PlaygroundOutput {
	return o
}

// The description of the Playground.
func (o PlaygroundOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Playground) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Playground.
func (o PlaygroundOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Playground) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the Playground.
func (o PlaygroundOutput) UseCaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Playground) pulumi.StringOutput { return v.UseCaseId }).(pulumi.StringOutput)
}

type PlaygroundArrayOutput struct{ *pulumi.OutputState }

func (PlaygroundArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Playground)(nil)).Elem()
}

func (o PlaygroundArrayOutput) ToPlaygroundArrayOutput() PlaygroundArrayOutput {
	return o
}

func (o PlaygroundArrayOutput) ToPlaygroundArrayOutputWithContext(ctx context.Context) PlaygroundArrayOutput {
	return o
}

func (o PlaygroundArrayOutput) Index(i pulumi.IntInput) PlaygroundOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Playground {
		return vs[0].([]*Playground)[vs[1].(int)]
	}).(PlaygroundOutput)
}

type PlaygroundMapOutput struct{ *pulumi.OutputState }

func (PlaygroundMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Playground)(nil)).Elem()
}

func (o PlaygroundMapOutput) ToPlaygroundMapOutput() PlaygroundMapOutput {
	return o
}

func (o PlaygroundMapOutput) ToPlaygroundMapOutputWithContext(ctx context.Context) PlaygroundMapOutput {
	return o
}

func (o PlaygroundMapOutput) MapIndex(k pulumi.StringInput) PlaygroundOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Playground {
		return vs[0].(map[string]*Playground)[vs[1].(string)]
	}).(PlaygroundOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlaygroundInput)(nil)).Elem(), &Playground{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaygroundArrayInput)(nil)).Elem(), PlaygroundArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaygroundMapInput)(nil)).Elem(), PlaygroundMap{})
	pulumi.RegisterOutputType(PlaygroundOutput{})
	pulumi.RegisterOutputType(PlaygroundArrayOutput{})
	pulumi.RegisterOutputType(PlaygroundMapOutput{})
}
