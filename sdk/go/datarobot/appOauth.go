// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing OAuth providers in DataRobot. This resource allows you to create, read, update, and delete OAuth provider configurations.
type AppOauth struct {
	pulumi.CustomResourceState

	// OAuth client ID.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// OAuth client secret.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Name of the OAuth provider.
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization ID associated with the OAuth provider.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Secure config ID for the OAuth provider.
	SecureConfigId pulumi.StringOutput `pulumi:"secureConfigId"`
	// Status of the OAuth provider.
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of the OAuth provider, e.g., 'google', 'box', etc.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAppOauth registers a new resource with the given unique name, arguments, and options.
func NewAppOauth(ctx *pulumi.Context,
	name string, args *AppOauthArgs, opts ...pulumi.ResourceOption) (*AppOauth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ClientId != nil {
		args.ClientId = pulumi.ToSecret(args.ClientId).(pulumi.StringInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientId",
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppOauth
	err := ctx.RegisterResource("datarobot:index/appOauth:AppOauth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppOauth gets an existing AppOauth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppOauth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppOauthState, opts ...pulumi.ResourceOption) (*AppOauth, error) {
	var resource AppOauth
	err := ctx.ReadResource("datarobot:index/appOauth:AppOauth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppOauth resources.
type appOauthState struct {
	// OAuth client ID.
	ClientId *string `pulumi:"clientId"`
	// OAuth client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Name of the OAuth provider.
	Name *string `pulumi:"name"`
	// Organization ID associated with the OAuth provider.
	OrgId *string `pulumi:"orgId"`
	// Secure config ID for the OAuth provider.
	SecureConfigId *string `pulumi:"secureConfigId"`
	// Status of the OAuth provider.
	Status *string `pulumi:"status"`
	// Type of the OAuth provider, e.g., 'google', 'box', etc.
	Type *string `pulumi:"type"`
}

type AppOauthState struct {
	// OAuth client ID.
	ClientId pulumi.StringPtrInput
	// OAuth client secret.
	ClientSecret pulumi.StringPtrInput
	// Name of the OAuth provider.
	Name pulumi.StringPtrInput
	// Organization ID associated with the OAuth provider.
	OrgId pulumi.StringPtrInput
	// Secure config ID for the OAuth provider.
	SecureConfigId pulumi.StringPtrInput
	// Status of the OAuth provider.
	Status pulumi.StringPtrInput
	// Type of the OAuth provider, e.g., 'google', 'box', etc.
	Type pulumi.StringPtrInput
}

func (AppOauthState) ElementType() reflect.Type {
	return reflect.TypeOf((*appOauthState)(nil)).Elem()
}

type appOauthArgs struct {
	// OAuth client ID.
	ClientId string `pulumi:"clientId"`
	// OAuth client secret.
	ClientSecret string `pulumi:"clientSecret"`
	// Name of the OAuth provider.
	Name *string `pulumi:"name"`
	// Type of the OAuth provider, e.g., 'google', 'box', etc.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a AppOauth resource.
type AppOauthArgs struct {
	// OAuth client ID.
	ClientId pulumi.StringInput
	// OAuth client secret.
	ClientSecret pulumi.StringInput
	// Name of the OAuth provider.
	Name pulumi.StringPtrInput
	// Type of the OAuth provider, e.g., 'google', 'box', etc.
	Type pulumi.StringInput
}

func (AppOauthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appOauthArgs)(nil)).Elem()
}

type AppOauthInput interface {
	pulumi.Input

	ToAppOauthOutput() AppOauthOutput
	ToAppOauthOutputWithContext(ctx context.Context) AppOauthOutput
}

func (*AppOauth) ElementType() reflect.Type {
	return reflect.TypeOf((**AppOauth)(nil)).Elem()
}

func (i *AppOauth) ToAppOauthOutput() AppOauthOutput {
	return i.ToAppOauthOutputWithContext(context.Background())
}

func (i *AppOauth) ToAppOauthOutputWithContext(ctx context.Context) AppOauthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOauthOutput)
}

// AppOauthArrayInput is an input type that accepts AppOauthArray and AppOauthArrayOutput values.
// You can construct a concrete instance of `AppOauthArrayInput` via:
//
//	AppOauthArray{ AppOauthArgs{...} }
type AppOauthArrayInput interface {
	pulumi.Input

	ToAppOauthArrayOutput() AppOauthArrayOutput
	ToAppOauthArrayOutputWithContext(context.Context) AppOauthArrayOutput
}

type AppOauthArray []AppOauthInput

func (AppOauthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppOauth)(nil)).Elem()
}

func (i AppOauthArray) ToAppOauthArrayOutput() AppOauthArrayOutput {
	return i.ToAppOauthArrayOutputWithContext(context.Background())
}

func (i AppOauthArray) ToAppOauthArrayOutputWithContext(ctx context.Context) AppOauthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOauthArrayOutput)
}

// AppOauthMapInput is an input type that accepts AppOauthMap and AppOauthMapOutput values.
// You can construct a concrete instance of `AppOauthMapInput` via:
//
//	AppOauthMap{ "key": AppOauthArgs{...} }
type AppOauthMapInput interface {
	pulumi.Input

	ToAppOauthMapOutput() AppOauthMapOutput
	ToAppOauthMapOutputWithContext(context.Context) AppOauthMapOutput
}

type AppOauthMap map[string]AppOauthInput

func (AppOauthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppOauth)(nil)).Elem()
}

func (i AppOauthMap) ToAppOauthMapOutput() AppOauthMapOutput {
	return i.ToAppOauthMapOutputWithContext(context.Background())
}

func (i AppOauthMap) ToAppOauthMapOutputWithContext(ctx context.Context) AppOauthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOauthMapOutput)
}

type AppOauthOutput struct{ *pulumi.OutputState }

func (AppOauthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppOauth)(nil)).Elem()
}

func (o AppOauthOutput) ToAppOauthOutput() AppOauthOutput {
	return o
}

func (o AppOauthOutput) ToAppOauthOutputWithContext(ctx context.Context) AppOauthOutput {
	return o
}

// OAuth client ID.
func (o AppOauthOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppOauth) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// OAuth client secret.
func (o AppOauthOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *AppOauth) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// Name of the OAuth provider.
func (o AppOauthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppOauth) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization ID associated with the OAuth provider.
func (o AppOauthOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppOauth) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Secure config ID for the OAuth provider.
func (o AppOauthOutput) SecureConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppOauth) pulumi.StringOutput { return v.SecureConfigId }).(pulumi.StringOutput)
}

// Status of the OAuth provider.
func (o AppOauthOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AppOauth) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Type of the OAuth provider, e.g., 'google', 'box', etc.
func (o AppOauthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AppOauth) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AppOauthArrayOutput struct{ *pulumi.OutputState }

func (AppOauthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppOauth)(nil)).Elem()
}

func (o AppOauthArrayOutput) ToAppOauthArrayOutput() AppOauthArrayOutput {
	return o
}

func (o AppOauthArrayOutput) ToAppOauthArrayOutputWithContext(ctx context.Context) AppOauthArrayOutput {
	return o
}

func (o AppOauthArrayOutput) Index(i pulumi.IntInput) AppOauthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppOauth {
		return vs[0].([]*AppOauth)[vs[1].(int)]
	}).(AppOauthOutput)
}

type AppOauthMapOutput struct{ *pulumi.OutputState }

func (AppOauthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppOauth)(nil)).Elem()
}

func (o AppOauthMapOutput) ToAppOauthMapOutput() AppOauthMapOutput {
	return o
}

func (o AppOauthMapOutput) ToAppOauthMapOutputWithContext(ctx context.Context) AppOauthMapOutput {
	return o
}

func (o AppOauthMapOutput) MapIndex(k pulumi.StringInput) AppOauthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppOauth {
		return vs[0].(map[string]*AppOauth)[vs[1].(string)]
	}).(AppOauthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppOauthInput)(nil)).Elem(), &AppOauth{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppOauthArrayInput)(nil)).Elem(), AppOauthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppOauthMapInput)(nil)).Elem(), AppOauthMap{})
	pulumi.RegisterOutputType(AppOauthOutput{})
	pulumi.RegisterOutputType(AppOauthArrayOutput{})
	pulumi.RegisterOutputType(AppOauthMapOutput{})
}
