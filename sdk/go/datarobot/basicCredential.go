// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Basic Credential
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datarobot.NewBasicCredential(ctx, "example", &datarobot.BasicCredentialArgs{
//				Description: pulumi.String("Description for the example basic credential"),
//				Password:    pulumi.String("example_password"),
//				User:        pulumi.String("example_user"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type BasicCredential struct {
	pulumi.CustomResourceState

	// The description of the Basic Credential.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Basic Credential.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password of the Basic Credential.
	Password pulumi.StringOutput `pulumi:"password"`
	// The user of the Basic Credential.
	User pulumi.StringOutput `pulumi:"user"`
}

// NewBasicCredential registers a new resource with the given unique name, arguments, and options.
func NewBasicCredential(ctx *pulumi.Context,
	name string, args *BasicCredentialArgs, opts ...pulumi.ResourceOption) (*BasicCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	if args.User != nil {
		args.User = pulumi.ToSecret(args.User).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"user",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BasicCredential
	err := ctx.RegisterResource("datarobot:index/basicCredential:BasicCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBasicCredential gets an existing BasicCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBasicCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BasicCredentialState, opts ...pulumi.ResourceOption) (*BasicCredential, error) {
	var resource BasicCredential
	err := ctx.ReadResource("datarobot:index/basicCredential:BasicCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BasicCredential resources.
type basicCredentialState struct {
	// The description of the Basic Credential.
	Description *string `pulumi:"description"`
	// The name of the Basic Credential.
	Name *string `pulumi:"name"`
	// The password of the Basic Credential.
	Password *string `pulumi:"password"`
	// The user of the Basic Credential.
	User *string `pulumi:"user"`
}

type BasicCredentialState struct {
	// The description of the Basic Credential.
	Description pulumi.StringPtrInput
	// The name of the Basic Credential.
	Name pulumi.StringPtrInput
	// The password of the Basic Credential.
	Password pulumi.StringPtrInput
	// The user of the Basic Credential.
	User pulumi.StringPtrInput
}

func (BasicCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*basicCredentialState)(nil)).Elem()
}

type basicCredentialArgs struct {
	// The description of the Basic Credential.
	Description *string `pulumi:"description"`
	// The name of the Basic Credential.
	Name *string `pulumi:"name"`
	// The password of the Basic Credential.
	Password string `pulumi:"password"`
	// The user of the Basic Credential.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a BasicCredential resource.
type BasicCredentialArgs struct {
	// The description of the Basic Credential.
	Description pulumi.StringPtrInput
	// The name of the Basic Credential.
	Name pulumi.StringPtrInput
	// The password of the Basic Credential.
	Password pulumi.StringInput
	// The user of the Basic Credential.
	User pulumi.StringInput
}

func (BasicCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*basicCredentialArgs)(nil)).Elem()
}

type BasicCredentialInput interface {
	pulumi.Input

	ToBasicCredentialOutput() BasicCredentialOutput
	ToBasicCredentialOutputWithContext(ctx context.Context) BasicCredentialOutput
}

func (*BasicCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicCredential)(nil)).Elem()
}

func (i *BasicCredential) ToBasicCredentialOutput() BasicCredentialOutput {
	return i.ToBasicCredentialOutputWithContext(context.Background())
}

func (i *BasicCredential) ToBasicCredentialOutputWithContext(ctx context.Context) BasicCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicCredentialOutput)
}

// BasicCredentialArrayInput is an input type that accepts BasicCredentialArray and BasicCredentialArrayOutput values.
// You can construct a concrete instance of `BasicCredentialArrayInput` via:
//
//	BasicCredentialArray{ BasicCredentialArgs{...} }
type BasicCredentialArrayInput interface {
	pulumi.Input

	ToBasicCredentialArrayOutput() BasicCredentialArrayOutput
	ToBasicCredentialArrayOutputWithContext(context.Context) BasicCredentialArrayOutput
}

type BasicCredentialArray []BasicCredentialInput

func (BasicCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BasicCredential)(nil)).Elem()
}

func (i BasicCredentialArray) ToBasicCredentialArrayOutput() BasicCredentialArrayOutput {
	return i.ToBasicCredentialArrayOutputWithContext(context.Background())
}

func (i BasicCredentialArray) ToBasicCredentialArrayOutputWithContext(ctx context.Context) BasicCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicCredentialArrayOutput)
}

// BasicCredentialMapInput is an input type that accepts BasicCredentialMap and BasicCredentialMapOutput values.
// You can construct a concrete instance of `BasicCredentialMapInput` via:
//
//	BasicCredentialMap{ "key": BasicCredentialArgs{...} }
type BasicCredentialMapInput interface {
	pulumi.Input

	ToBasicCredentialMapOutput() BasicCredentialMapOutput
	ToBasicCredentialMapOutputWithContext(context.Context) BasicCredentialMapOutput
}

type BasicCredentialMap map[string]BasicCredentialInput

func (BasicCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BasicCredential)(nil)).Elem()
}

func (i BasicCredentialMap) ToBasicCredentialMapOutput() BasicCredentialMapOutput {
	return i.ToBasicCredentialMapOutputWithContext(context.Background())
}

func (i BasicCredentialMap) ToBasicCredentialMapOutputWithContext(ctx context.Context) BasicCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicCredentialMapOutput)
}

type BasicCredentialOutput struct{ *pulumi.OutputState }

func (BasicCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicCredential)(nil)).Elem()
}

func (o BasicCredentialOutput) ToBasicCredentialOutput() BasicCredentialOutput {
	return o
}

func (o BasicCredentialOutput) ToBasicCredentialOutputWithContext(ctx context.Context) BasicCredentialOutput {
	return o
}

// The description of the Basic Credential.
func (o BasicCredentialOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BasicCredential) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Basic Credential.
func (o BasicCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password of the Basic Credential.
func (o BasicCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The user of the Basic Credential.
func (o BasicCredentialOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicCredential) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type BasicCredentialArrayOutput struct{ *pulumi.OutputState }

func (BasicCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BasicCredential)(nil)).Elem()
}

func (o BasicCredentialArrayOutput) ToBasicCredentialArrayOutput() BasicCredentialArrayOutput {
	return o
}

func (o BasicCredentialArrayOutput) ToBasicCredentialArrayOutputWithContext(ctx context.Context) BasicCredentialArrayOutput {
	return o
}

func (o BasicCredentialArrayOutput) Index(i pulumi.IntInput) BasicCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BasicCredential {
		return vs[0].([]*BasicCredential)[vs[1].(int)]
	}).(BasicCredentialOutput)
}

type BasicCredentialMapOutput struct{ *pulumi.OutputState }

func (BasicCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BasicCredential)(nil)).Elem()
}

func (o BasicCredentialMapOutput) ToBasicCredentialMapOutput() BasicCredentialMapOutput {
	return o
}

func (o BasicCredentialMapOutput) ToBasicCredentialMapOutputWithContext(ctx context.Context) BasicCredentialMapOutput {
	return o
}

func (o BasicCredentialMapOutput) MapIndex(k pulumi.StringInput) BasicCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BasicCredential {
		return vs[0].(map[string]*BasicCredential)[vs[1].(string)]
	}).(BasicCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BasicCredentialInput)(nil)).Elem(), &BasicCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicCredentialArrayInput)(nil)).Elem(), BasicCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicCredentialMapInput)(nil)).Elem(), BasicCredentialMap{})
	pulumi.RegisterOutputType(BasicCredentialOutput{})
	pulumi.RegisterOutputType(BasicCredentialArrayOutput{})
	pulumi.RegisterOutputType(BasicCredentialMapOutput{})
}
