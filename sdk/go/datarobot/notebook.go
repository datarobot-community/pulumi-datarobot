// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Notebook resource for importing and managing Jupyter notebooks in DataRobot.
//
// **NOTE**
//
// The synchronization of the file hash is one way. The provider will track changes of the Notebook file on disk
// and update _only_ when that changes. If the remote Notebook changes, the provider will not update the local file.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUseCase, err := datarobot.NewUseCase(ctx, "exampleUseCase", nil)
//			if err != nil {
//				return err
//			}
//			_, err = datarobot.NewNotebook(ctx, "exampleNotebook", &datarobot.NotebookArgs{
//				FilePath:  pulumi.String("/path/to/your/notebook.ipynb"),
//				UseCaseId: exampleUseCase.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Notebook struct {
	pulumi.CustomResourceState

	// The SHA-256 hash of the file contents.
	FileHash pulumi.StringOutput `pulumi:"fileHash"`
	// The path to the .ipynb file to import.
	FilePath pulumi.StringOutput `pulumi:"filePath"`
	// The name of the Notebook.
	Name pulumi.StringOutput `pulumi:"name"`
	// The URL to the Notebook.
	Url pulumi.StringOutput `pulumi:"url"`
	// The Use Case ID to add the Notebook to.
	UseCaseId pulumi.StringPtrOutput `pulumi:"useCaseId"`
}

// NewNotebook registers a new resource with the given unique name, arguments, and options.
func NewNotebook(ctx *pulumi.Context,
	name string, args *NotebookArgs, opts ...pulumi.ResourceOption) (*Notebook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FilePath == nil {
		return nil, errors.New("invalid value for required argument 'FilePath'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Notebook
	err := ctx.RegisterResource("datarobot:index/notebook:Notebook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotebook gets an existing Notebook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotebook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotebookState, opts ...pulumi.ResourceOption) (*Notebook, error) {
	var resource Notebook
	err := ctx.ReadResource("datarobot:index/notebook:Notebook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Notebook resources.
type notebookState struct {
	// The SHA-256 hash of the file contents.
	FileHash *string `pulumi:"fileHash"`
	// The path to the .ipynb file to import.
	FilePath *string `pulumi:"filePath"`
	// The name of the Notebook.
	Name *string `pulumi:"name"`
	// The URL to the Notebook.
	Url *string `pulumi:"url"`
	// The Use Case ID to add the Notebook to.
	UseCaseId *string `pulumi:"useCaseId"`
}

type NotebookState struct {
	// The SHA-256 hash of the file contents.
	FileHash pulumi.StringPtrInput
	// The path to the .ipynb file to import.
	FilePath pulumi.StringPtrInput
	// The name of the Notebook.
	Name pulumi.StringPtrInput
	// The URL to the Notebook.
	Url pulumi.StringPtrInput
	// The Use Case ID to add the Notebook to.
	UseCaseId pulumi.StringPtrInput
}

func (NotebookState) ElementType() reflect.Type {
	return reflect.TypeOf((*notebookState)(nil)).Elem()
}

type notebookArgs struct {
	// The path to the .ipynb file to import.
	FilePath string `pulumi:"filePath"`
	// The Use Case ID to add the Notebook to.
	UseCaseId *string `pulumi:"useCaseId"`
}

// The set of arguments for constructing a Notebook resource.
type NotebookArgs struct {
	// The path to the .ipynb file to import.
	FilePath pulumi.StringInput
	// The Use Case ID to add the Notebook to.
	UseCaseId pulumi.StringPtrInput
}

func (NotebookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notebookArgs)(nil)).Elem()
}

type NotebookInput interface {
	pulumi.Input

	ToNotebookOutput() NotebookOutput
	ToNotebookOutputWithContext(ctx context.Context) NotebookOutput
}

func (*Notebook) ElementType() reflect.Type {
	return reflect.TypeOf((**Notebook)(nil)).Elem()
}

func (i *Notebook) ToNotebookOutput() NotebookOutput {
	return i.ToNotebookOutputWithContext(context.Background())
}

func (i *Notebook) ToNotebookOutputWithContext(ctx context.Context) NotebookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookOutput)
}

// NotebookArrayInput is an input type that accepts NotebookArray and NotebookArrayOutput values.
// You can construct a concrete instance of `NotebookArrayInput` via:
//
//	NotebookArray{ NotebookArgs{...} }
type NotebookArrayInput interface {
	pulumi.Input

	ToNotebookArrayOutput() NotebookArrayOutput
	ToNotebookArrayOutputWithContext(context.Context) NotebookArrayOutput
}

type NotebookArray []NotebookInput

func (NotebookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notebook)(nil)).Elem()
}

func (i NotebookArray) ToNotebookArrayOutput() NotebookArrayOutput {
	return i.ToNotebookArrayOutputWithContext(context.Background())
}

func (i NotebookArray) ToNotebookArrayOutputWithContext(ctx context.Context) NotebookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookArrayOutput)
}

// NotebookMapInput is an input type that accepts NotebookMap and NotebookMapOutput values.
// You can construct a concrete instance of `NotebookMapInput` via:
//
//	NotebookMap{ "key": NotebookArgs{...} }
type NotebookMapInput interface {
	pulumi.Input

	ToNotebookMapOutput() NotebookMapOutput
	ToNotebookMapOutputWithContext(context.Context) NotebookMapOutput
}

type NotebookMap map[string]NotebookInput

func (NotebookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notebook)(nil)).Elem()
}

func (i NotebookMap) ToNotebookMapOutput() NotebookMapOutput {
	return i.ToNotebookMapOutputWithContext(context.Background())
}

func (i NotebookMap) ToNotebookMapOutputWithContext(ctx context.Context) NotebookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookMapOutput)
}

type NotebookOutput struct{ *pulumi.OutputState }

func (NotebookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Notebook)(nil)).Elem()
}

func (o NotebookOutput) ToNotebookOutput() NotebookOutput {
	return o
}

func (o NotebookOutput) ToNotebookOutputWithContext(ctx context.Context) NotebookOutput {
	return o
}

// The SHA-256 hash of the file contents.
func (o NotebookOutput) FileHash() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.FileHash }).(pulumi.StringOutput)
}

// The path to the .ipynb file to import.
func (o NotebookOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.FilePath }).(pulumi.StringOutput)
}

// The name of the Notebook.
func (o NotebookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The URL to the Notebook.
func (o NotebookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The Use Case ID to add the Notebook to.
func (o NotebookOutput) UseCaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notebook) pulumi.StringPtrOutput { return v.UseCaseId }).(pulumi.StringPtrOutput)
}

type NotebookArrayOutput struct{ *pulumi.OutputState }

func (NotebookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notebook)(nil)).Elem()
}

func (o NotebookArrayOutput) ToNotebookArrayOutput() NotebookArrayOutput {
	return o
}

func (o NotebookArrayOutput) ToNotebookArrayOutputWithContext(ctx context.Context) NotebookArrayOutput {
	return o
}

func (o NotebookArrayOutput) Index(i pulumi.IntInput) NotebookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Notebook {
		return vs[0].([]*Notebook)[vs[1].(int)]
	}).(NotebookOutput)
}

type NotebookMapOutput struct{ *pulumi.OutputState }

func (NotebookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notebook)(nil)).Elem()
}

func (o NotebookMapOutput) ToNotebookMapOutput() NotebookMapOutput {
	return o
}

func (o NotebookMapOutput) ToNotebookMapOutputWithContext(ctx context.Context) NotebookMapOutput {
	return o
}

func (o NotebookMapOutput) MapIndex(k pulumi.StringInput) NotebookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Notebook {
		return vs[0].(map[string]*Notebook)[vs[1].(string)]
	}).(NotebookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookInput)(nil)).Elem(), &Notebook{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookArrayInput)(nil)).Elem(), NotebookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotebookMapInput)(nil)).Elem(), NotebookMap{})
	pulumi.RegisterOutputType(NotebookOutput{})
	pulumi.RegisterOutputType(NotebookArrayOutput{})
	pulumi.RegisterOutputType(NotebookMapOutput{})
}
