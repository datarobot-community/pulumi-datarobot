// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Azure Credential
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datarobot.NewAzureCredential(ctx, "example", &datarobot.AzureCredentialArgs{
//				AzureConnectionString: pulumi.String("example_connection_string"),
//				Description:           pulumi.String("Description for the example Azure credential"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AzureCredential struct {
	pulumi.CustomResourceState

	// The connection string of the Azure Credential.
	AzureConnectionString pulumi.StringOutput `pulumi:"azureConnectionString"`
	// The description of the Azure Credential.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Azure Credential.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAzureCredential registers a new resource with the given unique name, arguments, and options.
func NewAzureCredential(ctx *pulumi.Context,
	name string, args *AzureCredentialArgs, opts ...pulumi.ResourceOption) (*AzureCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AzureConnectionString == nil {
		return nil, errors.New("invalid value for required argument 'AzureConnectionString'")
	}
	if args.AzureConnectionString != nil {
		args.AzureConnectionString = pulumi.ToSecret(args.AzureConnectionString).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"azureConnectionString",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AzureCredential
	err := ctx.RegisterResource("datarobot:index/azureCredential:AzureCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureCredential gets an existing AzureCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureCredentialState, opts ...pulumi.ResourceOption) (*AzureCredential, error) {
	var resource AzureCredential
	err := ctx.ReadResource("datarobot:index/azureCredential:AzureCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureCredential resources.
type azureCredentialState struct {
	// The connection string of the Azure Credential.
	AzureConnectionString *string `pulumi:"azureConnectionString"`
	// The description of the Azure Credential.
	Description *string `pulumi:"description"`
	// The name of the Azure Credential.
	Name *string `pulumi:"name"`
}

type AzureCredentialState struct {
	// The connection string of the Azure Credential.
	AzureConnectionString pulumi.StringPtrInput
	// The description of the Azure Credential.
	Description pulumi.StringPtrInput
	// The name of the Azure Credential.
	Name pulumi.StringPtrInput
}

func (AzureCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureCredentialState)(nil)).Elem()
}

type azureCredentialArgs struct {
	// The connection string of the Azure Credential.
	AzureConnectionString string `pulumi:"azureConnectionString"`
	// The description of the Azure Credential.
	Description *string `pulumi:"description"`
	// The name of the Azure Credential.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AzureCredential resource.
type AzureCredentialArgs struct {
	// The connection string of the Azure Credential.
	AzureConnectionString pulumi.StringInput
	// The description of the Azure Credential.
	Description pulumi.StringPtrInput
	// The name of the Azure Credential.
	Name pulumi.StringPtrInput
}

func (AzureCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureCredentialArgs)(nil)).Elem()
}

type AzureCredentialInput interface {
	pulumi.Input

	ToAzureCredentialOutput() AzureCredentialOutput
	ToAzureCredentialOutputWithContext(ctx context.Context) AzureCredentialOutput
}

func (*AzureCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureCredential)(nil)).Elem()
}

func (i *AzureCredential) ToAzureCredentialOutput() AzureCredentialOutput {
	return i.ToAzureCredentialOutputWithContext(context.Background())
}

func (i *AzureCredential) ToAzureCredentialOutputWithContext(ctx context.Context) AzureCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCredentialOutput)
}

// AzureCredentialArrayInput is an input type that accepts AzureCredentialArray and AzureCredentialArrayOutput values.
// You can construct a concrete instance of `AzureCredentialArrayInput` via:
//
//	AzureCredentialArray{ AzureCredentialArgs{...} }
type AzureCredentialArrayInput interface {
	pulumi.Input

	ToAzureCredentialArrayOutput() AzureCredentialArrayOutput
	ToAzureCredentialArrayOutputWithContext(context.Context) AzureCredentialArrayOutput
}

type AzureCredentialArray []AzureCredentialInput

func (AzureCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureCredential)(nil)).Elem()
}

func (i AzureCredentialArray) ToAzureCredentialArrayOutput() AzureCredentialArrayOutput {
	return i.ToAzureCredentialArrayOutputWithContext(context.Background())
}

func (i AzureCredentialArray) ToAzureCredentialArrayOutputWithContext(ctx context.Context) AzureCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCredentialArrayOutput)
}

// AzureCredentialMapInput is an input type that accepts AzureCredentialMap and AzureCredentialMapOutput values.
// You can construct a concrete instance of `AzureCredentialMapInput` via:
//
//	AzureCredentialMap{ "key": AzureCredentialArgs{...} }
type AzureCredentialMapInput interface {
	pulumi.Input

	ToAzureCredentialMapOutput() AzureCredentialMapOutput
	ToAzureCredentialMapOutputWithContext(context.Context) AzureCredentialMapOutput
}

type AzureCredentialMap map[string]AzureCredentialInput

func (AzureCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureCredential)(nil)).Elem()
}

func (i AzureCredentialMap) ToAzureCredentialMapOutput() AzureCredentialMapOutput {
	return i.ToAzureCredentialMapOutputWithContext(context.Background())
}

func (i AzureCredentialMap) ToAzureCredentialMapOutputWithContext(ctx context.Context) AzureCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCredentialMapOutput)
}

type AzureCredentialOutput struct{ *pulumi.OutputState }

func (AzureCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureCredential)(nil)).Elem()
}

func (o AzureCredentialOutput) ToAzureCredentialOutput() AzureCredentialOutput {
	return o
}

func (o AzureCredentialOutput) ToAzureCredentialOutputWithContext(ctx context.Context) AzureCredentialOutput {
	return o
}

// The connection string of the Azure Credential.
func (o AzureCredentialOutput) AzureConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureCredential) pulumi.StringOutput { return v.AzureConnectionString }).(pulumi.StringOutput)
}

// The description of the Azure Credential.
func (o AzureCredentialOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureCredential) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Credential.
func (o AzureCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AzureCredentialArrayOutput struct{ *pulumi.OutputState }

func (AzureCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureCredential)(nil)).Elem()
}

func (o AzureCredentialArrayOutput) ToAzureCredentialArrayOutput() AzureCredentialArrayOutput {
	return o
}

func (o AzureCredentialArrayOutput) ToAzureCredentialArrayOutputWithContext(ctx context.Context) AzureCredentialArrayOutput {
	return o
}

func (o AzureCredentialArrayOutput) Index(i pulumi.IntInput) AzureCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureCredential {
		return vs[0].([]*AzureCredential)[vs[1].(int)]
	}).(AzureCredentialOutput)
}

type AzureCredentialMapOutput struct{ *pulumi.OutputState }

func (AzureCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureCredential)(nil)).Elem()
}

func (o AzureCredentialMapOutput) ToAzureCredentialMapOutput() AzureCredentialMapOutput {
	return o
}

func (o AzureCredentialMapOutput) ToAzureCredentialMapOutputWithContext(ctx context.Context) AzureCredentialMapOutput {
	return o
}

func (o AzureCredentialMapOutput) MapIndex(k pulumi.StringInput) AzureCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureCredential {
		return vs[0].(map[string]*AzureCredential)[vs[1].(string)]
	}).(AzureCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureCredentialInput)(nil)).Elem(), &AzureCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureCredentialArrayInput)(nil)).Elem(), AzureCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureCredentialMapInput)(nil)).Elem(), AzureCredentialMap{})
	pulumi.RegisterOutputType(AzureCredentialOutput{})
	pulumi.RegisterOutputType(AzureCredentialArrayOutput{})
	pulumi.RegisterOutputType(AzureCredentialMapOutput{})
}
