// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vector database
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUseCase, err := datarobot.NewUseCase(ctx, "exampleUseCase", &datarobot.UseCaseArgs{
//				Description: pulumi.String("Description for the example use case"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDatasetFromFile, err := datarobot.NewDatasetFromFile(ctx, "exampleDatasetFromFile", &datarobot.DatasetFromFileArgs{
//				FilePath: pulumi.String("[Path to file to upload]"),
//				UseCaseIds: pulumi.StringArray{
//					exampleUseCase.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleVectorDatabase, err := datarobot.NewVectorDatabase(ctx, "exampleVectorDatabase", &datarobot.VectorDatabaseArgs{
//				UseCaseId: exampleUseCase.ID(),
//				DatasetId: exampleDatasetFromFile.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleId", exampleVectorDatabase.ID())
//			return nil
//		})
//	}
//
// ```
type VectorDatabase struct {
	pulumi.CustomResourceState

	// The chunking parameters for the Model.
	ChunkingParameters VectorDatabaseChunkingParametersOutput `pulumi:"chunkingParameters"`
	// The id of the Vector Database.
	DatasetId pulumi.StringOutput `pulumi:"datasetId"`
	// The name of the VectorDatabase.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the Use Case.
	UseCaseId pulumi.StringOutput `pulumi:"useCaseId"`
}

// NewVectorDatabase registers a new resource with the given unique name, arguments, and options.
func NewVectorDatabase(ctx *pulumi.Context,
	name string, args *VectorDatabaseArgs, opts ...pulumi.ResourceOption) (*VectorDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.UseCaseId == nil {
		return nil, errors.New("invalid value for required argument 'UseCaseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VectorDatabase
	err := ctx.RegisterResource("datarobot:index/vectorDatabase:VectorDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVectorDatabase gets an existing VectorDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVectorDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VectorDatabaseState, opts ...pulumi.ResourceOption) (*VectorDatabase, error) {
	var resource VectorDatabase
	err := ctx.ReadResource("datarobot:index/vectorDatabase:VectorDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VectorDatabase resources.
type vectorDatabaseState struct {
	// The chunking parameters for the Model.
	ChunkingParameters *VectorDatabaseChunkingParameters `pulumi:"chunkingParameters"`
	// The id of the Vector Database.
	DatasetId *string `pulumi:"datasetId"`
	// The name of the VectorDatabase.
	Name *string `pulumi:"name"`
	// The id of the Use Case.
	UseCaseId *string `pulumi:"useCaseId"`
}

type VectorDatabaseState struct {
	// The chunking parameters for the Model.
	ChunkingParameters VectorDatabaseChunkingParametersPtrInput
	// The id of the Vector Database.
	DatasetId pulumi.StringPtrInput
	// The name of the VectorDatabase.
	Name pulumi.StringPtrInput
	// The id of the Use Case.
	UseCaseId pulumi.StringPtrInput
}

func (VectorDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorDatabaseState)(nil)).Elem()
}

type vectorDatabaseArgs struct {
	// The chunking parameters for the Model.
	ChunkingParameters *VectorDatabaseChunkingParameters `pulumi:"chunkingParameters"`
	// The id of the Vector Database.
	DatasetId string `pulumi:"datasetId"`
	// The name of the VectorDatabase.
	Name *string `pulumi:"name"`
	// The id of the Use Case.
	UseCaseId string `pulumi:"useCaseId"`
}

// The set of arguments for constructing a VectorDatabase resource.
type VectorDatabaseArgs struct {
	// The chunking parameters for the Model.
	ChunkingParameters VectorDatabaseChunkingParametersPtrInput
	// The id of the Vector Database.
	DatasetId pulumi.StringInput
	// The name of the VectorDatabase.
	Name pulumi.StringPtrInput
	// The id of the Use Case.
	UseCaseId pulumi.StringInput
}

func (VectorDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorDatabaseArgs)(nil)).Elem()
}

type VectorDatabaseInput interface {
	pulumi.Input

	ToVectorDatabaseOutput() VectorDatabaseOutput
	ToVectorDatabaseOutputWithContext(ctx context.Context) VectorDatabaseOutput
}

func (*VectorDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorDatabase)(nil)).Elem()
}

func (i *VectorDatabase) ToVectorDatabaseOutput() VectorDatabaseOutput {
	return i.ToVectorDatabaseOutputWithContext(context.Background())
}

func (i *VectorDatabase) ToVectorDatabaseOutputWithContext(ctx context.Context) VectorDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorDatabaseOutput)
}

// VectorDatabaseArrayInput is an input type that accepts VectorDatabaseArray and VectorDatabaseArrayOutput values.
// You can construct a concrete instance of `VectorDatabaseArrayInput` via:
//
//	VectorDatabaseArray{ VectorDatabaseArgs{...} }
type VectorDatabaseArrayInput interface {
	pulumi.Input

	ToVectorDatabaseArrayOutput() VectorDatabaseArrayOutput
	ToVectorDatabaseArrayOutputWithContext(context.Context) VectorDatabaseArrayOutput
}

type VectorDatabaseArray []VectorDatabaseInput

func (VectorDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VectorDatabase)(nil)).Elem()
}

func (i VectorDatabaseArray) ToVectorDatabaseArrayOutput() VectorDatabaseArrayOutput {
	return i.ToVectorDatabaseArrayOutputWithContext(context.Background())
}

func (i VectorDatabaseArray) ToVectorDatabaseArrayOutputWithContext(ctx context.Context) VectorDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorDatabaseArrayOutput)
}

// VectorDatabaseMapInput is an input type that accepts VectorDatabaseMap and VectorDatabaseMapOutput values.
// You can construct a concrete instance of `VectorDatabaseMapInput` via:
//
//	VectorDatabaseMap{ "key": VectorDatabaseArgs{...} }
type VectorDatabaseMapInput interface {
	pulumi.Input

	ToVectorDatabaseMapOutput() VectorDatabaseMapOutput
	ToVectorDatabaseMapOutputWithContext(context.Context) VectorDatabaseMapOutput
}

type VectorDatabaseMap map[string]VectorDatabaseInput

func (VectorDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VectorDatabase)(nil)).Elem()
}

func (i VectorDatabaseMap) ToVectorDatabaseMapOutput() VectorDatabaseMapOutput {
	return i.ToVectorDatabaseMapOutputWithContext(context.Background())
}

func (i VectorDatabaseMap) ToVectorDatabaseMapOutputWithContext(ctx context.Context) VectorDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorDatabaseMapOutput)
}

type VectorDatabaseOutput struct{ *pulumi.OutputState }

func (VectorDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorDatabase)(nil)).Elem()
}

func (o VectorDatabaseOutput) ToVectorDatabaseOutput() VectorDatabaseOutput {
	return o
}

func (o VectorDatabaseOutput) ToVectorDatabaseOutputWithContext(ctx context.Context) VectorDatabaseOutput {
	return o
}

// The chunking parameters for the Model.
func (o VectorDatabaseOutput) ChunkingParameters() VectorDatabaseChunkingParametersOutput {
	return o.ApplyT(func(v *VectorDatabase) VectorDatabaseChunkingParametersOutput { return v.ChunkingParameters }).(VectorDatabaseChunkingParametersOutput)
}

// The id of the Vector Database.
func (o VectorDatabaseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorDatabase) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

// The name of the VectorDatabase.
func (o VectorDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the Use Case.
func (o VectorDatabaseOutput) UseCaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorDatabase) pulumi.StringOutput { return v.UseCaseId }).(pulumi.StringOutput)
}

type VectorDatabaseArrayOutput struct{ *pulumi.OutputState }

func (VectorDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VectorDatabase)(nil)).Elem()
}

func (o VectorDatabaseArrayOutput) ToVectorDatabaseArrayOutput() VectorDatabaseArrayOutput {
	return o
}

func (o VectorDatabaseArrayOutput) ToVectorDatabaseArrayOutputWithContext(ctx context.Context) VectorDatabaseArrayOutput {
	return o
}

func (o VectorDatabaseArrayOutput) Index(i pulumi.IntInput) VectorDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VectorDatabase {
		return vs[0].([]*VectorDatabase)[vs[1].(int)]
	}).(VectorDatabaseOutput)
}

type VectorDatabaseMapOutput struct{ *pulumi.OutputState }

func (VectorDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VectorDatabase)(nil)).Elem()
}

func (o VectorDatabaseMapOutput) ToVectorDatabaseMapOutput() VectorDatabaseMapOutput {
	return o
}

func (o VectorDatabaseMapOutput) ToVectorDatabaseMapOutputWithContext(ctx context.Context) VectorDatabaseMapOutput {
	return o
}

func (o VectorDatabaseMapOutput) MapIndex(k pulumi.StringInput) VectorDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VectorDatabase {
		return vs[0].(map[string]*VectorDatabase)[vs[1].(string)]
	}).(VectorDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VectorDatabaseInput)(nil)).Elem(), &VectorDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorDatabaseArrayInput)(nil)).Elem(), VectorDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorDatabaseMapInput)(nil)).Elem(), VectorDatabaseMap{})
	pulumi.RegisterOutputType(VectorDatabaseOutput{})
	pulumi.RegisterOutputType(VectorDatabaseArrayOutput{})
	pulumi.RegisterOutputType(VectorDatabaseMapOutput{})
}
