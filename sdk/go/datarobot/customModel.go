// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data set from file
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datarobot.NewRemoteRepository(ctx, "exampleRemoteRepository", &datarobot.RemoteRepositoryArgs{
//				Description: pulumi.String("GitHub repository with Datarobot user models"),
//				Location:    pulumi.String("https://github.com/datarobot/datarobot-user-models"),
//				SourceType:  pulumi.String("github"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCustomModel, err := datarobot.NewCustomModel(ctx, "exampleCustomModel", &datarobot.CustomModelArgs{
//				Description: pulumi.String("An example custom model from GitHub repository"),
//				Files: pulumi.Any{
//					"file1.py",
//					"file2.py",
//				},
//				TargetType:          pulumi.String("Binary"),
//				TargetName:          pulumi.String("my_label"),
//				BaseEnvironmentName: pulumi.String("[GenAI] Python 3.11 with Moderations"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleId", exampleCustomModel.ID())
//			return nil
//		})
//	}
//
// ```
type CustomModel struct {
	pulumi.CustomResourceState

	// The ID of the base environment for the Custom Model.
	BaseEnvironmentId pulumi.StringOutput `pulumi:"baseEnvironmentId"`
	// The name of the base environment for the Custom Model.
	BaseEnvironmentName pulumi.StringPtrOutput `pulumi:"baseEnvironmentName"`
	// The ID of the base environment version for the Custom Model.
	BaseEnvironmentVersionId pulumi.StringOutput `pulumi:"baseEnvironmentVersionId"`
	// Class labels for multiclass classification. Cannot be used with class*labels*file.
	ClassLabels pulumi.StringArrayOutput `pulumi:"classLabels"`
	// Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.
	ClassLabelsFile pulumi.StringPtrOutput `pulumi:"classLabelsFile"`
	// The number of deployments for the Custom Model.
	DeploymentsCount pulumi.IntOutput `pulumi:"deploymentsCount"`
	// The description of the Custom Model.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.
	Files pulumi.AnyOutput `pulumi:"files"`
	// The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrOutput `pulumi:"folderPath"`
	// The guard configurations for the Custom Model.
	GuardConfigurations CustomModelGuardConfigurationArrayOutput `pulumi:"guardConfigurations"`
	// Flag indicating if the Custom Model is a proxy model.
	IsProxy pulumi.BoolOutput `pulumi:"isProxy"`
	// The language used to build the Custom Model.
	Language pulumi.StringPtrOutput `pulumi:"language"`
	// The name of the Custom Model.
	Name pulumi.StringOutput `pulumi:"name"`
	// The negative class label of the Custom Model.
	NegativeClassLabel pulumi.StringOutput `pulumi:"negativeClassLabel"`
	// The overall moderation configuration for the Custom Model.
	OverallModerationConfiguration CustomModelOverallModerationConfigurationPtrOutput `pulumi:"overallModerationConfiguration"`
	// The positive class label of the Custom Model.
	PositiveClassLabel pulumi.StringOutput `pulumi:"positiveClassLabel"`
	// The prediction threshold of the Custom Model.
	PredictionThreshold pulumi.Float64Output `pulumi:"predictionThreshold"`
	// The resource settings for the Custom Model.
	ResourceSettings CustomModelResourceSettingsOutput `pulumi:"resourceSettings"`
	// The runtime parameter values for the Custom Model.
	RuntimeParameterValues CustomModelRuntimeParameterValueArrayOutput `pulumi:"runtimeParameterValues"`
	// The ID of the source LLM Blueprint for the Custom Model.
	SourceLlmBlueprintId pulumi.StringPtrOutput `pulumi:"sourceLlmBlueprintId"`
	// The source remote repositories for the Custom Model.
	SourceRemoteRepositories CustomModelSourceRemoteRepositoryArrayOutput `pulumi:"sourceRemoteRepositories"`
	// The target name of the Custom Model.
	TargetName pulumi.StringOutput `pulumi:"targetName"`
	// The target type of the Custom Model.
	TargetType pulumi.StringPtrOutput `pulumi:"targetType"`
	// The name of the partition column in the training dataset assigned to the Custom Model.
	TrainingDataPartitionColumn pulumi.StringPtrOutput `pulumi:"trainingDataPartitionColumn"`
	// The ID of the training dataset assigned to the Custom Model.
	TrainingDatasetId pulumi.StringPtrOutput `pulumi:"trainingDatasetId"`
	// The name of the training dataset assigned to the Custom Model.
	TrainingDatasetName pulumi.StringOutput `pulumi:"trainingDatasetName"`
	// The version ID of the training dataset assigned to the Custom Model.
	TrainingDatasetVersionId pulumi.StringOutput `pulumi:"trainingDatasetVersionId"`
	// The ID of the latest Custom Model version.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewCustomModel registers a new resource with the given unique name, arguments, and options.
func NewCustomModel(ctx *pulumi.Context,
	name string, args *CustomModelArgs, opts ...pulumi.ResourceOption) (*CustomModel, error) {
	if args == nil {
		args = &CustomModelArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomModel
	err := ctx.RegisterResource("datarobot:index/customModel:CustomModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomModel gets an existing CustomModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomModelState, opts ...pulumi.ResourceOption) (*CustomModel, error) {
	var resource CustomModel
	err := ctx.ReadResource("datarobot:index/customModel:CustomModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomModel resources.
type customModelState struct {
	// The ID of the base environment for the Custom Model.
	BaseEnvironmentId *string `pulumi:"baseEnvironmentId"`
	// The name of the base environment for the Custom Model.
	BaseEnvironmentName *string `pulumi:"baseEnvironmentName"`
	// The ID of the base environment version for the Custom Model.
	BaseEnvironmentVersionId *string `pulumi:"baseEnvironmentVersionId"`
	// Class labels for multiclass classification. Cannot be used with class*labels*file.
	ClassLabels []string `pulumi:"classLabels"`
	// Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.
	ClassLabelsFile *string `pulumi:"classLabelsFile"`
	// The number of deployments for the Custom Model.
	DeploymentsCount *int `pulumi:"deploymentsCount"`
	// The description of the Custom Model.
	Description *string `pulumi:"description"`
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.
	Files interface{} `pulumi:"files"`
	// The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// The guard configurations for the Custom Model.
	GuardConfigurations []CustomModelGuardConfiguration `pulumi:"guardConfigurations"`
	// Flag indicating if the Custom Model is a proxy model.
	IsProxy *bool `pulumi:"isProxy"`
	// The language used to build the Custom Model.
	Language *string `pulumi:"language"`
	// The name of the Custom Model.
	Name *string `pulumi:"name"`
	// The negative class label of the Custom Model.
	NegativeClassLabel *string `pulumi:"negativeClassLabel"`
	// The overall moderation configuration for the Custom Model.
	OverallModerationConfiguration *CustomModelOverallModerationConfiguration `pulumi:"overallModerationConfiguration"`
	// The positive class label of the Custom Model.
	PositiveClassLabel *string `pulumi:"positiveClassLabel"`
	// The prediction threshold of the Custom Model.
	PredictionThreshold *float64 `pulumi:"predictionThreshold"`
	// The resource settings for the Custom Model.
	ResourceSettings *CustomModelResourceSettings `pulumi:"resourceSettings"`
	// The runtime parameter values for the Custom Model.
	RuntimeParameterValues []CustomModelRuntimeParameterValue `pulumi:"runtimeParameterValues"`
	// The ID of the source LLM Blueprint for the Custom Model.
	SourceLlmBlueprintId *string `pulumi:"sourceLlmBlueprintId"`
	// The source remote repositories for the Custom Model.
	SourceRemoteRepositories []CustomModelSourceRemoteRepository `pulumi:"sourceRemoteRepositories"`
	// The target name of the Custom Model.
	TargetName *string `pulumi:"targetName"`
	// The target type of the Custom Model.
	TargetType *string `pulumi:"targetType"`
	// The name of the partition column in the training dataset assigned to the Custom Model.
	TrainingDataPartitionColumn *string `pulumi:"trainingDataPartitionColumn"`
	// The ID of the training dataset assigned to the Custom Model.
	TrainingDatasetId *string `pulumi:"trainingDatasetId"`
	// The name of the training dataset assigned to the Custom Model.
	TrainingDatasetName *string `pulumi:"trainingDatasetName"`
	// The version ID of the training dataset assigned to the Custom Model.
	TrainingDatasetVersionId *string `pulumi:"trainingDatasetVersionId"`
	// The ID of the latest Custom Model version.
	VersionId *string `pulumi:"versionId"`
}

type CustomModelState struct {
	// The ID of the base environment for the Custom Model.
	BaseEnvironmentId pulumi.StringPtrInput
	// The name of the base environment for the Custom Model.
	BaseEnvironmentName pulumi.StringPtrInput
	// The ID of the base environment version for the Custom Model.
	BaseEnvironmentVersionId pulumi.StringPtrInput
	// Class labels for multiclass classification. Cannot be used with class*labels*file.
	ClassLabels pulumi.StringArrayInput
	// Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.
	ClassLabelsFile pulumi.StringPtrInput
	// The number of deployments for the Custom Model.
	DeploymentsCount pulumi.IntPtrInput
	// The description of the Custom Model.
	Description pulumi.StringPtrInput
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.
	Files pulumi.Input
	// The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// The guard configurations for the Custom Model.
	GuardConfigurations CustomModelGuardConfigurationArrayInput
	// Flag indicating if the Custom Model is a proxy model.
	IsProxy pulumi.BoolPtrInput
	// The language used to build the Custom Model.
	Language pulumi.StringPtrInput
	// The name of the Custom Model.
	Name pulumi.StringPtrInput
	// The negative class label of the Custom Model.
	NegativeClassLabel pulumi.StringPtrInput
	// The overall moderation configuration for the Custom Model.
	OverallModerationConfiguration CustomModelOverallModerationConfigurationPtrInput
	// The positive class label of the Custom Model.
	PositiveClassLabel pulumi.StringPtrInput
	// The prediction threshold of the Custom Model.
	PredictionThreshold pulumi.Float64PtrInput
	// The resource settings for the Custom Model.
	ResourceSettings CustomModelResourceSettingsPtrInput
	// The runtime parameter values for the Custom Model.
	RuntimeParameterValues CustomModelRuntimeParameterValueArrayInput
	// The ID of the source LLM Blueprint for the Custom Model.
	SourceLlmBlueprintId pulumi.StringPtrInput
	// The source remote repositories for the Custom Model.
	SourceRemoteRepositories CustomModelSourceRemoteRepositoryArrayInput
	// The target name of the Custom Model.
	TargetName pulumi.StringPtrInput
	// The target type of the Custom Model.
	TargetType pulumi.StringPtrInput
	// The name of the partition column in the training dataset assigned to the Custom Model.
	TrainingDataPartitionColumn pulumi.StringPtrInput
	// The ID of the training dataset assigned to the Custom Model.
	TrainingDatasetId pulumi.StringPtrInput
	// The name of the training dataset assigned to the Custom Model.
	TrainingDatasetName pulumi.StringPtrInput
	// The version ID of the training dataset assigned to the Custom Model.
	TrainingDatasetVersionId pulumi.StringPtrInput
	// The ID of the latest Custom Model version.
	VersionId pulumi.StringPtrInput
}

func (CustomModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*customModelState)(nil)).Elem()
}

type customModelArgs struct {
	// The ID of the base environment for the Custom Model.
	BaseEnvironmentId *string `pulumi:"baseEnvironmentId"`
	// The name of the base environment for the Custom Model.
	BaseEnvironmentName *string `pulumi:"baseEnvironmentName"`
	// The ID of the base environment version for the Custom Model.
	BaseEnvironmentVersionId *string `pulumi:"baseEnvironmentVersionId"`
	// Class labels for multiclass classification. Cannot be used with class*labels*file.
	ClassLabels []string `pulumi:"classLabels"`
	// Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.
	ClassLabelsFile *string `pulumi:"classLabelsFile"`
	// The description of the Custom Model.
	Description *string `pulumi:"description"`
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.
	Files interface{} `pulumi:"files"`
	// The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// The guard configurations for the Custom Model.
	GuardConfigurations []CustomModelGuardConfiguration `pulumi:"guardConfigurations"`
	// Flag indicating if the Custom Model is a proxy model.
	IsProxy *bool `pulumi:"isProxy"`
	// The language used to build the Custom Model.
	Language *string `pulumi:"language"`
	// The name of the Custom Model.
	Name *string `pulumi:"name"`
	// The negative class label of the Custom Model.
	NegativeClassLabel *string `pulumi:"negativeClassLabel"`
	// The overall moderation configuration for the Custom Model.
	OverallModerationConfiguration *CustomModelOverallModerationConfiguration `pulumi:"overallModerationConfiguration"`
	// The positive class label of the Custom Model.
	PositiveClassLabel *string `pulumi:"positiveClassLabel"`
	// The prediction threshold of the Custom Model.
	PredictionThreshold *float64 `pulumi:"predictionThreshold"`
	// The resource settings for the Custom Model.
	ResourceSettings *CustomModelResourceSettings `pulumi:"resourceSettings"`
	// The runtime parameter values for the Custom Model.
	RuntimeParameterValues []CustomModelRuntimeParameterValue `pulumi:"runtimeParameterValues"`
	// The ID of the source LLM Blueprint for the Custom Model.
	SourceLlmBlueprintId *string `pulumi:"sourceLlmBlueprintId"`
	// The source remote repositories for the Custom Model.
	SourceRemoteRepositories []CustomModelSourceRemoteRepository `pulumi:"sourceRemoteRepositories"`
	// The target name of the Custom Model.
	TargetName *string `pulumi:"targetName"`
	// The target type of the Custom Model.
	TargetType *string `pulumi:"targetType"`
	// The name of the partition column in the training dataset assigned to the Custom Model.
	TrainingDataPartitionColumn *string `pulumi:"trainingDataPartitionColumn"`
	// The ID of the training dataset assigned to the Custom Model.
	TrainingDatasetId *string `pulumi:"trainingDatasetId"`
}

// The set of arguments for constructing a CustomModel resource.
type CustomModelArgs struct {
	// The ID of the base environment for the Custom Model.
	BaseEnvironmentId pulumi.StringPtrInput
	// The name of the base environment for the Custom Model.
	BaseEnvironmentName pulumi.StringPtrInput
	// The ID of the base environment version for the Custom Model.
	BaseEnvironmentVersionId pulumi.StringPtrInput
	// Class labels for multiclass classification. Cannot be used with class*labels*file.
	ClassLabels pulumi.StringArrayInput
	// Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.
	ClassLabelsFile pulumi.StringPtrInput
	// The description of the Custom Model.
	Description pulumi.StringPtrInput
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.
	Files pulumi.Input
	// The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// The guard configurations for the Custom Model.
	GuardConfigurations CustomModelGuardConfigurationArrayInput
	// Flag indicating if the Custom Model is a proxy model.
	IsProxy pulumi.BoolPtrInput
	// The language used to build the Custom Model.
	Language pulumi.StringPtrInput
	// The name of the Custom Model.
	Name pulumi.StringPtrInput
	// The negative class label of the Custom Model.
	NegativeClassLabel pulumi.StringPtrInput
	// The overall moderation configuration for the Custom Model.
	OverallModerationConfiguration CustomModelOverallModerationConfigurationPtrInput
	// The positive class label of the Custom Model.
	PositiveClassLabel pulumi.StringPtrInput
	// The prediction threshold of the Custom Model.
	PredictionThreshold pulumi.Float64PtrInput
	// The resource settings for the Custom Model.
	ResourceSettings CustomModelResourceSettingsPtrInput
	// The runtime parameter values for the Custom Model.
	RuntimeParameterValues CustomModelRuntimeParameterValueArrayInput
	// The ID of the source LLM Blueprint for the Custom Model.
	SourceLlmBlueprintId pulumi.StringPtrInput
	// The source remote repositories for the Custom Model.
	SourceRemoteRepositories CustomModelSourceRemoteRepositoryArrayInput
	// The target name of the Custom Model.
	TargetName pulumi.StringPtrInput
	// The target type of the Custom Model.
	TargetType pulumi.StringPtrInput
	// The name of the partition column in the training dataset assigned to the Custom Model.
	TrainingDataPartitionColumn pulumi.StringPtrInput
	// The ID of the training dataset assigned to the Custom Model.
	TrainingDatasetId pulumi.StringPtrInput
}

func (CustomModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customModelArgs)(nil)).Elem()
}

type CustomModelInput interface {
	pulumi.Input

	ToCustomModelOutput() CustomModelOutput
	ToCustomModelOutputWithContext(ctx context.Context) CustomModelOutput
}

func (*CustomModel) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomModel)(nil)).Elem()
}

func (i *CustomModel) ToCustomModelOutput() CustomModelOutput {
	return i.ToCustomModelOutputWithContext(context.Background())
}

func (i *CustomModel) ToCustomModelOutputWithContext(ctx context.Context) CustomModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelOutput)
}

// CustomModelArrayInput is an input type that accepts CustomModelArray and CustomModelArrayOutput values.
// You can construct a concrete instance of `CustomModelArrayInput` via:
//
//	CustomModelArray{ CustomModelArgs{...} }
type CustomModelArrayInput interface {
	pulumi.Input

	ToCustomModelArrayOutput() CustomModelArrayOutput
	ToCustomModelArrayOutputWithContext(context.Context) CustomModelArrayOutput
}

type CustomModelArray []CustomModelInput

func (CustomModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomModel)(nil)).Elem()
}

func (i CustomModelArray) ToCustomModelArrayOutput() CustomModelArrayOutput {
	return i.ToCustomModelArrayOutputWithContext(context.Background())
}

func (i CustomModelArray) ToCustomModelArrayOutputWithContext(ctx context.Context) CustomModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelArrayOutput)
}

// CustomModelMapInput is an input type that accepts CustomModelMap and CustomModelMapOutput values.
// You can construct a concrete instance of `CustomModelMapInput` via:
//
//	CustomModelMap{ "key": CustomModelArgs{...} }
type CustomModelMapInput interface {
	pulumi.Input

	ToCustomModelMapOutput() CustomModelMapOutput
	ToCustomModelMapOutputWithContext(context.Context) CustomModelMapOutput
}

type CustomModelMap map[string]CustomModelInput

func (CustomModelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomModel)(nil)).Elem()
}

func (i CustomModelMap) ToCustomModelMapOutput() CustomModelMapOutput {
	return i.ToCustomModelMapOutputWithContext(context.Background())
}

func (i CustomModelMap) ToCustomModelMapOutputWithContext(ctx context.Context) CustomModelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelMapOutput)
}

type CustomModelOutput struct{ *pulumi.OutputState }

func (CustomModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomModel)(nil)).Elem()
}

func (o CustomModelOutput) ToCustomModelOutput() CustomModelOutput {
	return o
}

func (o CustomModelOutput) ToCustomModelOutputWithContext(ctx context.Context) CustomModelOutput {
	return o
}

// The ID of the base environment for the Custom Model.
func (o CustomModelOutput) BaseEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringOutput { return v.BaseEnvironmentId }).(pulumi.StringOutput)
}

// The name of the base environment for the Custom Model.
func (o CustomModelOutput) BaseEnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringPtrOutput { return v.BaseEnvironmentName }).(pulumi.StringPtrOutput)
}

// The ID of the base environment version for the Custom Model.
func (o CustomModelOutput) BaseEnvironmentVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringOutput { return v.BaseEnvironmentVersionId }).(pulumi.StringOutput)
}

// Class labels for multiclass classification. Cannot be used with class*labels*file.
func (o CustomModelOutput) ClassLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringArrayOutput { return v.ClassLabels }).(pulumi.StringArrayOutput)
}

// Path to file containing newline separated class labels for multiclass classification. Cannot be used with class_labels.
func (o CustomModelOutput) ClassLabelsFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringPtrOutput { return v.ClassLabelsFile }).(pulumi.StringPtrOutput)
}

// The number of deployments for the Custom Model.
func (o CustomModelOutput) DeploymentsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.IntOutput { return v.DeploymentsCount }).(pulumi.IntOutput)
}

// The description of the Custom Model.
func (o CustomModelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Custom Model. If list is of strings, then basenames will be used for tuples.
func (o CustomModelOutput) Files() pulumi.AnyOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.AnyOutput { return v.Files }).(pulumi.AnyOutput)
}

// The path to a folder containing files to build the Custom Model. Each file in the folder is uploaded under path relative to a folder path.
func (o CustomModelOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringPtrOutput { return v.FolderPath }).(pulumi.StringPtrOutput)
}

// The guard configurations for the Custom Model.
func (o CustomModelOutput) GuardConfigurations() CustomModelGuardConfigurationArrayOutput {
	return o.ApplyT(func(v *CustomModel) CustomModelGuardConfigurationArrayOutput { return v.GuardConfigurations }).(CustomModelGuardConfigurationArrayOutput)
}

// Flag indicating if the Custom Model is a proxy model.
func (o CustomModelOutput) IsProxy() pulumi.BoolOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.BoolOutput { return v.IsProxy }).(pulumi.BoolOutput)
}

// The language used to build the Custom Model.
func (o CustomModelOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringPtrOutput { return v.Language }).(pulumi.StringPtrOutput)
}

// The name of the Custom Model.
func (o CustomModelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The negative class label of the Custom Model.
func (o CustomModelOutput) NegativeClassLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringOutput { return v.NegativeClassLabel }).(pulumi.StringOutput)
}

// The overall moderation configuration for the Custom Model.
func (o CustomModelOutput) OverallModerationConfiguration() CustomModelOverallModerationConfigurationPtrOutput {
	return o.ApplyT(func(v *CustomModel) CustomModelOverallModerationConfigurationPtrOutput {
		return v.OverallModerationConfiguration
	}).(CustomModelOverallModerationConfigurationPtrOutput)
}

// The positive class label of the Custom Model.
func (o CustomModelOutput) PositiveClassLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringOutput { return v.PositiveClassLabel }).(pulumi.StringOutput)
}

// The prediction threshold of the Custom Model.
func (o CustomModelOutput) PredictionThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v *CustomModel) pulumi.Float64Output { return v.PredictionThreshold }).(pulumi.Float64Output)
}

// The resource settings for the Custom Model.
func (o CustomModelOutput) ResourceSettings() CustomModelResourceSettingsOutput {
	return o.ApplyT(func(v *CustomModel) CustomModelResourceSettingsOutput { return v.ResourceSettings }).(CustomModelResourceSettingsOutput)
}

// The runtime parameter values for the Custom Model.
func (o CustomModelOutput) RuntimeParameterValues() CustomModelRuntimeParameterValueArrayOutput {
	return o.ApplyT(func(v *CustomModel) CustomModelRuntimeParameterValueArrayOutput { return v.RuntimeParameterValues }).(CustomModelRuntimeParameterValueArrayOutput)
}

// The ID of the source LLM Blueprint for the Custom Model.
func (o CustomModelOutput) SourceLlmBlueprintId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringPtrOutput { return v.SourceLlmBlueprintId }).(pulumi.StringPtrOutput)
}

// The source remote repositories for the Custom Model.
func (o CustomModelOutput) SourceRemoteRepositories() CustomModelSourceRemoteRepositoryArrayOutput {
	return o.ApplyT(func(v *CustomModel) CustomModelSourceRemoteRepositoryArrayOutput { return v.SourceRemoteRepositories }).(CustomModelSourceRemoteRepositoryArrayOutput)
}

// The target name of the Custom Model.
func (o CustomModelOutput) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringOutput { return v.TargetName }).(pulumi.StringOutput)
}

// The target type of the Custom Model.
func (o CustomModelOutput) TargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringPtrOutput { return v.TargetType }).(pulumi.StringPtrOutput)
}

// The name of the partition column in the training dataset assigned to the Custom Model.
func (o CustomModelOutput) TrainingDataPartitionColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringPtrOutput { return v.TrainingDataPartitionColumn }).(pulumi.StringPtrOutput)
}

// The ID of the training dataset assigned to the Custom Model.
func (o CustomModelOutput) TrainingDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringPtrOutput { return v.TrainingDatasetId }).(pulumi.StringPtrOutput)
}

// The name of the training dataset assigned to the Custom Model.
func (o CustomModelOutput) TrainingDatasetName() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringOutput { return v.TrainingDatasetName }).(pulumi.StringOutput)
}

// The version ID of the training dataset assigned to the Custom Model.
func (o CustomModelOutput) TrainingDatasetVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringOutput { return v.TrainingDatasetVersionId }).(pulumi.StringOutput)
}

// The ID of the latest Custom Model version.
func (o CustomModelOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomModel) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

type CustomModelArrayOutput struct{ *pulumi.OutputState }

func (CustomModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomModel)(nil)).Elem()
}

func (o CustomModelArrayOutput) ToCustomModelArrayOutput() CustomModelArrayOutput {
	return o
}

func (o CustomModelArrayOutput) ToCustomModelArrayOutputWithContext(ctx context.Context) CustomModelArrayOutput {
	return o
}

func (o CustomModelArrayOutput) Index(i pulumi.IntInput) CustomModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomModel {
		return vs[0].([]*CustomModel)[vs[1].(int)]
	}).(CustomModelOutput)
}

type CustomModelMapOutput struct{ *pulumi.OutputState }

func (CustomModelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomModel)(nil)).Elem()
}

func (o CustomModelMapOutput) ToCustomModelMapOutput() CustomModelMapOutput {
	return o
}

func (o CustomModelMapOutput) ToCustomModelMapOutputWithContext(ctx context.Context) CustomModelMapOutput {
	return o
}

func (o CustomModelMapOutput) MapIndex(k pulumi.StringInput) CustomModelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomModel {
		return vs[0].(map[string]*CustomModel)[vs[1].(string)]
	}).(CustomModelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomModelInput)(nil)).Elem(), &CustomModel{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomModelArrayInput)(nil)).Elem(), CustomModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomModelMapInput)(nil)).Elem(), CustomModelMap{})
	pulumi.RegisterOutputType(CustomModelOutput{})
	pulumi.RegisterOutputType(CustomModelArrayOutput{})
	pulumi.RegisterOutputType(CustomModelMapOutput{})
}
