// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Api Token Credential
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datarobot.NewApiTokenCredential(ctx, "example", &datarobot.ApiTokenCredentialArgs{
//				ApiToken: pulumi.String("[the API Key value here]"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ApiTokenCredential struct {
	pulumi.CustomResourceState

	// The description of the Api Token Credential.
	ApiToken pulumi.StringOutput `pulumi:"apiToken"`
	// The description of the Api Token Credential.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Api Token Credential.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewApiTokenCredential registers a new resource with the given unique name, arguments, and options.
func NewApiTokenCredential(ctx *pulumi.Context,
	name string, args *ApiTokenCredentialArgs, opts ...pulumi.ResourceOption) (*ApiTokenCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiToken == nil {
		return nil, errors.New("invalid value for required argument 'ApiToken'")
	}
	if args.ApiToken != nil {
		args.ApiToken = pulumi.ToSecret(args.ApiToken).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiTokenCredential
	err := ctx.RegisterResource("datarobot:index/apiTokenCredential:ApiTokenCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiTokenCredential gets an existing ApiTokenCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiTokenCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiTokenCredentialState, opts ...pulumi.ResourceOption) (*ApiTokenCredential, error) {
	var resource ApiTokenCredential
	err := ctx.ReadResource("datarobot:index/apiTokenCredential:ApiTokenCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiTokenCredential resources.
type apiTokenCredentialState struct {
	// The description of the Api Token Credential.
	ApiToken *string `pulumi:"apiToken"`
	// The description of the Api Token Credential.
	Description *string `pulumi:"description"`
	// The name of the Api Token Credential.
	Name *string `pulumi:"name"`
}

type ApiTokenCredentialState struct {
	// The description of the Api Token Credential.
	ApiToken pulumi.StringPtrInput
	// The description of the Api Token Credential.
	Description pulumi.StringPtrInput
	// The name of the Api Token Credential.
	Name pulumi.StringPtrInput
}

func (ApiTokenCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiTokenCredentialState)(nil)).Elem()
}

type apiTokenCredentialArgs struct {
	// The description of the Api Token Credential.
	ApiToken string `pulumi:"apiToken"`
	// The description of the Api Token Credential.
	Description *string `pulumi:"description"`
	// The name of the Api Token Credential.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ApiTokenCredential resource.
type ApiTokenCredentialArgs struct {
	// The description of the Api Token Credential.
	ApiToken pulumi.StringInput
	// The description of the Api Token Credential.
	Description pulumi.StringPtrInput
	// The name of the Api Token Credential.
	Name pulumi.StringPtrInput
}

func (ApiTokenCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiTokenCredentialArgs)(nil)).Elem()
}

type ApiTokenCredentialInput interface {
	pulumi.Input

	ToApiTokenCredentialOutput() ApiTokenCredentialOutput
	ToApiTokenCredentialOutputWithContext(ctx context.Context) ApiTokenCredentialOutput
}

func (*ApiTokenCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiTokenCredential)(nil)).Elem()
}

func (i *ApiTokenCredential) ToApiTokenCredentialOutput() ApiTokenCredentialOutput {
	return i.ToApiTokenCredentialOutputWithContext(context.Background())
}

func (i *ApiTokenCredential) ToApiTokenCredentialOutputWithContext(ctx context.Context) ApiTokenCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiTokenCredentialOutput)
}

// ApiTokenCredentialArrayInput is an input type that accepts ApiTokenCredentialArray and ApiTokenCredentialArrayOutput values.
// You can construct a concrete instance of `ApiTokenCredentialArrayInput` via:
//
//	ApiTokenCredentialArray{ ApiTokenCredentialArgs{...} }
type ApiTokenCredentialArrayInput interface {
	pulumi.Input

	ToApiTokenCredentialArrayOutput() ApiTokenCredentialArrayOutput
	ToApiTokenCredentialArrayOutputWithContext(context.Context) ApiTokenCredentialArrayOutput
}

type ApiTokenCredentialArray []ApiTokenCredentialInput

func (ApiTokenCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiTokenCredential)(nil)).Elem()
}

func (i ApiTokenCredentialArray) ToApiTokenCredentialArrayOutput() ApiTokenCredentialArrayOutput {
	return i.ToApiTokenCredentialArrayOutputWithContext(context.Background())
}

func (i ApiTokenCredentialArray) ToApiTokenCredentialArrayOutputWithContext(ctx context.Context) ApiTokenCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiTokenCredentialArrayOutput)
}

// ApiTokenCredentialMapInput is an input type that accepts ApiTokenCredentialMap and ApiTokenCredentialMapOutput values.
// You can construct a concrete instance of `ApiTokenCredentialMapInput` via:
//
//	ApiTokenCredentialMap{ "key": ApiTokenCredentialArgs{...} }
type ApiTokenCredentialMapInput interface {
	pulumi.Input

	ToApiTokenCredentialMapOutput() ApiTokenCredentialMapOutput
	ToApiTokenCredentialMapOutputWithContext(context.Context) ApiTokenCredentialMapOutput
}

type ApiTokenCredentialMap map[string]ApiTokenCredentialInput

func (ApiTokenCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiTokenCredential)(nil)).Elem()
}

func (i ApiTokenCredentialMap) ToApiTokenCredentialMapOutput() ApiTokenCredentialMapOutput {
	return i.ToApiTokenCredentialMapOutputWithContext(context.Background())
}

func (i ApiTokenCredentialMap) ToApiTokenCredentialMapOutputWithContext(ctx context.Context) ApiTokenCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiTokenCredentialMapOutput)
}

type ApiTokenCredentialOutput struct{ *pulumi.OutputState }

func (ApiTokenCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiTokenCredential)(nil)).Elem()
}

func (o ApiTokenCredentialOutput) ToApiTokenCredentialOutput() ApiTokenCredentialOutput {
	return o
}

func (o ApiTokenCredentialOutput) ToApiTokenCredentialOutputWithContext(ctx context.Context) ApiTokenCredentialOutput {
	return o
}

// The description of the Api Token Credential.
func (o ApiTokenCredentialOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiTokenCredential) pulumi.StringOutput { return v.ApiToken }).(pulumi.StringOutput)
}

// The description of the Api Token Credential.
func (o ApiTokenCredentialOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiTokenCredential) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Api Token Credential.
func (o ApiTokenCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiTokenCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ApiTokenCredentialArrayOutput struct{ *pulumi.OutputState }

func (ApiTokenCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiTokenCredential)(nil)).Elem()
}

func (o ApiTokenCredentialArrayOutput) ToApiTokenCredentialArrayOutput() ApiTokenCredentialArrayOutput {
	return o
}

func (o ApiTokenCredentialArrayOutput) ToApiTokenCredentialArrayOutputWithContext(ctx context.Context) ApiTokenCredentialArrayOutput {
	return o
}

func (o ApiTokenCredentialArrayOutput) Index(i pulumi.IntInput) ApiTokenCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiTokenCredential {
		return vs[0].([]*ApiTokenCredential)[vs[1].(int)]
	}).(ApiTokenCredentialOutput)
}

type ApiTokenCredentialMapOutput struct{ *pulumi.OutputState }

func (ApiTokenCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiTokenCredential)(nil)).Elem()
}

func (o ApiTokenCredentialMapOutput) ToApiTokenCredentialMapOutput() ApiTokenCredentialMapOutput {
	return o
}

func (o ApiTokenCredentialMapOutput) ToApiTokenCredentialMapOutputWithContext(ctx context.Context) ApiTokenCredentialMapOutput {
	return o
}

func (o ApiTokenCredentialMapOutput) MapIndex(k pulumi.StringInput) ApiTokenCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiTokenCredential {
		return vs[0].(map[string]*ApiTokenCredential)[vs[1].(string)]
	}).(ApiTokenCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiTokenCredentialInput)(nil)).Elem(), &ApiTokenCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiTokenCredentialArrayInput)(nil)).Elem(), ApiTokenCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiTokenCredentialMapInput)(nil)).Elem(), ApiTokenCredentialMap{})
	pulumi.RegisterOutputType(ApiTokenCredentialOutput{})
	pulumi.RegisterOutputType(ApiTokenCredentialArrayOutput{})
	pulumi.RegisterOutputType(ApiTokenCredentialMapOutput{})
}
