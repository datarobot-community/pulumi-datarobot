// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// registered model
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleCustomModel, err := datarobot.NewCustomModel(ctx, "exampleCustomModel", &datarobot.CustomModelArgs{
//				Description:       pulumi.String("Description for the example custom model"),
//				TargetType:        pulumi.String("Binary"),
//				TargetName:        pulumi.String("my_label"),
//				BaseEnvironmentId: pulumi.String("65f9b27eab986d30d4c64268"),
//				Files: pulumi.Any{
//					"example.py",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegisteredModel, err := datarobot.NewRegisteredModel(ctx, "exampleRegisteredModel", &datarobot.RegisteredModelArgs{
//				CustomModelVersionId: exampleCustomModel.VersionId,
//				Description:          pulumi.String("Description for the example registered model"),
//				Tags: datarobot.RegisteredModelTagArray{
//					&datarobot.RegisteredModelTagArgs{
//						Name:  pulumi.String("ab-test"),
//						Value: pulumi.String("a1"),
//					},
//					&datarobot.RegisteredModelTagArgs{
//						Name:  pulumi.String("team"),
//						Value: pulumi.String("marketing"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("datarobotRegisteredModelId", exampleRegisteredModel.ID())
//			ctx.Export("datarobotRegisteredModelVersionId", exampleRegisteredModel.VersionId)
//			return nil
//		})
//	}
//
// ```
type RegisteredModel struct {
	pulumi.CustomResourceState

	// The ID of the custom model version for this Registered Model.
	CustomModelVersionId pulumi.StringOutput `pulumi:"customModelVersionId"`
	// The description of the Registered Model.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Registered Model.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of tags to assign to the Registered Model version.
	Tags RegisteredModelTagArrayOutput `pulumi:"tags"`
	// The list of Use Case IDs to add the Registered Model version to.
	UseCaseIds pulumi.StringArrayOutput `pulumi:"useCaseIds"`
	// The ID of the Registered Model Version.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
	// The name of the Registered Model Version.
	VersionName pulumi.StringOutput `pulumi:"versionName"`
}

// NewRegisteredModel registers a new resource with the given unique name, arguments, and options.
func NewRegisteredModel(ctx *pulumi.Context,
	name string, args *RegisteredModelArgs, opts ...pulumi.ResourceOption) (*RegisteredModel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomModelVersionId == nil {
		return nil, errors.New("invalid value for required argument 'CustomModelVersionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegisteredModel
	err := ctx.RegisterResource("datarobot:index/registeredModel:RegisteredModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegisteredModel gets an existing RegisteredModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegisteredModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegisteredModelState, opts ...pulumi.ResourceOption) (*RegisteredModel, error) {
	var resource RegisteredModel
	err := ctx.ReadResource("datarobot:index/registeredModel:RegisteredModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegisteredModel resources.
type registeredModelState struct {
	// The ID of the custom model version for this Registered Model.
	CustomModelVersionId *string `pulumi:"customModelVersionId"`
	// The description of the Registered Model.
	Description *string `pulumi:"description"`
	// The name of the Registered Model.
	Name *string `pulumi:"name"`
	// The list of tags to assign to the Registered Model version.
	Tags []RegisteredModelTag `pulumi:"tags"`
	// The list of Use Case IDs to add the Registered Model version to.
	UseCaseIds []string `pulumi:"useCaseIds"`
	// The ID of the Registered Model Version.
	VersionId *string `pulumi:"versionId"`
	// The name of the Registered Model Version.
	VersionName *string `pulumi:"versionName"`
}

type RegisteredModelState struct {
	// The ID of the custom model version for this Registered Model.
	CustomModelVersionId pulumi.StringPtrInput
	// The description of the Registered Model.
	Description pulumi.StringPtrInput
	// The name of the Registered Model.
	Name pulumi.StringPtrInput
	// The list of tags to assign to the Registered Model version.
	Tags RegisteredModelTagArrayInput
	// The list of Use Case IDs to add the Registered Model version to.
	UseCaseIds pulumi.StringArrayInput
	// The ID of the Registered Model Version.
	VersionId pulumi.StringPtrInput
	// The name of the Registered Model Version.
	VersionName pulumi.StringPtrInput
}

func (RegisteredModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredModelState)(nil)).Elem()
}

type registeredModelArgs struct {
	// The ID of the custom model version for this Registered Model.
	CustomModelVersionId string `pulumi:"customModelVersionId"`
	// The description of the Registered Model.
	Description *string `pulumi:"description"`
	// The name of the Registered Model.
	Name *string `pulumi:"name"`
	// The list of tags to assign to the Registered Model version.
	Tags []RegisteredModelTag `pulumi:"tags"`
	// The list of Use Case IDs to add the Registered Model version to.
	UseCaseIds []string `pulumi:"useCaseIds"`
	// The name of the Registered Model Version.
	VersionName *string `pulumi:"versionName"`
}

// The set of arguments for constructing a RegisteredModel resource.
type RegisteredModelArgs struct {
	// The ID of the custom model version for this Registered Model.
	CustomModelVersionId pulumi.StringInput
	// The description of the Registered Model.
	Description pulumi.StringPtrInput
	// The name of the Registered Model.
	Name pulumi.StringPtrInput
	// The list of tags to assign to the Registered Model version.
	Tags RegisteredModelTagArrayInput
	// The list of Use Case IDs to add the Registered Model version to.
	UseCaseIds pulumi.StringArrayInput
	// The name of the Registered Model Version.
	VersionName pulumi.StringPtrInput
}

func (RegisteredModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredModelArgs)(nil)).Elem()
}

type RegisteredModelInput interface {
	pulumi.Input

	ToRegisteredModelOutput() RegisteredModelOutput
	ToRegisteredModelOutputWithContext(ctx context.Context) RegisteredModelOutput
}

func (*RegisteredModel) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredModel)(nil)).Elem()
}

func (i *RegisteredModel) ToRegisteredModelOutput() RegisteredModelOutput {
	return i.ToRegisteredModelOutputWithContext(context.Background())
}

func (i *RegisteredModel) ToRegisteredModelOutputWithContext(ctx context.Context) RegisteredModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredModelOutput)
}

// RegisteredModelArrayInput is an input type that accepts RegisteredModelArray and RegisteredModelArrayOutput values.
// You can construct a concrete instance of `RegisteredModelArrayInput` via:
//
//	RegisteredModelArray{ RegisteredModelArgs{...} }
type RegisteredModelArrayInput interface {
	pulumi.Input

	ToRegisteredModelArrayOutput() RegisteredModelArrayOutput
	ToRegisteredModelArrayOutputWithContext(context.Context) RegisteredModelArrayOutput
}

type RegisteredModelArray []RegisteredModelInput

func (RegisteredModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredModel)(nil)).Elem()
}

func (i RegisteredModelArray) ToRegisteredModelArrayOutput() RegisteredModelArrayOutput {
	return i.ToRegisteredModelArrayOutputWithContext(context.Background())
}

func (i RegisteredModelArray) ToRegisteredModelArrayOutputWithContext(ctx context.Context) RegisteredModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredModelArrayOutput)
}

// RegisteredModelMapInput is an input type that accepts RegisteredModelMap and RegisteredModelMapOutput values.
// You can construct a concrete instance of `RegisteredModelMapInput` via:
//
//	RegisteredModelMap{ "key": RegisteredModelArgs{...} }
type RegisteredModelMapInput interface {
	pulumi.Input

	ToRegisteredModelMapOutput() RegisteredModelMapOutput
	ToRegisteredModelMapOutputWithContext(context.Context) RegisteredModelMapOutput
}

type RegisteredModelMap map[string]RegisteredModelInput

func (RegisteredModelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredModel)(nil)).Elem()
}

func (i RegisteredModelMap) ToRegisteredModelMapOutput() RegisteredModelMapOutput {
	return i.ToRegisteredModelMapOutputWithContext(context.Background())
}

func (i RegisteredModelMap) ToRegisteredModelMapOutputWithContext(ctx context.Context) RegisteredModelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredModelMapOutput)
}

type RegisteredModelOutput struct{ *pulumi.OutputState }

func (RegisteredModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredModel)(nil)).Elem()
}

func (o RegisteredModelOutput) ToRegisteredModelOutput() RegisteredModelOutput {
	return o
}

func (o RegisteredModelOutput) ToRegisteredModelOutputWithContext(ctx context.Context) RegisteredModelOutput {
	return o
}

// The ID of the custom model version for this Registered Model.
func (o RegisteredModelOutput) CustomModelVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringOutput { return v.CustomModelVersionId }).(pulumi.StringOutput)
}

// The description of the Registered Model.
func (o RegisteredModelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Registered Model.
func (o RegisteredModelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of tags to assign to the Registered Model version.
func (o RegisteredModelOutput) Tags() RegisteredModelTagArrayOutput {
	return o.ApplyT(func(v *RegisteredModel) RegisteredModelTagArrayOutput { return v.Tags }).(RegisteredModelTagArrayOutput)
}

// The list of Use Case IDs to add the Registered Model version to.
func (o RegisteredModelOutput) UseCaseIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringArrayOutput { return v.UseCaseIds }).(pulumi.StringArrayOutput)
}

// The ID of the Registered Model Version.
func (o RegisteredModelOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

// The name of the Registered Model Version.
func (o RegisteredModelOutput) VersionName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringOutput { return v.VersionName }).(pulumi.StringOutput)
}

type RegisteredModelArrayOutput struct{ *pulumi.OutputState }

func (RegisteredModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredModel)(nil)).Elem()
}

func (o RegisteredModelArrayOutput) ToRegisteredModelArrayOutput() RegisteredModelArrayOutput {
	return o
}

func (o RegisteredModelArrayOutput) ToRegisteredModelArrayOutputWithContext(ctx context.Context) RegisteredModelArrayOutput {
	return o
}

func (o RegisteredModelArrayOutput) Index(i pulumi.IntInput) RegisteredModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegisteredModel {
		return vs[0].([]*RegisteredModel)[vs[1].(int)]
	}).(RegisteredModelOutput)
}

type RegisteredModelMapOutput struct{ *pulumi.OutputState }

func (RegisteredModelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredModel)(nil)).Elem()
}

func (o RegisteredModelMapOutput) ToRegisteredModelMapOutput() RegisteredModelMapOutput {
	return o
}

func (o RegisteredModelMapOutput) ToRegisteredModelMapOutputWithContext(ctx context.Context) RegisteredModelMapOutput {
	return o
}

func (o RegisteredModelMapOutput) MapIndex(k pulumi.StringInput) RegisteredModelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegisteredModel {
		return vs[0].(map[string]*RegisteredModel)[vs[1].(string)]
	}).(RegisteredModelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredModelInput)(nil)).Elem(), &RegisteredModel{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredModelArrayInput)(nil)).Elem(), RegisteredModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredModelMapInput)(nil)).Elem(), RegisteredModelMap{})
	pulumi.RegisterOutputType(RegisteredModelOutput{})
	pulumi.RegisterOutputType(RegisteredModelArrayOutput{})
	pulumi.RegisterOutputType(RegisteredModelMapOutput{})
}
