// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CustomModelRuntimeParameter struct {
	// The name of the runtime parameter.
	Key string `pulumi:"key"`
	// The type of the runtime parameter.
	Type string `pulumi:"type"`
	// The value of the runtime parameter.
	Value string `pulumi:"value"`
}

// CustomModelRuntimeParameterInput is an input type that accepts CustomModelRuntimeParameterArgs and CustomModelRuntimeParameterOutput values.
// You can construct a concrete instance of `CustomModelRuntimeParameterInput` via:
//
//	CustomModelRuntimeParameterArgs{...}
type CustomModelRuntimeParameterInput interface {
	pulumi.Input

	ToCustomModelRuntimeParameterOutput() CustomModelRuntimeParameterOutput
	ToCustomModelRuntimeParameterOutputWithContext(context.Context) CustomModelRuntimeParameterOutput
}

type CustomModelRuntimeParameterArgs struct {
	// The name of the runtime parameter.
	Key pulumi.StringInput `pulumi:"key"`
	// The type of the runtime parameter.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the runtime parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CustomModelRuntimeParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelRuntimeParameter)(nil)).Elem()
}

func (i CustomModelRuntimeParameterArgs) ToCustomModelRuntimeParameterOutput() CustomModelRuntimeParameterOutput {
	return i.ToCustomModelRuntimeParameterOutputWithContext(context.Background())
}

func (i CustomModelRuntimeParameterArgs) ToCustomModelRuntimeParameterOutputWithContext(ctx context.Context) CustomModelRuntimeParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelRuntimeParameterOutput)
}

// CustomModelRuntimeParameterArrayInput is an input type that accepts CustomModelRuntimeParameterArray and CustomModelRuntimeParameterArrayOutput values.
// You can construct a concrete instance of `CustomModelRuntimeParameterArrayInput` via:
//
//	CustomModelRuntimeParameterArray{ CustomModelRuntimeParameterArgs{...} }
type CustomModelRuntimeParameterArrayInput interface {
	pulumi.Input

	ToCustomModelRuntimeParameterArrayOutput() CustomModelRuntimeParameterArrayOutput
	ToCustomModelRuntimeParameterArrayOutputWithContext(context.Context) CustomModelRuntimeParameterArrayOutput
}

type CustomModelRuntimeParameterArray []CustomModelRuntimeParameterInput

func (CustomModelRuntimeParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomModelRuntimeParameter)(nil)).Elem()
}

func (i CustomModelRuntimeParameterArray) ToCustomModelRuntimeParameterArrayOutput() CustomModelRuntimeParameterArrayOutput {
	return i.ToCustomModelRuntimeParameterArrayOutputWithContext(context.Background())
}

func (i CustomModelRuntimeParameterArray) ToCustomModelRuntimeParameterArrayOutputWithContext(ctx context.Context) CustomModelRuntimeParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelRuntimeParameterArrayOutput)
}

type CustomModelRuntimeParameterOutput struct{ *pulumi.OutputState }

func (CustomModelRuntimeParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelRuntimeParameter)(nil)).Elem()
}

func (o CustomModelRuntimeParameterOutput) ToCustomModelRuntimeParameterOutput() CustomModelRuntimeParameterOutput {
	return o
}

func (o CustomModelRuntimeParameterOutput) ToCustomModelRuntimeParameterOutputWithContext(ctx context.Context) CustomModelRuntimeParameterOutput {
	return o
}

// The name of the runtime parameter.
func (o CustomModelRuntimeParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelRuntimeParameter) string { return v.Key }).(pulumi.StringOutput)
}

// The type of the runtime parameter.
func (o CustomModelRuntimeParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelRuntimeParameter) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the runtime parameter.
func (o CustomModelRuntimeParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelRuntimeParameter) string { return v.Value }).(pulumi.StringOutput)
}

type CustomModelRuntimeParameterArrayOutput struct{ *pulumi.OutputState }

func (CustomModelRuntimeParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomModelRuntimeParameter)(nil)).Elem()
}

func (o CustomModelRuntimeParameterArrayOutput) ToCustomModelRuntimeParameterArrayOutput() CustomModelRuntimeParameterArrayOutput {
	return o
}

func (o CustomModelRuntimeParameterArrayOutput) ToCustomModelRuntimeParameterArrayOutputWithContext(ctx context.Context) CustomModelRuntimeParameterArrayOutput {
	return o
}

func (o CustomModelRuntimeParameterArrayOutput) Index(i pulumi.IntInput) CustomModelRuntimeParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomModelRuntimeParameter {
		return vs[0].([]CustomModelRuntimeParameter)[vs[1].(int)]
	}).(CustomModelRuntimeParameterOutput)
}

type VectorDatabaseChunkingParameters struct {
	// The percentage of overlap between chunks.
	ChunkOverlapPercentage *float64 `pulumi:"chunkOverlapPercentage"`
	// The size of the chunks.
	ChunkSize *float64 `pulumi:"chunkSize"`
	// The method used to chunk the data.
	ChunkingMethod *string `pulumi:"chunkingMethod"`
	// The id of the Embedding Model.
	EmbeddingModel *string `pulumi:"embeddingModel"`
	// Whether the separator is a regex.
	IsSeparatorRegex *bool `pulumi:"isSeparatorRegex"`
	// The separators used to split the data.
	Separators []string `pulumi:"separators"`
}

// VectorDatabaseChunkingParametersInput is an input type that accepts VectorDatabaseChunkingParametersArgs and VectorDatabaseChunkingParametersOutput values.
// You can construct a concrete instance of `VectorDatabaseChunkingParametersInput` via:
//
//	VectorDatabaseChunkingParametersArgs{...}
type VectorDatabaseChunkingParametersInput interface {
	pulumi.Input

	ToVectorDatabaseChunkingParametersOutput() VectorDatabaseChunkingParametersOutput
	ToVectorDatabaseChunkingParametersOutputWithContext(context.Context) VectorDatabaseChunkingParametersOutput
}

type VectorDatabaseChunkingParametersArgs struct {
	// The percentage of overlap between chunks.
	ChunkOverlapPercentage pulumi.Float64PtrInput `pulumi:"chunkOverlapPercentage"`
	// The size of the chunks.
	ChunkSize pulumi.Float64PtrInput `pulumi:"chunkSize"`
	// The method used to chunk the data.
	ChunkingMethod pulumi.StringPtrInput `pulumi:"chunkingMethod"`
	// The id of the Embedding Model.
	EmbeddingModel pulumi.StringPtrInput `pulumi:"embeddingModel"`
	// Whether the separator is a regex.
	IsSeparatorRegex pulumi.BoolPtrInput `pulumi:"isSeparatorRegex"`
	// The separators used to split the data.
	Separators pulumi.StringArrayInput `pulumi:"separators"`
}

func (VectorDatabaseChunkingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VectorDatabaseChunkingParameters)(nil)).Elem()
}

func (i VectorDatabaseChunkingParametersArgs) ToVectorDatabaseChunkingParametersOutput() VectorDatabaseChunkingParametersOutput {
	return i.ToVectorDatabaseChunkingParametersOutputWithContext(context.Background())
}

func (i VectorDatabaseChunkingParametersArgs) ToVectorDatabaseChunkingParametersOutputWithContext(ctx context.Context) VectorDatabaseChunkingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorDatabaseChunkingParametersOutput)
}

func (i VectorDatabaseChunkingParametersArgs) ToVectorDatabaseChunkingParametersPtrOutput() VectorDatabaseChunkingParametersPtrOutput {
	return i.ToVectorDatabaseChunkingParametersPtrOutputWithContext(context.Background())
}

func (i VectorDatabaseChunkingParametersArgs) ToVectorDatabaseChunkingParametersPtrOutputWithContext(ctx context.Context) VectorDatabaseChunkingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorDatabaseChunkingParametersOutput).ToVectorDatabaseChunkingParametersPtrOutputWithContext(ctx)
}

// VectorDatabaseChunkingParametersPtrInput is an input type that accepts VectorDatabaseChunkingParametersArgs, VectorDatabaseChunkingParametersPtr and VectorDatabaseChunkingParametersPtrOutput values.
// You can construct a concrete instance of `VectorDatabaseChunkingParametersPtrInput` via:
//
//	        VectorDatabaseChunkingParametersArgs{...}
//
//	or:
//
//	        nil
type VectorDatabaseChunkingParametersPtrInput interface {
	pulumi.Input

	ToVectorDatabaseChunkingParametersPtrOutput() VectorDatabaseChunkingParametersPtrOutput
	ToVectorDatabaseChunkingParametersPtrOutputWithContext(context.Context) VectorDatabaseChunkingParametersPtrOutput
}

type vectorDatabaseChunkingParametersPtrType VectorDatabaseChunkingParametersArgs

func VectorDatabaseChunkingParametersPtr(v *VectorDatabaseChunkingParametersArgs) VectorDatabaseChunkingParametersPtrInput {
	return (*vectorDatabaseChunkingParametersPtrType)(v)
}

func (*vectorDatabaseChunkingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorDatabaseChunkingParameters)(nil)).Elem()
}

func (i *vectorDatabaseChunkingParametersPtrType) ToVectorDatabaseChunkingParametersPtrOutput() VectorDatabaseChunkingParametersPtrOutput {
	return i.ToVectorDatabaseChunkingParametersPtrOutputWithContext(context.Background())
}

func (i *vectorDatabaseChunkingParametersPtrType) ToVectorDatabaseChunkingParametersPtrOutputWithContext(ctx context.Context) VectorDatabaseChunkingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorDatabaseChunkingParametersPtrOutput)
}

type VectorDatabaseChunkingParametersOutput struct{ *pulumi.OutputState }

func (VectorDatabaseChunkingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VectorDatabaseChunkingParameters)(nil)).Elem()
}

func (o VectorDatabaseChunkingParametersOutput) ToVectorDatabaseChunkingParametersOutput() VectorDatabaseChunkingParametersOutput {
	return o
}

func (o VectorDatabaseChunkingParametersOutput) ToVectorDatabaseChunkingParametersOutputWithContext(ctx context.Context) VectorDatabaseChunkingParametersOutput {
	return o
}

func (o VectorDatabaseChunkingParametersOutput) ToVectorDatabaseChunkingParametersPtrOutput() VectorDatabaseChunkingParametersPtrOutput {
	return o.ToVectorDatabaseChunkingParametersPtrOutputWithContext(context.Background())
}

func (o VectorDatabaseChunkingParametersOutput) ToVectorDatabaseChunkingParametersPtrOutputWithContext(ctx context.Context) VectorDatabaseChunkingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VectorDatabaseChunkingParameters) *VectorDatabaseChunkingParameters {
		return &v
	}).(VectorDatabaseChunkingParametersPtrOutput)
}

// The percentage of overlap between chunks.
func (o VectorDatabaseChunkingParametersOutput) ChunkOverlapPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VectorDatabaseChunkingParameters) *float64 { return v.ChunkOverlapPercentage }).(pulumi.Float64PtrOutput)
}

// The size of the chunks.
func (o VectorDatabaseChunkingParametersOutput) ChunkSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VectorDatabaseChunkingParameters) *float64 { return v.ChunkSize }).(pulumi.Float64PtrOutput)
}

// The method used to chunk the data.
func (o VectorDatabaseChunkingParametersOutput) ChunkingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VectorDatabaseChunkingParameters) *string { return v.ChunkingMethod }).(pulumi.StringPtrOutput)
}

// The id of the Embedding Model.
func (o VectorDatabaseChunkingParametersOutput) EmbeddingModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VectorDatabaseChunkingParameters) *string { return v.EmbeddingModel }).(pulumi.StringPtrOutput)
}

// Whether the separator is a regex.
func (o VectorDatabaseChunkingParametersOutput) IsSeparatorRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VectorDatabaseChunkingParameters) *bool { return v.IsSeparatorRegex }).(pulumi.BoolPtrOutput)
}

// The separators used to split the data.
func (o VectorDatabaseChunkingParametersOutput) Separators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VectorDatabaseChunkingParameters) []string { return v.Separators }).(pulumi.StringArrayOutput)
}

type VectorDatabaseChunkingParametersPtrOutput struct{ *pulumi.OutputState }

func (VectorDatabaseChunkingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorDatabaseChunkingParameters)(nil)).Elem()
}

func (o VectorDatabaseChunkingParametersPtrOutput) ToVectorDatabaseChunkingParametersPtrOutput() VectorDatabaseChunkingParametersPtrOutput {
	return o
}

func (o VectorDatabaseChunkingParametersPtrOutput) ToVectorDatabaseChunkingParametersPtrOutputWithContext(ctx context.Context) VectorDatabaseChunkingParametersPtrOutput {
	return o
}

func (o VectorDatabaseChunkingParametersPtrOutput) Elem() VectorDatabaseChunkingParametersOutput {
	return o.ApplyT(func(v *VectorDatabaseChunkingParameters) VectorDatabaseChunkingParameters {
		if v != nil {
			return *v
		}
		var ret VectorDatabaseChunkingParameters
		return ret
	}).(VectorDatabaseChunkingParametersOutput)
}

// The percentage of overlap between chunks.
func (o VectorDatabaseChunkingParametersPtrOutput) ChunkOverlapPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VectorDatabaseChunkingParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.ChunkOverlapPercentage
	}).(pulumi.Float64PtrOutput)
}

// The size of the chunks.
func (o VectorDatabaseChunkingParametersPtrOutput) ChunkSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VectorDatabaseChunkingParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.ChunkSize
	}).(pulumi.Float64PtrOutput)
}

// The method used to chunk the data.
func (o VectorDatabaseChunkingParametersPtrOutput) ChunkingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VectorDatabaseChunkingParameters) *string {
		if v == nil {
			return nil
		}
		return v.ChunkingMethod
	}).(pulumi.StringPtrOutput)
}

// The id of the Embedding Model.
func (o VectorDatabaseChunkingParametersPtrOutput) EmbeddingModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VectorDatabaseChunkingParameters) *string {
		if v == nil {
			return nil
		}
		return v.EmbeddingModel
	}).(pulumi.StringPtrOutput)
}

// Whether the separator is a regex.
func (o VectorDatabaseChunkingParametersPtrOutput) IsSeparatorRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VectorDatabaseChunkingParameters) *bool {
		if v == nil {
			return nil
		}
		return v.IsSeparatorRegex
	}).(pulumi.BoolPtrOutput)
}

// The separators used to split the data.
func (o VectorDatabaseChunkingParametersPtrOutput) Separators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VectorDatabaseChunkingParameters) []string {
		if v == nil {
			return nil
		}
		return v.Separators
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomModelRuntimeParameterInput)(nil)).Elem(), CustomModelRuntimeParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomModelRuntimeParameterArrayInput)(nil)).Elem(), CustomModelRuntimeParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorDatabaseChunkingParametersInput)(nil)).Elem(), VectorDatabaseChunkingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorDatabaseChunkingParametersPtrInput)(nil)).Elem(), VectorDatabaseChunkingParametersArgs{})
	pulumi.RegisterOutputType(CustomModelRuntimeParameterOutput{})
	pulumi.RegisterOutputType(CustomModelRuntimeParameterArrayOutput{})
	pulumi.RegisterOutputType(VectorDatabaseChunkingParametersOutput{})
	pulumi.RegisterOutputType(VectorDatabaseChunkingParametersPtrOutput{})
}
