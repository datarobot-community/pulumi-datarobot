// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Notification Channel
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datarobot.NewNotificationChannel(ctx, "example", &datarobot.NotificationChannelArgs{
//				ChannelType:       pulumi.String("DataRobotUser"),
//				RelatedEntityId:   pulumi.Any(datarobot_deployment.Example.Id),
//				RelatedEntityType: pulumi.String("deployment"),
//				ContentType:       pulumi.String("application/json"),
//				CustomHeaders: datarobot.NotificationChannelCustomHeaderArray{
//					&datarobot.NotificationChannelCustomHeaderArgs{
//						Name:  pulumi.String("header1"),
//						Value: pulumi.String("value1"),
//					},
//				},
//				DrEntities: datarobot.NotificationChannelDrEntityArray{
//					&datarobot.NotificationChannelDrEntityArgs{
//						Id:   pulumi.String("11111111111111"),
//						Name: pulumi.String("example user"),
//					},
//				},
//				LanguageCode:     pulumi.String("en"),
//				EmailAddress:     pulumi.String("example@datarobot.com"),
//				PayloadUrl:       pulumi.String("https://example.com"),
//				SecretToken:      pulumi.String("example_secret_token"),
//				ValidateSsl:      pulumi.Bool(true),
//				VerificationCode: pulumi.String("11111"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("datarobotNotificationPolicyId", datarobot_notification_policy.Example.Id)
//			return nil
//		})
//	}
//
// ```
type NotificationChannel struct {
	pulumi.CustomResourceState

	// The Type of Notification Channel.
	ChannelType pulumi.StringOutput `pulumi:"channelType"`
	// The content type of the messages of the Notification Channel.
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	// Custom headers and their values to be sent in the Notification Channel.
	CustomHeaders NotificationChannelCustomHeaderArrayOutput `pulumi:"customHeaders"`
	// The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.
	DrEntities NotificationChannelDrEntityArrayOutput `pulumi:"drEntities"`
	// The email address to be used in the Notification Channel.
	EmailAddress pulumi.StringPtrOutput `pulumi:"emailAddress"`
	// The preferred language code.
	LanguageCode pulumi.StringOutput `pulumi:"languageCode"`
	// The name of the Notification Channel.
	Name pulumi.StringOutput `pulumi:"name"`
	// The payload URL of the Notification Channel.
	PayloadUrl pulumi.StringPtrOutput `pulumi:"payloadUrl"`
	// The ID of related entity.
	RelatedEntityId pulumi.StringOutput `pulumi:"relatedEntityId"`
	// The type of related entity.
	RelatedEntityType pulumi.StringOutput `pulumi:"relatedEntityType"`
	// The secret token to be used for the Notification Channel.
	SecretToken pulumi.StringPtrOutput `pulumi:"secretToken"`
	// Defines if validate ssl or not in the Notification Channel.
	ValidateSsl pulumi.BoolPtrOutput `pulumi:"validateSsl"`
	// Required if the channel type is email.
	VerificationCode pulumi.StringPtrOutput `pulumi:"verificationCode"`
}

// NewNotificationChannel registers a new resource with the given unique name, arguments, and options.
func NewNotificationChannel(ctx *pulumi.Context,
	name string, args *NotificationChannelArgs, opts ...pulumi.ResourceOption) (*NotificationChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChannelType == nil {
		return nil, errors.New("invalid value for required argument 'ChannelType'")
	}
	if args.RelatedEntityId == nil {
		return nil, errors.New("invalid value for required argument 'RelatedEntityId'")
	}
	if args.RelatedEntityType == nil {
		return nil, errors.New("invalid value for required argument 'RelatedEntityType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationChannel
	err := ctx.RegisterResource("datarobot:index/notificationChannel:NotificationChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationChannel gets an existing NotificationChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationChannelState, opts ...pulumi.ResourceOption) (*NotificationChannel, error) {
	var resource NotificationChannel
	err := ctx.ReadResource("datarobot:index/notificationChannel:NotificationChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationChannel resources.
type notificationChannelState struct {
	// The Type of Notification Channel.
	ChannelType *string `pulumi:"channelType"`
	// The content type of the messages of the Notification Channel.
	ContentType *string `pulumi:"contentType"`
	// Custom headers and their values to be sent in the Notification Channel.
	CustomHeaders []NotificationChannelCustomHeader `pulumi:"customHeaders"`
	// The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.
	DrEntities []NotificationChannelDrEntity `pulumi:"drEntities"`
	// The email address to be used in the Notification Channel.
	EmailAddress *string `pulumi:"emailAddress"`
	// The preferred language code.
	LanguageCode *string `pulumi:"languageCode"`
	// The name of the Notification Channel.
	Name *string `pulumi:"name"`
	// The payload URL of the Notification Channel.
	PayloadUrl *string `pulumi:"payloadUrl"`
	// The ID of related entity.
	RelatedEntityId *string `pulumi:"relatedEntityId"`
	// The type of related entity.
	RelatedEntityType *string `pulumi:"relatedEntityType"`
	// The secret token to be used for the Notification Channel.
	SecretToken *string `pulumi:"secretToken"`
	// Defines if validate ssl or not in the Notification Channel.
	ValidateSsl *bool `pulumi:"validateSsl"`
	// Required if the channel type is email.
	VerificationCode *string `pulumi:"verificationCode"`
}

type NotificationChannelState struct {
	// The Type of Notification Channel.
	ChannelType pulumi.StringPtrInput
	// The content type of the messages of the Notification Channel.
	ContentType pulumi.StringPtrInput
	// Custom headers and their values to be sent in the Notification Channel.
	CustomHeaders NotificationChannelCustomHeaderArrayInput
	// The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.
	DrEntities NotificationChannelDrEntityArrayInput
	// The email address to be used in the Notification Channel.
	EmailAddress pulumi.StringPtrInput
	// The preferred language code.
	LanguageCode pulumi.StringPtrInput
	// The name of the Notification Channel.
	Name pulumi.StringPtrInput
	// The payload URL of the Notification Channel.
	PayloadUrl pulumi.StringPtrInput
	// The ID of related entity.
	RelatedEntityId pulumi.StringPtrInput
	// The type of related entity.
	RelatedEntityType pulumi.StringPtrInput
	// The secret token to be used for the Notification Channel.
	SecretToken pulumi.StringPtrInput
	// Defines if validate ssl or not in the Notification Channel.
	ValidateSsl pulumi.BoolPtrInput
	// Required if the channel type is email.
	VerificationCode pulumi.StringPtrInput
}

func (NotificationChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelState)(nil)).Elem()
}

type notificationChannelArgs struct {
	// The Type of Notification Channel.
	ChannelType string `pulumi:"channelType"`
	// The content type of the messages of the Notification Channel.
	ContentType *string `pulumi:"contentType"`
	// Custom headers and their values to be sent in the Notification Channel.
	CustomHeaders []NotificationChannelCustomHeader `pulumi:"customHeaders"`
	// The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.
	DrEntities []NotificationChannelDrEntity `pulumi:"drEntities"`
	// The email address to be used in the Notification Channel.
	EmailAddress *string `pulumi:"emailAddress"`
	// The preferred language code.
	LanguageCode *string `pulumi:"languageCode"`
	// The name of the Notification Channel.
	Name *string `pulumi:"name"`
	// The payload URL of the Notification Channel.
	PayloadUrl *string `pulumi:"payloadUrl"`
	// The ID of related entity.
	RelatedEntityId string `pulumi:"relatedEntityId"`
	// The type of related entity.
	RelatedEntityType string `pulumi:"relatedEntityType"`
	// The secret token to be used for the Notification Channel.
	SecretToken *string `pulumi:"secretToken"`
	// Defines if validate ssl or not in the Notification Channel.
	ValidateSsl *bool `pulumi:"validateSsl"`
	// Required if the channel type is email.
	VerificationCode *string `pulumi:"verificationCode"`
}

// The set of arguments for constructing a NotificationChannel resource.
type NotificationChannelArgs struct {
	// The Type of Notification Channel.
	ChannelType pulumi.StringInput
	// The content type of the messages of the Notification Channel.
	ContentType pulumi.StringPtrInput
	// Custom headers and their values to be sent in the Notification Channel.
	CustomHeaders NotificationChannelCustomHeaderArrayInput
	// The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.
	DrEntities NotificationChannelDrEntityArrayInput
	// The email address to be used in the Notification Channel.
	EmailAddress pulumi.StringPtrInput
	// The preferred language code.
	LanguageCode pulumi.StringPtrInput
	// The name of the Notification Channel.
	Name pulumi.StringPtrInput
	// The payload URL of the Notification Channel.
	PayloadUrl pulumi.StringPtrInput
	// The ID of related entity.
	RelatedEntityId pulumi.StringInput
	// The type of related entity.
	RelatedEntityType pulumi.StringInput
	// The secret token to be used for the Notification Channel.
	SecretToken pulumi.StringPtrInput
	// Defines if validate ssl or not in the Notification Channel.
	ValidateSsl pulumi.BoolPtrInput
	// Required if the channel type is email.
	VerificationCode pulumi.StringPtrInput
}

func (NotificationChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelArgs)(nil)).Elem()
}

type NotificationChannelInput interface {
	pulumi.Input

	ToNotificationChannelOutput() NotificationChannelOutput
	ToNotificationChannelOutputWithContext(ctx context.Context) NotificationChannelOutput
}

func (*NotificationChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationChannel)(nil)).Elem()
}

func (i *NotificationChannel) ToNotificationChannelOutput() NotificationChannelOutput {
	return i.ToNotificationChannelOutputWithContext(context.Background())
}

func (i *NotificationChannel) ToNotificationChannelOutputWithContext(ctx context.Context) NotificationChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelOutput)
}

// NotificationChannelArrayInput is an input type that accepts NotificationChannelArray and NotificationChannelArrayOutput values.
// You can construct a concrete instance of `NotificationChannelArrayInput` via:
//
//	NotificationChannelArray{ NotificationChannelArgs{...} }
type NotificationChannelArrayInput interface {
	pulumi.Input

	ToNotificationChannelArrayOutput() NotificationChannelArrayOutput
	ToNotificationChannelArrayOutputWithContext(context.Context) NotificationChannelArrayOutput
}

type NotificationChannelArray []NotificationChannelInput

func (NotificationChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationChannel)(nil)).Elem()
}

func (i NotificationChannelArray) ToNotificationChannelArrayOutput() NotificationChannelArrayOutput {
	return i.ToNotificationChannelArrayOutputWithContext(context.Background())
}

func (i NotificationChannelArray) ToNotificationChannelArrayOutputWithContext(ctx context.Context) NotificationChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelArrayOutput)
}

// NotificationChannelMapInput is an input type that accepts NotificationChannelMap and NotificationChannelMapOutput values.
// You can construct a concrete instance of `NotificationChannelMapInput` via:
//
//	NotificationChannelMap{ "key": NotificationChannelArgs{...} }
type NotificationChannelMapInput interface {
	pulumi.Input

	ToNotificationChannelMapOutput() NotificationChannelMapOutput
	ToNotificationChannelMapOutputWithContext(context.Context) NotificationChannelMapOutput
}

type NotificationChannelMap map[string]NotificationChannelInput

func (NotificationChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationChannel)(nil)).Elem()
}

func (i NotificationChannelMap) ToNotificationChannelMapOutput() NotificationChannelMapOutput {
	return i.ToNotificationChannelMapOutputWithContext(context.Background())
}

func (i NotificationChannelMap) ToNotificationChannelMapOutputWithContext(ctx context.Context) NotificationChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelMapOutput)
}

type NotificationChannelOutput struct{ *pulumi.OutputState }

func (NotificationChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationChannel)(nil)).Elem()
}

func (o NotificationChannelOutput) ToNotificationChannelOutput() NotificationChannelOutput {
	return o
}

func (o NotificationChannelOutput) ToNotificationChannelOutputWithContext(ctx context.Context) NotificationChannelOutput {
	return o
}

// The Type of Notification Channel.
func (o NotificationChannelOutput) ChannelType() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringOutput { return v.ChannelType }).(pulumi.StringOutput)
}

// The content type of the messages of the Notification Channel.
func (o NotificationChannelOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Custom headers and their values to be sent in the Notification Channel.
func (o NotificationChannelOutput) CustomHeaders() NotificationChannelCustomHeaderArrayOutput {
	return o.ApplyT(func(v *NotificationChannel) NotificationChannelCustomHeaderArrayOutput { return v.CustomHeaders }).(NotificationChannelCustomHeaderArrayOutput)
}

// The IDs of the DataRobot Users, Group or Custom Job associated with the DataRobotUser, DataRobotGroup or DataRobotCustomJob channel types.
func (o NotificationChannelOutput) DrEntities() NotificationChannelDrEntityArrayOutput {
	return o.ApplyT(func(v *NotificationChannel) NotificationChannelDrEntityArrayOutput { return v.DrEntities }).(NotificationChannelDrEntityArrayOutput)
}

// The email address to be used in the Notification Channel.
func (o NotificationChannelOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringPtrOutput { return v.EmailAddress }).(pulumi.StringPtrOutput)
}

// The preferred language code.
func (o NotificationChannelOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

// The name of the Notification Channel.
func (o NotificationChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The payload URL of the Notification Channel.
func (o NotificationChannelOutput) PayloadUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringPtrOutput { return v.PayloadUrl }).(pulumi.StringPtrOutput)
}

// The ID of related entity.
func (o NotificationChannelOutput) RelatedEntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringOutput { return v.RelatedEntityId }).(pulumi.StringOutput)
}

// The type of related entity.
func (o NotificationChannelOutput) RelatedEntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringOutput { return v.RelatedEntityType }).(pulumi.StringOutput)
}

// The secret token to be used for the Notification Channel.
func (o NotificationChannelOutput) SecretToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringPtrOutput { return v.SecretToken }).(pulumi.StringPtrOutput)
}

// Defines if validate ssl or not in the Notification Channel.
func (o NotificationChannelOutput) ValidateSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.BoolPtrOutput { return v.ValidateSsl }).(pulumi.BoolPtrOutput)
}

// Required if the channel type is email.
func (o NotificationChannelOutput) VerificationCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringPtrOutput { return v.VerificationCode }).(pulumi.StringPtrOutput)
}

type NotificationChannelArrayOutput struct{ *pulumi.OutputState }

func (NotificationChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationChannel)(nil)).Elem()
}

func (o NotificationChannelArrayOutput) ToNotificationChannelArrayOutput() NotificationChannelArrayOutput {
	return o
}

func (o NotificationChannelArrayOutput) ToNotificationChannelArrayOutputWithContext(ctx context.Context) NotificationChannelArrayOutput {
	return o
}

func (o NotificationChannelArrayOutput) Index(i pulumi.IntInput) NotificationChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationChannel {
		return vs[0].([]*NotificationChannel)[vs[1].(int)]
	}).(NotificationChannelOutput)
}

type NotificationChannelMapOutput struct{ *pulumi.OutputState }

func (NotificationChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationChannel)(nil)).Elem()
}

func (o NotificationChannelMapOutput) ToNotificationChannelMapOutput() NotificationChannelMapOutput {
	return o
}

func (o NotificationChannelMapOutput) ToNotificationChannelMapOutputWithContext(ctx context.Context) NotificationChannelMapOutput {
	return o
}

func (o NotificationChannelMapOutput) MapIndex(k pulumi.StringInput) NotificationChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationChannel {
		return vs[0].(map[string]*NotificationChannel)[vs[1].(string)]
	}).(NotificationChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationChannelInput)(nil)).Elem(), &NotificationChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationChannelArrayInput)(nil)).Elem(), NotificationChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationChannelMapInput)(nil)).Elem(), NotificationChannelMap{})
	pulumi.RegisterOutputType(NotificationChannelOutput{})
	pulumi.RegisterOutputType(NotificationChannelArrayOutput{})
	pulumi.RegisterOutputType(NotificationChannelMapOutput{})
}
