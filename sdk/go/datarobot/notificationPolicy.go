// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Notification Policy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := datarobot.NewNotificationPolicy(ctx, "example", &datarobot.NotificationPolicyArgs{
//				ChannelId:         pulumi.String("11111111111111"),
//				ChannelScope:      pulumi.String("template"),
//				EventGroup:        pulumi.String("model_deployments.all"),
//				RelatedEntityId:   pulumi.Any(datarobot_deployment.Example.Id),
//				RelatedEntityType: pulumi.String("deployment"),
//				EventType:         pulumi.String("model_deployments.accuracy_green"),
//				MaximalFrequency:  pulumi.String("PT1H"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("datarobotNotificationPolicyId", example.ID())
//			return nil
//		})
//	}
//
// ```
type NotificationPolicy struct {
	pulumi.CustomResourceState

	// Whether or not the Notification Policy is active.
	Active pulumi.BoolOutput `pulumi:"active"`
	// The Channel ID of the Notification Policy.
	ChannelId pulumi.StringOutput `pulumi:"channelId"`
	// The Channel scope of the Notification Policy.
	ChannelScope pulumi.StringOutput `pulumi:"channelScope"`
	// The group of the events that trigger the Notification.
	EventGroup pulumi.StringPtrOutput `pulumi:"eventGroup"`
	// The group of the event that triggers the Notification.
	EventType pulumi.StringPtrOutput `pulumi:"eventType"`
	// The maximal frequency between policy runs in ISO 8601 duration string.
	MaximalFrequency pulumi.StringPtrOutput `pulumi:"maximalFrequency"`
	// The name of the Notification Policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the related entity for the Notification Policy.
	RelatedEntityId pulumi.StringOutput `pulumi:"relatedEntityId"`
	// The Type of the related entity for the Notification Policy.
	RelatedEntityType pulumi.StringOutput `pulumi:"relatedEntityType"`
}

// NewNotificationPolicy registers a new resource with the given unique name, arguments, and options.
func NewNotificationPolicy(ctx *pulumi.Context,
	name string, args *NotificationPolicyArgs, opts ...pulumi.ResourceOption) (*NotificationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChannelId == nil {
		return nil, errors.New("invalid value for required argument 'ChannelId'")
	}
	if args.ChannelScope == nil {
		return nil, errors.New("invalid value for required argument 'ChannelScope'")
	}
	if args.RelatedEntityId == nil {
		return nil, errors.New("invalid value for required argument 'RelatedEntityId'")
	}
	if args.RelatedEntityType == nil {
		return nil, errors.New("invalid value for required argument 'RelatedEntityType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationPolicy
	err := ctx.RegisterResource("datarobot:index/notificationPolicy:NotificationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationPolicy gets an existing NotificationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationPolicyState, opts ...pulumi.ResourceOption) (*NotificationPolicy, error) {
	var resource NotificationPolicy
	err := ctx.ReadResource("datarobot:index/notificationPolicy:NotificationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationPolicy resources.
type notificationPolicyState struct {
	// Whether or not the Notification Policy is active.
	Active *bool `pulumi:"active"`
	// The Channel ID of the Notification Policy.
	ChannelId *string `pulumi:"channelId"`
	// The Channel scope of the Notification Policy.
	ChannelScope *string `pulumi:"channelScope"`
	// The group of the events that trigger the Notification.
	EventGroup *string `pulumi:"eventGroup"`
	// The group of the event that triggers the Notification.
	EventType *string `pulumi:"eventType"`
	// The maximal frequency between policy runs in ISO 8601 duration string.
	MaximalFrequency *string `pulumi:"maximalFrequency"`
	// The name of the Notification Policy.
	Name *string `pulumi:"name"`
	// The ID of the related entity for the Notification Policy.
	RelatedEntityId *string `pulumi:"relatedEntityId"`
	// The Type of the related entity for the Notification Policy.
	RelatedEntityType *string `pulumi:"relatedEntityType"`
}

type NotificationPolicyState struct {
	// Whether or not the Notification Policy is active.
	Active pulumi.BoolPtrInput
	// The Channel ID of the Notification Policy.
	ChannelId pulumi.StringPtrInput
	// The Channel scope of the Notification Policy.
	ChannelScope pulumi.StringPtrInput
	// The group of the events that trigger the Notification.
	EventGroup pulumi.StringPtrInput
	// The group of the event that triggers the Notification.
	EventType pulumi.StringPtrInput
	// The maximal frequency between policy runs in ISO 8601 duration string.
	MaximalFrequency pulumi.StringPtrInput
	// The name of the Notification Policy.
	Name pulumi.StringPtrInput
	// The ID of the related entity for the Notification Policy.
	RelatedEntityId pulumi.StringPtrInput
	// The Type of the related entity for the Notification Policy.
	RelatedEntityType pulumi.StringPtrInput
}

func (NotificationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationPolicyState)(nil)).Elem()
}

type notificationPolicyArgs struct {
	// Whether or not the Notification Policy is active.
	Active *bool `pulumi:"active"`
	// The Channel ID of the Notification Policy.
	ChannelId string `pulumi:"channelId"`
	// The Channel scope of the Notification Policy.
	ChannelScope string `pulumi:"channelScope"`
	// The group of the events that trigger the Notification.
	EventGroup *string `pulumi:"eventGroup"`
	// The group of the event that triggers the Notification.
	EventType *string `pulumi:"eventType"`
	// The maximal frequency between policy runs in ISO 8601 duration string.
	MaximalFrequency *string `pulumi:"maximalFrequency"`
	// The name of the Notification Policy.
	Name *string `pulumi:"name"`
	// The ID of the related entity for the Notification Policy.
	RelatedEntityId string `pulumi:"relatedEntityId"`
	// The Type of the related entity for the Notification Policy.
	RelatedEntityType string `pulumi:"relatedEntityType"`
}

// The set of arguments for constructing a NotificationPolicy resource.
type NotificationPolicyArgs struct {
	// Whether or not the Notification Policy is active.
	Active pulumi.BoolPtrInput
	// The Channel ID of the Notification Policy.
	ChannelId pulumi.StringInput
	// The Channel scope of the Notification Policy.
	ChannelScope pulumi.StringInput
	// The group of the events that trigger the Notification.
	EventGroup pulumi.StringPtrInput
	// The group of the event that triggers the Notification.
	EventType pulumi.StringPtrInput
	// The maximal frequency between policy runs in ISO 8601 duration string.
	MaximalFrequency pulumi.StringPtrInput
	// The name of the Notification Policy.
	Name pulumi.StringPtrInput
	// The ID of the related entity for the Notification Policy.
	RelatedEntityId pulumi.StringInput
	// The Type of the related entity for the Notification Policy.
	RelatedEntityType pulumi.StringInput
}

func (NotificationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationPolicyArgs)(nil)).Elem()
}

type NotificationPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyOutput() NotificationPolicyOutput
	ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput
}

func (*NotificationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationPolicy)(nil)).Elem()
}

func (i *NotificationPolicy) ToNotificationPolicyOutput() NotificationPolicyOutput {
	return i.ToNotificationPolicyOutputWithContext(context.Background())
}

func (i *NotificationPolicy) ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyOutput)
}

// NotificationPolicyArrayInput is an input type that accepts NotificationPolicyArray and NotificationPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyArrayInput` via:
//
//	NotificationPolicyArray{ NotificationPolicyArgs{...} }
type NotificationPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput
	ToNotificationPolicyArrayOutputWithContext(context.Context) NotificationPolicyArrayOutput
}

type NotificationPolicyArray []NotificationPolicyInput

func (NotificationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationPolicy)(nil)).Elem()
}

func (i NotificationPolicyArray) ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput {
	return i.ToNotificationPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyArray) ToNotificationPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyArrayOutput)
}

// NotificationPolicyMapInput is an input type that accepts NotificationPolicyMap and NotificationPolicyMapOutput values.
// You can construct a concrete instance of `NotificationPolicyMapInput` via:
//
//	NotificationPolicyMap{ "key": NotificationPolicyArgs{...} }
type NotificationPolicyMapInput interface {
	pulumi.Input

	ToNotificationPolicyMapOutput() NotificationPolicyMapOutput
	ToNotificationPolicyMapOutputWithContext(context.Context) NotificationPolicyMapOutput
}

type NotificationPolicyMap map[string]NotificationPolicyInput

func (NotificationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationPolicy)(nil)).Elem()
}

func (i NotificationPolicyMap) ToNotificationPolicyMapOutput() NotificationPolicyMapOutput {
	return i.ToNotificationPolicyMapOutputWithContext(context.Background())
}

func (i NotificationPolicyMap) ToNotificationPolicyMapOutputWithContext(ctx context.Context) NotificationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyMapOutput)
}

type NotificationPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyOutput) ToNotificationPolicyOutput() NotificationPolicyOutput {
	return o
}

func (o NotificationPolicyOutput) ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput {
	return o
}

// Whether or not the Notification Policy is active.
func (o NotificationPolicyOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The Channel ID of the Notification Policy.
func (o NotificationPolicyOutput) ChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.ChannelId }).(pulumi.StringOutput)
}

// The Channel scope of the Notification Policy.
func (o NotificationPolicyOutput) ChannelScope() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.ChannelScope }).(pulumi.StringOutput)
}

// The group of the events that trigger the Notification.
func (o NotificationPolicyOutput) EventGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringPtrOutput { return v.EventGroup }).(pulumi.StringPtrOutput)
}

// The group of the event that triggers the Notification.
func (o NotificationPolicyOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringPtrOutput { return v.EventType }).(pulumi.StringPtrOutput)
}

// The maximal frequency between policy runs in ISO 8601 duration string.
func (o NotificationPolicyOutput) MaximalFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringPtrOutput { return v.MaximalFrequency }).(pulumi.StringPtrOutput)
}

// The name of the Notification Policy.
func (o NotificationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the related entity for the Notification Policy.
func (o NotificationPolicyOutput) RelatedEntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.RelatedEntityId }).(pulumi.StringOutput)
}

// The Type of the related entity for the Notification Policy.
func (o NotificationPolicyOutput) RelatedEntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.RelatedEntityType }).(pulumi.StringOutput)
}

type NotificationPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyArrayOutput) ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput {
	return o
}

func (o NotificationPolicyArrayOutput) ToNotificationPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyArrayOutput {
	return o
}

func (o NotificationPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationPolicy {
		return vs[0].([]*NotificationPolicy)[vs[1].(int)]
	}).(NotificationPolicyOutput)
}

type NotificationPolicyMapOutput struct{ *pulumi.OutputState }

func (NotificationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyMapOutput) ToNotificationPolicyMapOutput() NotificationPolicyMapOutput {
	return o
}

func (o NotificationPolicyMapOutput) ToNotificationPolicyMapOutputWithContext(ctx context.Context) NotificationPolicyMapOutput {
	return o
}

func (o NotificationPolicyMapOutput) MapIndex(k pulumi.StringInput) NotificationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationPolicy {
		return vs[0].(map[string]*NotificationPolicy)[vs[1].(string)]
	}).(NotificationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyInput)(nil)).Elem(), &NotificationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyArrayInput)(nil)).Elem(), NotificationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyMapInput)(nil)).Elem(), NotificationPolicyMap{})
	pulumi.RegisterOutputType(NotificationPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyMapOutput{})
}
