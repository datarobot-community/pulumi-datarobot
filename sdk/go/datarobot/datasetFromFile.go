// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data set from file
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := datarobot.NewDatasetFromFile(ctx, "example", &datarobot.DatasetFromFileArgs{
//				SourceFile: pulumi.String("[Path to file to upload]"),
//				UseCaseId:  pulumi.Any(datarobot_use_case.Example.Id),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleId", example.ID())
//			return nil
//		})
//	}
//
// ```
type DatasetFromFile struct {
	pulumi.CustomResourceState

	// The path to the file to upload.
	SourceFile pulumi.StringOutput `pulumi:"sourceFile"`
	// The id of the Use Case.
	UseCaseId pulumi.StringOutput `pulumi:"useCaseId"`
}

// NewDatasetFromFile registers a new resource with the given unique name, arguments, and options.
func NewDatasetFromFile(ctx *pulumi.Context,
	name string, args *DatasetFromFileArgs, opts ...pulumi.ResourceOption) (*DatasetFromFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceFile == nil {
		return nil, errors.New("invalid value for required argument 'SourceFile'")
	}
	if args.UseCaseId == nil {
		return nil, errors.New("invalid value for required argument 'UseCaseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatasetFromFile
	err := ctx.RegisterResource("datarobot:index/datasetFromFile:DatasetFromFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetFromFile gets an existing DatasetFromFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetFromFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetFromFileState, opts ...pulumi.ResourceOption) (*DatasetFromFile, error) {
	var resource DatasetFromFile
	err := ctx.ReadResource("datarobot:index/datasetFromFile:DatasetFromFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetFromFile resources.
type datasetFromFileState struct {
	// The path to the file to upload.
	SourceFile *string `pulumi:"sourceFile"`
	// The id of the Use Case.
	UseCaseId *string `pulumi:"useCaseId"`
}

type DatasetFromFileState struct {
	// The path to the file to upload.
	SourceFile pulumi.StringPtrInput
	// The id of the Use Case.
	UseCaseId pulumi.StringPtrInput
}

func (DatasetFromFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetFromFileState)(nil)).Elem()
}

type datasetFromFileArgs struct {
	// The path to the file to upload.
	SourceFile string `pulumi:"sourceFile"`
	// The id of the Use Case.
	UseCaseId string `pulumi:"useCaseId"`
}

// The set of arguments for constructing a DatasetFromFile resource.
type DatasetFromFileArgs struct {
	// The path to the file to upload.
	SourceFile pulumi.StringInput
	// The id of the Use Case.
	UseCaseId pulumi.StringInput
}

func (DatasetFromFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetFromFileArgs)(nil)).Elem()
}

type DatasetFromFileInput interface {
	pulumi.Input

	ToDatasetFromFileOutput() DatasetFromFileOutput
	ToDatasetFromFileOutputWithContext(ctx context.Context) DatasetFromFileOutput
}

func (*DatasetFromFile) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFromFile)(nil)).Elem()
}

func (i *DatasetFromFile) ToDatasetFromFileOutput() DatasetFromFileOutput {
	return i.ToDatasetFromFileOutputWithContext(context.Background())
}

func (i *DatasetFromFile) ToDatasetFromFileOutputWithContext(ctx context.Context) DatasetFromFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFromFileOutput)
}

// DatasetFromFileArrayInput is an input type that accepts DatasetFromFileArray and DatasetFromFileArrayOutput values.
// You can construct a concrete instance of `DatasetFromFileArrayInput` via:
//
//	DatasetFromFileArray{ DatasetFromFileArgs{...} }
type DatasetFromFileArrayInput interface {
	pulumi.Input

	ToDatasetFromFileArrayOutput() DatasetFromFileArrayOutput
	ToDatasetFromFileArrayOutputWithContext(context.Context) DatasetFromFileArrayOutput
}

type DatasetFromFileArray []DatasetFromFileInput

func (DatasetFromFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetFromFile)(nil)).Elem()
}

func (i DatasetFromFileArray) ToDatasetFromFileArrayOutput() DatasetFromFileArrayOutput {
	return i.ToDatasetFromFileArrayOutputWithContext(context.Background())
}

func (i DatasetFromFileArray) ToDatasetFromFileArrayOutputWithContext(ctx context.Context) DatasetFromFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFromFileArrayOutput)
}

// DatasetFromFileMapInput is an input type that accepts DatasetFromFileMap and DatasetFromFileMapOutput values.
// You can construct a concrete instance of `DatasetFromFileMapInput` via:
//
//	DatasetFromFileMap{ "key": DatasetFromFileArgs{...} }
type DatasetFromFileMapInput interface {
	pulumi.Input

	ToDatasetFromFileMapOutput() DatasetFromFileMapOutput
	ToDatasetFromFileMapOutputWithContext(context.Context) DatasetFromFileMapOutput
}

type DatasetFromFileMap map[string]DatasetFromFileInput

func (DatasetFromFileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetFromFile)(nil)).Elem()
}

func (i DatasetFromFileMap) ToDatasetFromFileMapOutput() DatasetFromFileMapOutput {
	return i.ToDatasetFromFileMapOutputWithContext(context.Background())
}

func (i DatasetFromFileMap) ToDatasetFromFileMapOutputWithContext(ctx context.Context) DatasetFromFileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFromFileMapOutput)
}

type DatasetFromFileOutput struct{ *pulumi.OutputState }

func (DatasetFromFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFromFile)(nil)).Elem()
}

func (o DatasetFromFileOutput) ToDatasetFromFileOutput() DatasetFromFileOutput {
	return o
}

func (o DatasetFromFileOutput) ToDatasetFromFileOutputWithContext(ctx context.Context) DatasetFromFileOutput {
	return o
}

// The path to the file to upload.
func (o DatasetFromFileOutput) SourceFile() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetFromFile) pulumi.StringOutput { return v.SourceFile }).(pulumi.StringOutput)
}

// The id of the Use Case.
func (o DatasetFromFileOutput) UseCaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetFromFile) pulumi.StringOutput { return v.UseCaseId }).(pulumi.StringOutput)
}

type DatasetFromFileArrayOutput struct{ *pulumi.OutputState }

func (DatasetFromFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetFromFile)(nil)).Elem()
}

func (o DatasetFromFileArrayOutput) ToDatasetFromFileArrayOutput() DatasetFromFileArrayOutput {
	return o
}

func (o DatasetFromFileArrayOutput) ToDatasetFromFileArrayOutputWithContext(ctx context.Context) DatasetFromFileArrayOutput {
	return o
}

func (o DatasetFromFileArrayOutput) Index(i pulumi.IntInput) DatasetFromFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatasetFromFile {
		return vs[0].([]*DatasetFromFile)[vs[1].(int)]
	}).(DatasetFromFileOutput)
}

type DatasetFromFileMapOutput struct{ *pulumi.OutputState }

func (DatasetFromFileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetFromFile)(nil)).Elem()
}

func (o DatasetFromFileMapOutput) ToDatasetFromFileMapOutput() DatasetFromFileMapOutput {
	return o
}

func (o DatasetFromFileMapOutput) ToDatasetFromFileMapOutputWithContext(ctx context.Context) DatasetFromFileMapOutput {
	return o
}

func (o DatasetFromFileMapOutput) MapIndex(k pulumi.StringInput) DatasetFromFileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatasetFromFile {
		return vs[0].(map[string]*DatasetFromFile)[vs[1].(string)]
	}).(DatasetFromFileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetFromFileInput)(nil)).Elem(), &DatasetFromFile{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetFromFileArrayInput)(nil)).Elem(), DatasetFromFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetFromFileMapInput)(nil)).Elem(), DatasetFromFileMap{})
	pulumi.RegisterOutputType(DatasetFromFileOutput{})
	pulumi.RegisterOutputType(DatasetFromFileArrayOutput{})
	pulumi.RegisterOutputType(DatasetFromFileMapOutput{})
}
