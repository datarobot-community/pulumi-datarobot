// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source
type Datasource struct {
	pulumi.CustomResourceState

	// The user-friendly name of the data source.
	CanonicalName pulumi.StringOutput `pulumi:"canonicalName"`
	// The type of data source.
	DataSourceType pulumi.StringOutput `pulumi:"dataSourceType"`
	// The data source parameters.
	Params DatasourceParamsOutput `pulumi:"params"`
}

// NewDatasource registers a new resource with the given unique name, arguments, and options.
func NewDatasource(ctx *pulumi.Context,
	name string, args *DatasourceArgs, opts ...pulumi.ResourceOption) (*Datasource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CanonicalName == nil {
		return nil, errors.New("invalid value for required argument 'CanonicalName'")
	}
	if args.DataSourceType == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceType'")
	}
	if args.Params == nil {
		return nil, errors.New("invalid value for required argument 'Params'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datasource
	err := ctx.RegisterResource("datarobot:index/datasource:Datasource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasource gets an existing Datasource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasourceState, opts ...pulumi.ResourceOption) (*Datasource, error) {
	var resource Datasource
	err := ctx.ReadResource("datarobot:index/datasource:Datasource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datasource resources.
type datasourceState struct {
	// The user-friendly name of the data source.
	CanonicalName *string `pulumi:"canonicalName"`
	// The type of data source.
	DataSourceType *string `pulumi:"dataSourceType"`
	// The data source parameters.
	Params *DatasourceParams `pulumi:"params"`
}

type DatasourceState struct {
	// The user-friendly name of the data source.
	CanonicalName pulumi.StringPtrInput
	// The type of data source.
	DataSourceType pulumi.StringPtrInput
	// The data source parameters.
	Params DatasourceParamsPtrInput
}

func (DatasourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasourceState)(nil)).Elem()
}

type datasourceArgs struct {
	// The user-friendly name of the data source.
	CanonicalName string `pulumi:"canonicalName"`
	// The type of data source.
	DataSourceType string `pulumi:"dataSourceType"`
	// The data source parameters.
	Params DatasourceParams `pulumi:"params"`
}

// The set of arguments for constructing a Datasource resource.
type DatasourceArgs struct {
	// The user-friendly name of the data source.
	CanonicalName pulumi.StringInput
	// The type of data source.
	DataSourceType pulumi.StringInput
	// The data source parameters.
	Params DatasourceParamsInput
}

func (DatasourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasourceArgs)(nil)).Elem()
}

type DatasourceInput interface {
	pulumi.Input

	ToDatasourceOutput() DatasourceOutput
	ToDatasourceOutputWithContext(ctx context.Context) DatasourceOutput
}

func (*Datasource) ElementType() reflect.Type {
	return reflect.TypeOf((**Datasource)(nil)).Elem()
}

func (i *Datasource) ToDatasourceOutput() DatasourceOutput {
	return i.ToDatasourceOutputWithContext(context.Background())
}

func (i *Datasource) ToDatasourceOutputWithContext(ctx context.Context) DatasourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasourceOutput)
}

// DatasourceArrayInput is an input type that accepts DatasourceArray and DatasourceArrayOutput values.
// You can construct a concrete instance of `DatasourceArrayInput` via:
//
//	DatasourceArray{ DatasourceArgs{...} }
type DatasourceArrayInput interface {
	pulumi.Input

	ToDatasourceArrayOutput() DatasourceArrayOutput
	ToDatasourceArrayOutputWithContext(context.Context) DatasourceArrayOutput
}

type DatasourceArray []DatasourceInput

func (DatasourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datasource)(nil)).Elem()
}

func (i DatasourceArray) ToDatasourceArrayOutput() DatasourceArrayOutput {
	return i.ToDatasourceArrayOutputWithContext(context.Background())
}

func (i DatasourceArray) ToDatasourceArrayOutputWithContext(ctx context.Context) DatasourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasourceArrayOutput)
}

// DatasourceMapInput is an input type that accepts DatasourceMap and DatasourceMapOutput values.
// You can construct a concrete instance of `DatasourceMapInput` via:
//
//	DatasourceMap{ "key": DatasourceArgs{...} }
type DatasourceMapInput interface {
	pulumi.Input

	ToDatasourceMapOutput() DatasourceMapOutput
	ToDatasourceMapOutputWithContext(context.Context) DatasourceMapOutput
}

type DatasourceMap map[string]DatasourceInput

func (DatasourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datasource)(nil)).Elem()
}

func (i DatasourceMap) ToDatasourceMapOutput() DatasourceMapOutput {
	return i.ToDatasourceMapOutputWithContext(context.Background())
}

func (i DatasourceMap) ToDatasourceMapOutputWithContext(ctx context.Context) DatasourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasourceMapOutput)
}

type DatasourceOutput struct{ *pulumi.OutputState }

func (DatasourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datasource)(nil)).Elem()
}

func (o DatasourceOutput) ToDatasourceOutput() DatasourceOutput {
	return o
}

func (o DatasourceOutput) ToDatasourceOutputWithContext(ctx context.Context) DatasourceOutput {
	return o
}

// The user-friendly name of the data source.
func (o DatasourceOutput) CanonicalName() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.CanonicalName }).(pulumi.StringOutput)
}

// The type of data source.
func (o DatasourceOutput) DataSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.DataSourceType }).(pulumi.StringOutput)
}

// The data source parameters.
func (o DatasourceOutput) Params() DatasourceParamsOutput {
	return o.ApplyT(func(v *Datasource) DatasourceParamsOutput { return v.Params }).(DatasourceParamsOutput)
}

type DatasourceArrayOutput struct{ *pulumi.OutputState }

func (DatasourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datasource)(nil)).Elem()
}

func (o DatasourceArrayOutput) ToDatasourceArrayOutput() DatasourceArrayOutput {
	return o
}

func (o DatasourceArrayOutput) ToDatasourceArrayOutputWithContext(ctx context.Context) DatasourceArrayOutput {
	return o
}

func (o DatasourceArrayOutput) Index(i pulumi.IntInput) DatasourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datasource {
		return vs[0].([]*Datasource)[vs[1].(int)]
	}).(DatasourceOutput)
}

type DatasourceMapOutput struct{ *pulumi.OutputState }

func (DatasourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datasource)(nil)).Elem()
}

func (o DatasourceMapOutput) ToDatasourceMapOutput() DatasourceMapOutput {
	return o
}

func (o DatasourceMapOutput) ToDatasourceMapOutputWithContext(ctx context.Context) DatasourceMapOutput {
	return o
}

func (o DatasourceMapOutput) MapIndex(k pulumi.StringInput) DatasourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datasource {
		return vs[0].(map[string]*Datasource)[vs[1].(string)]
	}).(DatasourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasourceInput)(nil)).Elem(), &Datasource{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasourceArrayInput)(nil)).Elem(), DatasourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasourceMapInput)(nil)).Elem(), DatasourceMap{})
	pulumi.RegisterOutputType(DatasourceOutput{})
	pulumi.RegisterOutputType(DatasourceArrayOutput{})
	pulumi.RegisterOutputType(DatasourceMapOutput{})
}
