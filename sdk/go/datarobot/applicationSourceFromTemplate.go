// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Application Source
type ApplicationSourceFromTemplate struct {
	pulumi.CustomResourceState

	// The ID of the base environment for the Application Source.
	BaseEnvironmentId pulumi.StringOutput `pulumi:"baseEnvironmentId"`
	// The ID of the base environment version for the Application Source.
	BaseEnvironmentVersionId pulumi.StringOutput `pulumi:"baseEnvironmentVersionId"`
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files pulumi.AnyOutput `pulumi:"files"`
	// The hash of file contents for each file in files.
	FilesHashes pulumi.StringArrayOutput `pulumi:"filesHashes"`
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrOutput `pulumi:"folderPath"`
	// The hash of the folder path contents.
	FolderPathHash pulumi.StringOutput `pulumi:"folderPathHash"`
	// The name of the Application Source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resources for the Application Source.
	Resources ApplicationSourceFromTemplateResourcesPtrOutput `pulumi:"resources"`
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues ApplicationSourceFromTemplateRuntimeParameterValueArrayOutput `pulumi:"runtimeParameterValues"`
	// The ID of the template used to create the Application Source.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
	// The version ID of the Application Source.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewApplicationSourceFromTemplate registers a new resource with the given unique name, arguments, and options.
func NewApplicationSourceFromTemplate(ctx *pulumi.Context,
	name string, args *ApplicationSourceFromTemplateArgs, opts ...pulumi.ResourceOption) (*ApplicationSourceFromTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TemplateId == nil {
		return nil, errors.New("invalid value for required argument 'TemplateId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationSourceFromTemplate
	err := ctx.RegisterResource("datarobot:index/applicationSourceFromTemplate:ApplicationSourceFromTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSourceFromTemplate gets an existing ApplicationSourceFromTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSourceFromTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSourceFromTemplateState, opts ...pulumi.ResourceOption) (*ApplicationSourceFromTemplate, error) {
	var resource ApplicationSourceFromTemplate
	err := ctx.ReadResource("datarobot:index/applicationSourceFromTemplate:ApplicationSourceFromTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSourceFromTemplate resources.
type applicationSourceFromTemplateState struct {
	// The ID of the base environment for the Application Source.
	BaseEnvironmentId *string `pulumi:"baseEnvironmentId"`
	// The ID of the base environment version for the Application Source.
	BaseEnvironmentVersionId *string `pulumi:"baseEnvironmentVersionId"`
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files interface{} `pulumi:"files"`
	// The hash of file contents for each file in files.
	FilesHashes []string `pulumi:"filesHashes"`
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// The hash of the folder path contents.
	FolderPathHash *string `pulumi:"folderPathHash"`
	// The name of the Application Source.
	Name *string `pulumi:"name"`
	// The resources for the Application Source.
	Resources *ApplicationSourceFromTemplateResources `pulumi:"resources"`
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues []ApplicationSourceFromTemplateRuntimeParameterValue `pulumi:"runtimeParameterValues"`
	// The ID of the template used to create the Application Source.
	TemplateId *string `pulumi:"templateId"`
	// The version ID of the Application Source.
	VersionId *string `pulumi:"versionId"`
}

type ApplicationSourceFromTemplateState struct {
	// The ID of the base environment for the Application Source.
	BaseEnvironmentId pulumi.StringPtrInput
	// The ID of the base environment version for the Application Source.
	BaseEnvironmentVersionId pulumi.StringPtrInput
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files pulumi.Input
	// The hash of file contents for each file in files.
	FilesHashes pulumi.StringArrayInput
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// The hash of the folder path contents.
	FolderPathHash pulumi.StringPtrInput
	// The name of the Application Source.
	Name pulumi.StringPtrInput
	// The resources for the Application Source.
	Resources ApplicationSourceFromTemplateResourcesPtrInput
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues ApplicationSourceFromTemplateRuntimeParameterValueArrayInput
	// The ID of the template used to create the Application Source.
	TemplateId pulumi.StringPtrInput
	// The version ID of the Application Source.
	VersionId pulumi.StringPtrInput
}

func (ApplicationSourceFromTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSourceFromTemplateState)(nil)).Elem()
}

type applicationSourceFromTemplateArgs struct {
	// The ID of the base environment for the Application Source.
	BaseEnvironmentId *string `pulumi:"baseEnvironmentId"`
	// The ID of the base environment version for the Application Source.
	BaseEnvironmentVersionId *string `pulumi:"baseEnvironmentVersionId"`
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files interface{} `pulumi:"files"`
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// The name of the Application Source.
	Name *string `pulumi:"name"`
	// The resources for the Application Source.
	Resources *ApplicationSourceFromTemplateResources `pulumi:"resources"`
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues []ApplicationSourceFromTemplateRuntimeParameterValue `pulumi:"runtimeParameterValues"`
	// The ID of the template used to create the Application Source.
	TemplateId string `pulumi:"templateId"`
}

// The set of arguments for constructing a ApplicationSourceFromTemplate resource.
type ApplicationSourceFromTemplateArgs struct {
	// The ID of the base environment for the Application Source.
	BaseEnvironmentId pulumi.StringPtrInput
	// The ID of the base environment version for the Application Source.
	BaseEnvironmentVersionId pulumi.StringPtrInput
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files pulumi.Input
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// The name of the Application Source.
	Name pulumi.StringPtrInput
	// The resources for the Application Source.
	Resources ApplicationSourceFromTemplateResourcesPtrInput
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues ApplicationSourceFromTemplateRuntimeParameterValueArrayInput
	// The ID of the template used to create the Application Source.
	TemplateId pulumi.StringInput
}

func (ApplicationSourceFromTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSourceFromTemplateArgs)(nil)).Elem()
}

type ApplicationSourceFromTemplateInput interface {
	pulumi.Input

	ToApplicationSourceFromTemplateOutput() ApplicationSourceFromTemplateOutput
	ToApplicationSourceFromTemplateOutputWithContext(ctx context.Context) ApplicationSourceFromTemplateOutput
}

func (*ApplicationSourceFromTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSourceFromTemplate)(nil)).Elem()
}

func (i *ApplicationSourceFromTemplate) ToApplicationSourceFromTemplateOutput() ApplicationSourceFromTemplateOutput {
	return i.ToApplicationSourceFromTemplateOutputWithContext(context.Background())
}

func (i *ApplicationSourceFromTemplate) ToApplicationSourceFromTemplateOutputWithContext(ctx context.Context) ApplicationSourceFromTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSourceFromTemplateOutput)
}

// ApplicationSourceFromTemplateArrayInput is an input type that accepts ApplicationSourceFromTemplateArray and ApplicationSourceFromTemplateArrayOutput values.
// You can construct a concrete instance of `ApplicationSourceFromTemplateArrayInput` via:
//
//	ApplicationSourceFromTemplateArray{ ApplicationSourceFromTemplateArgs{...} }
type ApplicationSourceFromTemplateArrayInput interface {
	pulumi.Input

	ToApplicationSourceFromTemplateArrayOutput() ApplicationSourceFromTemplateArrayOutput
	ToApplicationSourceFromTemplateArrayOutputWithContext(context.Context) ApplicationSourceFromTemplateArrayOutput
}

type ApplicationSourceFromTemplateArray []ApplicationSourceFromTemplateInput

func (ApplicationSourceFromTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSourceFromTemplate)(nil)).Elem()
}

func (i ApplicationSourceFromTemplateArray) ToApplicationSourceFromTemplateArrayOutput() ApplicationSourceFromTemplateArrayOutput {
	return i.ToApplicationSourceFromTemplateArrayOutputWithContext(context.Background())
}

func (i ApplicationSourceFromTemplateArray) ToApplicationSourceFromTemplateArrayOutputWithContext(ctx context.Context) ApplicationSourceFromTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSourceFromTemplateArrayOutput)
}

// ApplicationSourceFromTemplateMapInput is an input type that accepts ApplicationSourceFromTemplateMap and ApplicationSourceFromTemplateMapOutput values.
// You can construct a concrete instance of `ApplicationSourceFromTemplateMapInput` via:
//
//	ApplicationSourceFromTemplateMap{ "key": ApplicationSourceFromTemplateArgs{...} }
type ApplicationSourceFromTemplateMapInput interface {
	pulumi.Input

	ToApplicationSourceFromTemplateMapOutput() ApplicationSourceFromTemplateMapOutput
	ToApplicationSourceFromTemplateMapOutputWithContext(context.Context) ApplicationSourceFromTemplateMapOutput
}

type ApplicationSourceFromTemplateMap map[string]ApplicationSourceFromTemplateInput

func (ApplicationSourceFromTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSourceFromTemplate)(nil)).Elem()
}

func (i ApplicationSourceFromTemplateMap) ToApplicationSourceFromTemplateMapOutput() ApplicationSourceFromTemplateMapOutput {
	return i.ToApplicationSourceFromTemplateMapOutputWithContext(context.Background())
}

func (i ApplicationSourceFromTemplateMap) ToApplicationSourceFromTemplateMapOutputWithContext(ctx context.Context) ApplicationSourceFromTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSourceFromTemplateMapOutput)
}

type ApplicationSourceFromTemplateOutput struct{ *pulumi.OutputState }

func (ApplicationSourceFromTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSourceFromTemplate)(nil)).Elem()
}

func (o ApplicationSourceFromTemplateOutput) ToApplicationSourceFromTemplateOutput() ApplicationSourceFromTemplateOutput {
	return o
}

func (o ApplicationSourceFromTemplateOutput) ToApplicationSourceFromTemplateOutputWithContext(ctx context.Context) ApplicationSourceFromTemplateOutput {
	return o
}

// The ID of the base environment for the Application Source.
func (o ApplicationSourceFromTemplateOutput) BaseEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) pulumi.StringOutput { return v.BaseEnvironmentId }).(pulumi.StringOutput)
}

// The ID of the base environment version for the Application Source.
func (o ApplicationSourceFromTemplateOutput) BaseEnvironmentVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) pulumi.StringOutput { return v.BaseEnvironmentVersionId }).(pulumi.StringOutput)
}

// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
func (o ApplicationSourceFromTemplateOutput) Files() pulumi.AnyOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) pulumi.AnyOutput { return v.Files }).(pulumi.AnyOutput)
}

// The hash of file contents for each file in files.
func (o ApplicationSourceFromTemplateOutput) FilesHashes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) pulumi.StringArrayOutput { return v.FilesHashes }).(pulumi.StringArrayOutput)
}

// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
func (o ApplicationSourceFromTemplateOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) pulumi.StringPtrOutput { return v.FolderPath }).(pulumi.StringPtrOutput)
}

// The hash of the folder path contents.
func (o ApplicationSourceFromTemplateOutput) FolderPathHash() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) pulumi.StringOutput { return v.FolderPathHash }).(pulumi.StringOutput)
}

// The name of the Application Source.
func (o ApplicationSourceFromTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resources for the Application Source.
func (o ApplicationSourceFromTemplateOutput) Resources() ApplicationSourceFromTemplateResourcesPtrOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) ApplicationSourceFromTemplateResourcesPtrOutput {
		return v.Resources
	}).(ApplicationSourceFromTemplateResourcesPtrOutput)
}

// The runtime parameter values for the Application Source.
func (o ApplicationSourceFromTemplateOutput) RuntimeParameterValues() ApplicationSourceFromTemplateRuntimeParameterValueArrayOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) ApplicationSourceFromTemplateRuntimeParameterValueArrayOutput {
		return v.RuntimeParameterValues
	}).(ApplicationSourceFromTemplateRuntimeParameterValueArrayOutput)
}

// The ID of the template used to create the Application Source.
func (o ApplicationSourceFromTemplateOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

// The version ID of the Application Source.
func (o ApplicationSourceFromTemplateOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSourceFromTemplate) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

type ApplicationSourceFromTemplateArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSourceFromTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSourceFromTemplate)(nil)).Elem()
}

func (o ApplicationSourceFromTemplateArrayOutput) ToApplicationSourceFromTemplateArrayOutput() ApplicationSourceFromTemplateArrayOutput {
	return o
}

func (o ApplicationSourceFromTemplateArrayOutput) ToApplicationSourceFromTemplateArrayOutputWithContext(ctx context.Context) ApplicationSourceFromTemplateArrayOutput {
	return o
}

func (o ApplicationSourceFromTemplateArrayOutput) Index(i pulumi.IntInput) ApplicationSourceFromTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationSourceFromTemplate {
		return vs[0].([]*ApplicationSourceFromTemplate)[vs[1].(int)]
	}).(ApplicationSourceFromTemplateOutput)
}

type ApplicationSourceFromTemplateMapOutput struct{ *pulumi.OutputState }

func (ApplicationSourceFromTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSourceFromTemplate)(nil)).Elem()
}

func (o ApplicationSourceFromTemplateMapOutput) ToApplicationSourceFromTemplateMapOutput() ApplicationSourceFromTemplateMapOutput {
	return o
}

func (o ApplicationSourceFromTemplateMapOutput) ToApplicationSourceFromTemplateMapOutputWithContext(ctx context.Context) ApplicationSourceFromTemplateMapOutput {
	return o
}

func (o ApplicationSourceFromTemplateMapOutput) MapIndex(k pulumi.StringInput) ApplicationSourceFromTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationSourceFromTemplate {
		return vs[0].(map[string]*ApplicationSourceFromTemplate)[vs[1].(string)]
	}).(ApplicationSourceFromTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSourceFromTemplateInput)(nil)).Elem(), &ApplicationSourceFromTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSourceFromTemplateArrayInput)(nil)).Elem(), ApplicationSourceFromTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSourceFromTemplateMapInput)(nil)).Elem(), ApplicationSourceFromTemplateMap{})
	pulumi.RegisterOutputType(ApplicationSourceFromTemplateOutput{})
	pulumi.RegisterOutputType(ApplicationSourceFromTemplateArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSourceFromTemplateMapOutput{})
}
