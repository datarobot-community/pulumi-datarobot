// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Application Source
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := datarobot.NewApplicationSource(ctx, "example", &datarobot.ApplicationSourceArgs{
//				Files: pulumi.Any{
//					[]string{
//						"start-app.sh",
//					},
//					[]string{
//						"streamlit-app.py",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("datarobotApplicationSourceId", example.ID())
//			ctx.Export("datarobotApplicationSourceVersionId", example.VersionId)
//			return nil
//		})
//	}
//
// ```
type ApplicationSource struct {
	pulumi.CustomResourceState

	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files pulumi.AnyOutput `pulumi:"files"`
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrOutput `pulumi:"folderPath"`
	// The name of the Application Source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource settings for the Application Source.
	ResourceSettings ApplicationSourceResourceSettingsOutput `pulumi:"resourceSettings"`
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues ApplicationSourceRuntimeParameterValueArrayOutput `pulumi:"runtimeParameterValues"`
	// The version ID of the Application Source.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewApplicationSource registers a new resource with the given unique name, arguments, and options.
func NewApplicationSource(ctx *pulumi.Context,
	name string, args *ApplicationSourceArgs, opts ...pulumi.ResourceOption) (*ApplicationSource, error) {
	if args == nil {
		args = &ApplicationSourceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationSource
	err := ctx.RegisterResource("datarobot:index/applicationSource:ApplicationSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSource gets an existing ApplicationSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSourceState, opts ...pulumi.ResourceOption) (*ApplicationSource, error) {
	var resource ApplicationSource
	err := ctx.ReadResource("datarobot:index/applicationSource:ApplicationSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSource resources.
type applicationSourceState struct {
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files interface{} `pulumi:"files"`
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// The name of the Application Source.
	Name *string `pulumi:"name"`
	// The resource settings for the Application Source.
	ResourceSettings *ApplicationSourceResourceSettings `pulumi:"resourceSettings"`
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues []ApplicationSourceRuntimeParameterValue `pulumi:"runtimeParameterValues"`
	// The version ID of the Application Source.
	VersionId *string `pulumi:"versionId"`
}

type ApplicationSourceState struct {
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files pulumi.Input
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// The name of the Application Source.
	Name pulumi.StringPtrInput
	// The resource settings for the Application Source.
	ResourceSettings ApplicationSourceResourceSettingsPtrInput
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues ApplicationSourceRuntimeParameterValueArrayInput
	// The version ID of the Application Source.
	VersionId pulumi.StringPtrInput
}

func (ApplicationSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSourceState)(nil)).Elem()
}

type applicationSourceArgs struct {
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files interface{} `pulumi:"files"`
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath *string `pulumi:"folderPath"`
	// The name of the Application Source.
	Name *string `pulumi:"name"`
	// The resource settings for the Application Source.
	ResourceSettings *ApplicationSourceResourceSettings `pulumi:"resourceSettings"`
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues []ApplicationSourceRuntimeParameterValue `pulumi:"runtimeParameterValues"`
}

// The set of arguments for constructing a ApplicationSource resource.
type ApplicationSourceArgs struct {
	// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
	Files pulumi.Input
	// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
	FolderPath pulumi.StringPtrInput
	// The name of the Application Source.
	Name pulumi.StringPtrInput
	// The resource settings for the Application Source.
	ResourceSettings ApplicationSourceResourceSettingsPtrInput
	// The runtime parameter values for the Application Source.
	RuntimeParameterValues ApplicationSourceRuntimeParameterValueArrayInput
}

func (ApplicationSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSourceArgs)(nil)).Elem()
}

type ApplicationSourceInput interface {
	pulumi.Input

	ToApplicationSourceOutput() ApplicationSourceOutput
	ToApplicationSourceOutputWithContext(ctx context.Context) ApplicationSourceOutput
}

func (*ApplicationSource) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSource)(nil)).Elem()
}

func (i *ApplicationSource) ToApplicationSourceOutput() ApplicationSourceOutput {
	return i.ToApplicationSourceOutputWithContext(context.Background())
}

func (i *ApplicationSource) ToApplicationSourceOutputWithContext(ctx context.Context) ApplicationSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSourceOutput)
}

// ApplicationSourceArrayInput is an input type that accepts ApplicationSourceArray and ApplicationSourceArrayOutput values.
// You can construct a concrete instance of `ApplicationSourceArrayInput` via:
//
//	ApplicationSourceArray{ ApplicationSourceArgs{...} }
type ApplicationSourceArrayInput interface {
	pulumi.Input

	ToApplicationSourceArrayOutput() ApplicationSourceArrayOutput
	ToApplicationSourceArrayOutputWithContext(context.Context) ApplicationSourceArrayOutput
}

type ApplicationSourceArray []ApplicationSourceInput

func (ApplicationSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSource)(nil)).Elem()
}

func (i ApplicationSourceArray) ToApplicationSourceArrayOutput() ApplicationSourceArrayOutput {
	return i.ToApplicationSourceArrayOutputWithContext(context.Background())
}

func (i ApplicationSourceArray) ToApplicationSourceArrayOutputWithContext(ctx context.Context) ApplicationSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSourceArrayOutput)
}

// ApplicationSourceMapInput is an input type that accepts ApplicationSourceMap and ApplicationSourceMapOutput values.
// You can construct a concrete instance of `ApplicationSourceMapInput` via:
//
//	ApplicationSourceMap{ "key": ApplicationSourceArgs{...} }
type ApplicationSourceMapInput interface {
	pulumi.Input

	ToApplicationSourceMapOutput() ApplicationSourceMapOutput
	ToApplicationSourceMapOutputWithContext(context.Context) ApplicationSourceMapOutput
}

type ApplicationSourceMap map[string]ApplicationSourceInput

func (ApplicationSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSource)(nil)).Elem()
}

func (i ApplicationSourceMap) ToApplicationSourceMapOutput() ApplicationSourceMapOutput {
	return i.ToApplicationSourceMapOutputWithContext(context.Background())
}

func (i ApplicationSourceMap) ToApplicationSourceMapOutputWithContext(ctx context.Context) ApplicationSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSourceMapOutput)
}

type ApplicationSourceOutput struct{ *pulumi.OutputState }

func (ApplicationSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSource)(nil)).Elem()
}

func (o ApplicationSourceOutput) ToApplicationSourceOutput() ApplicationSourceOutput {
	return o
}

func (o ApplicationSourceOutput) ToApplicationSourceOutputWithContext(ctx context.Context) ApplicationSourceOutput {
	return o
}

// The list of tuples, where values in each tuple are the local filesystem path and the path the file should be placed in the Application Source. If list is of strings, then basenames will be used for tuples.
func (o ApplicationSourceOutput) Files() pulumi.AnyOutput {
	return o.ApplyT(func(v *ApplicationSource) pulumi.AnyOutput { return v.Files }).(pulumi.AnyOutput)
}

// The path to a folder containing files to build the Application Source. Each file in the folder is uploaded under path relative to a folder path.
func (o ApplicationSourceOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSource) pulumi.StringPtrOutput { return v.FolderPath }).(pulumi.StringPtrOutput)
}

// The name of the Application Source.
func (o ApplicationSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource settings for the Application Source.
func (o ApplicationSourceOutput) ResourceSettings() ApplicationSourceResourceSettingsOutput {
	return o.ApplyT(func(v *ApplicationSource) ApplicationSourceResourceSettingsOutput { return v.ResourceSettings }).(ApplicationSourceResourceSettingsOutput)
}

// The runtime parameter values for the Application Source.
func (o ApplicationSourceOutput) RuntimeParameterValues() ApplicationSourceRuntimeParameterValueArrayOutput {
	return o.ApplyT(func(v *ApplicationSource) ApplicationSourceRuntimeParameterValueArrayOutput {
		return v.RuntimeParameterValues
	}).(ApplicationSourceRuntimeParameterValueArrayOutput)
}

// The version ID of the Application Source.
func (o ApplicationSourceOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSource) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

type ApplicationSourceArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSource)(nil)).Elem()
}

func (o ApplicationSourceArrayOutput) ToApplicationSourceArrayOutput() ApplicationSourceArrayOutput {
	return o
}

func (o ApplicationSourceArrayOutput) ToApplicationSourceArrayOutputWithContext(ctx context.Context) ApplicationSourceArrayOutput {
	return o
}

func (o ApplicationSourceArrayOutput) Index(i pulumi.IntInput) ApplicationSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationSource {
		return vs[0].([]*ApplicationSource)[vs[1].(int)]
	}).(ApplicationSourceOutput)
}

type ApplicationSourceMapOutput struct{ *pulumi.OutputState }

func (ApplicationSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSource)(nil)).Elem()
}

func (o ApplicationSourceMapOutput) ToApplicationSourceMapOutput() ApplicationSourceMapOutput {
	return o
}

func (o ApplicationSourceMapOutput) ToApplicationSourceMapOutputWithContext(ctx context.Context) ApplicationSourceMapOutput {
	return o
}

func (o ApplicationSourceMapOutput) MapIndex(k pulumi.StringInput) ApplicationSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationSource {
		return vs[0].(map[string]*ApplicationSource)[vs[1].(string)]
	}).(ApplicationSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSourceInput)(nil)).Elem(), &ApplicationSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSourceArrayInput)(nil)).Elem(), ApplicationSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSourceMapInput)(nil)).Elem(), ApplicationSourceMap{})
	pulumi.RegisterOutputType(ApplicationSourceOutput{})
	pulumi.RegisterOutputType(ApplicationSourceArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSourceMapOutput{})
}
