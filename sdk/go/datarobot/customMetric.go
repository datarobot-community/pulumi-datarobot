// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Custom Metric
type CustomMetric struct {
	pulumi.CustomResourceState

	// The baseline value used to add “reference dots” to the values over time chart.
	BaselineValue pulumi.Float64PtrOutput `pulumi:"baselineValue"`
	// A Custom Metric batch ID source when reading values from columnar dataset.
	Batch CustomMetricBatchPtrOutput `pulumi:"batch"`
	// ID of the Deployment for the Custom Metric.
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// Description of the Custom Metric.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Directionality of the Custom Metric
	Directionality pulumi.StringOutput `pulumi:"directionality"`
	// Determines whether the metric is geospatial.
	IsGeospatial pulumi.BoolOutput `pulumi:"isGeospatial"`
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific pulumi.BoolOutput `pulumi:"isModelSpecific"`
	// Name of the Custom Metric.
	Name pulumi.StringOutput `pulumi:"name"`
	// A Custom Metric sample source when reading values from columnar dataset.
	SampleCount CustomMetricSampleCountPtrOutput `pulumi:"sampleCount"`
	// A Custom Metric timestamp column source when reading values from columnar dataset.
	Timestamp CustomMetricTimestampPtrOutput `pulumi:"timestamp"`
	// Aggregation type of the Custom Metric.
	Type pulumi.StringOutput `pulumi:"type"`
	// The units, or the y-axis label, of the given Custom Metric.
	Units pulumi.StringOutput `pulumi:"units"`
	// A Custom Metric value source when reading values from columnar dataset.
	Value CustomMetricValuePtrOutput `pulumi:"value"`
}

// NewCustomMetric registers a new resource with the given unique name, arguments, and options.
func NewCustomMetric(ctx *pulumi.Context,
	name string, args *CustomMetricArgs, opts ...pulumi.ResourceOption) (*CustomMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentId'")
	}
	if args.Directionality == nil {
		return nil, errors.New("invalid value for required argument 'Directionality'")
	}
	if args.IsGeospatial == nil {
		return nil, errors.New("invalid value for required argument 'IsGeospatial'")
	}
	if args.IsModelSpecific == nil {
		return nil, errors.New("invalid value for required argument 'IsModelSpecific'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Units == nil {
		return nil, errors.New("invalid value for required argument 'Units'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomMetric
	err := ctx.RegisterResource("datarobot:index/customMetric:CustomMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomMetric gets an existing CustomMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomMetricState, opts ...pulumi.ResourceOption) (*CustomMetric, error) {
	var resource CustomMetric
	err := ctx.ReadResource("datarobot:index/customMetric:CustomMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomMetric resources.
type customMetricState struct {
	// The baseline value used to add “reference dots” to the values over time chart.
	BaselineValue *float64 `pulumi:"baselineValue"`
	// A Custom Metric batch ID source when reading values from columnar dataset.
	Batch *CustomMetricBatch `pulumi:"batch"`
	// ID of the Deployment for the Custom Metric.
	DeploymentId *string `pulumi:"deploymentId"`
	// Description of the Custom Metric.
	Description *string `pulumi:"description"`
	// Directionality of the Custom Metric
	Directionality *string `pulumi:"directionality"`
	// Determines whether the metric is geospatial.
	IsGeospatial *bool `pulumi:"isGeospatial"`
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific *bool `pulumi:"isModelSpecific"`
	// Name of the Custom Metric.
	Name *string `pulumi:"name"`
	// A Custom Metric sample source when reading values from columnar dataset.
	SampleCount *CustomMetricSampleCount `pulumi:"sampleCount"`
	// A Custom Metric timestamp column source when reading values from columnar dataset.
	Timestamp *CustomMetricTimestamp `pulumi:"timestamp"`
	// Aggregation type of the Custom Metric.
	Type *string `pulumi:"type"`
	// The units, or the y-axis label, of the given Custom Metric.
	Units *string `pulumi:"units"`
	// A Custom Metric value source when reading values from columnar dataset.
	Value *CustomMetricValue `pulumi:"value"`
}

type CustomMetricState struct {
	// The baseline value used to add “reference dots” to the values over time chart.
	BaselineValue pulumi.Float64PtrInput
	// A Custom Metric batch ID source when reading values from columnar dataset.
	Batch CustomMetricBatchPtrInput
	// ID of the Deployment for the Custom Metric.
	DeploymentId pulumi.StringPtrInput
	// Description of the Custom Metric.
	Description pulumi.StringPtrInput
	// Directionality of the Custom Metric
	Directionality pulumi.StringPtrInput
	// Determines whether the metric is geospatial.
	IsGeospatial pulumi.BoolPtrInput
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific pulumi.BoolPtrInput
	// Name of the Custom Metric.
	Name pulumi.StringPtrInput
	// A Custom Metric sample source when reading values from columnar dataset.
	SampleCount CustomMetricSampleCountPtrInput
	// A Custom Metric timestamp column source when reading values from columnar dataset.
	Timestamp CustomMetricTimestampPtrInput
	// Aggregation type of the Custom Metric.
	Type pulumi.StringPtrInput
	// The units, or the y-axis label, of the given Custom Metric.
	Units pulumi.StringPtrInput
	// A Custom Metric value source when reading values from columnar dataset.
	Value CustomMetricValuePtrInput
}

func (CustomMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*customMetricState)(nil)).Elem()
}

type customMetricArgs struct {
	// The baseline value used to add “reference dots” to the values over time chart.
	BaselineValue *float64 `pulumi:"baselineValue"`
	// A Custom Metric batch ID source when reading values from columnar dataset.
	Batch *CustomMetricBatch `pulumi:"batch"`
	// ID of the Deployment for the Custom Metric.
	DeploymentId string `pulumi:"deploymentId"`
	// Description of the Custom Metric.
	Description *string `pulumi:"description"`
	// Directionality of the Custom Metric
	Directionality string `pulumi:"directionality"`
	// Determines whether the metric is geospatial.
	IsGeospatial bool `pulumi:"isGeospatial"`
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific bool `pulumi:"isModelSpecific"`
	// Name of the Custom Metric.
	Name *string `pulumi:"name"`
	// A Custom Metric sample source when reading values from columnar dataset.
	SampleCount *CustomMetricSampleCount `pulumi:"sampleCount"`
	// A Custom Metric timestamp column source when reading values from columnar dataset.
	Timestamp *CustomMetricTimestamp `pulumi:"timestamp"`
	// Aggregation type of the Custom Metric.
	Type string `pulumi:"type"`
	// The units, or the y-axis label, of the given Custom Metric.
	Units string `pulumi:"units"`
	// A Custom Metric value source when reading values from columnar dataset.
	Value *CustomMetricValue `pulumi:"value"`
}

// The set of arguments for constructing a CustomMetric resource.
type CustomMetricArgs struct {
	// The baseline value used to add “reference dots” to the values over time chart.
	BaselineValue pulumi.Float64PtrInput
	// A Custom Metric batch ID source when reading values from columnar dataset.
	Batch CustomMetricBatchPtrInput
	// ID of the Deployment for the Custom Metric.
	DeploymentId pulumi.StringInput
	// Description of the Custom Metric.
	Description pulumi.StringPtrInput
	// Directionality of the Custom Metric
	Directionality pulumi.StringInput
	// Determines whether the metric is geospatial.
	IsGeospatial pulumi.BoolInput
	// Determines whether the metric is related to the model or deployment.
	IsModelSpecific pulumi.BoolInput
	// Name of the Custom Metric.
	Name pulumi.StringPtrInput
	// A Custom Metric sample source when reading values from columnar dataset.
	SampleCount CustomMetricSampleCountPtrInput
	// A Custom Metric timestamp column source when reading values from columnar dataset.
	Timestamp CustomMetricTimestampPtrInput
	// Aggregation type of the Custom Metric.
	Type pulumi.StringInput
	// The units, or the y-axis label, of the given Custom Metric.
	Units pulumi.StringInput
	// A Custom Metric value source when reading values from columnar dataset.
	Value CustomMetricValuePtrInput
}

func (CustomMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customMetricArgs)(nil)).Elem()
}

type CustomMetricInput interface {
	pulumi.Input

	ToCustomMetricOutput() CustomMetricOutput
	ToCustomMetricOutputWithContext(ctx context.Context) CustomMetricOutput
}

func (*CustomMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMetric)(nil)).Elem()
}

func (i *CustomMetric) ToCustomMetricOutput() CustomMetricOutput {
	return i.ToCustomMetricOutputWithContext(context.Background())
}

func (i *CustomMetric) ToCustomMetricOutputWithContext(ctx context.Context) CustomMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricOutput)
}

// CustomMetricArrayInput is an input type that accepts CustomMetricArray and CustomMetricArrayOutput values.
// You can construct a concrete instance of `CustomMetricArrayInput` via:
//
//	CustomMetricArray{ CustomMetricArgs{...} }
type CustomMetricArrayInput interface {
	pulumi.Input

	ToCustomMetricArrayOutput() CustomMetricArrayOutput
	ToCustomMetricArrayOutputWithContext(context.Context) CustomMetricArrayOutput
}

type CustomMetricArray []CustomMetricInput

func (CustomMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomMetric)(nil)).Elem()
}

func (i CustomMetricArray) ToCustomMetricArrayOutput() CustomMetricArrayOutput {
	return i.ToCustomMetricArrayOutputWithContext(context.Background())
}

func (i CustomMetricArray) ToCustomMetricArrayOutputWithContext(ctx context.Context) CustomMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricArrayOutput)
}

// CustomMetricMapInput is an input type that accepts CustomMetricMap and CustomMetricMapOutput values.
// You can construct a concrete instance of `CustomMetricMapInput` via:
//
//	CustomMetricMap{ "key": CustomMetricArgs{...} }
type CustomMetricMapInput interface {
	pulumi.Input

	ToCustomMetricMapOutput() CustomMetricMapOutput
	ToCustomMetricMapOutputWithContext(context.Context) CustomMetricMapOutput
}

type CustomMetricMap map[string]CustomMetricInput

func (CustomMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomMetric)(nil)).Elem()
}

func (i CustomMetricMap) ToCustomMetricMapOutput() CustomMetricMapOutput {
	return i.ToCustomMetricMapOutputWithContext(context.Background())
}

func (i CustomMetricMap) ToCustomMetricMapOutputWithContext(ctx context.Context) CustomMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricMapOutput)
}

type CustomMetricOutput struct{ *pulumi.OutputState }

func (CustomMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMetric)(nil)).Elem()
}

func (o CustomMetricOutput) ToCustomMetricOutput() CustomMetricOutput {
	return o
}

func (o CustomMetricOutput) ToCustomMetricOutputWithContext(ctx context.Context) CustomMetricOutput {
	return o
}

// The baseline value used to add “reference dots” to the values over time chart.
func (o CustomMetricOutput) BaselineValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CustomMetric) pulumi.Float64PtrOutput { return v.BaselineValue }).(pulumi.Float64PtrOutput)
}

// A Custom Metric batch ID source when reading values from columnar dataset.
func (o CustomMetricOutput) Batch() CustomMetricBatchPtrOutput {
	return o.ApplyT(func(v *CustomMetric) CustomMetricBatchPtrOutput { return v.Batch }).(CustomMetricBatchPtrOutput)
}

// ID of the Deployment for the Custom Metric.
func (o CustomMetricOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetric) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

// Description of the Custom Metric.
func (o CustomMetricOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomMetric) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Directionality of the Custom Metric
func (o CustomMetricOutput) Directionality() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetric) pulumi.StringOutput { return v.Directionality }).(pulumi.StringOutput)
}

// Determines whether the metric is geospatial.
func (o CustomMetricOutput) IsGeospatial() pulumi.BoolOutput {
	return o.ApplyT(func(v *CustomMetric) pulumi.BoolOutput { return v.IsGeospatial }).(pulumi.BoolOutput)
}

// Determines whether the metric is related to the model or deployment.
func (o CustomMetricOutput) IsModelSpecific() pulumi.BoolOutput {
	return o.ApplyT(func(v *CustomMetric) pulumi.BoolOutput { return v.IsModelSpecific }).(pulumi.BoolOutput)
}

// Name of the Custom Metric.
func (o CustomMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A Custom Metric sample source when reading values from columnar dataset.
func (o CustomMetricOutput) SampleCount() CustomMetricSampleCountPtrOutput {
	return o.ApplyT(func(v *CustomMetric) CustomMetricSampleCountPtrOutput { return v.SampleCount }).(CustomMetricSampleCountPtrOutput)
}

// A Custom Metric timestamp column source when reading values from columnar dataset.
func (o CustomMetricOutput) Timestamp() CustomMetricTimestampPtrOutput {
	return o.ApplyT(func(v *CustomMetric) CustomMetricTimestampPtrOutput { return v.Timestamp }).(CustomMetricTimestampPtrOutput)
}

// Aggregation type of the Custom Metric.
func (o CustomMetricOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetric) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The units, or the y-axis label, of the given Custom Metric.
func (o CustomMetricOutput) Units() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetric) pulumi.StringOutput { return v.Units }).(pulumi.StringOutput)
}

// A Custom Metric value source when reading values from columnar dataset.
func (o CustomMetricOutput) Value() CustomMetricValuePtrOutput {
	return o.ApplyT(func(v *CustomMetric) CustomMetricValuePtrOutput { return v.Value }).(CustomMetricValuePtrOutput)
}

type CustomMetricArrayOutput struct{ *pulumi.OutputState }

func (CustomMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomMetric)(nil)).Elem()
}

func (o CustomMetricArrayOutput) ToCustomMetricArrayOutput() CustomMetricArrayOutput {
	return o
}

func (o CustomMetricArrayOutput) ToCustomMetricArrayOutputWithContext(ctx context.Context) CustomMetricArrayOutput {
	return o
}

func (o CustomMetricArrayOutput) Index(i pulumi.IntInput) CustomMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomMetric {
		return vs[0].([]*CustomMetric)[vs[1].(int)]
	}).(CustomMetricOutput)
}

type CustomMetricMapOutput struct{ *pulumi.OutputState }

func (CustomMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomMetric)(nil)).Elem()
}

func (o CustomMetricMapOutput) ToCustomMetricMapOutput() CustomMetricMapOutput {
	return o
}

func (o CustomMetricMapOutput) ToCustomMetricMapOutputWithContext(ctx context.Context) CustomMetricMapOutput {
	return o
}

func (o CustomMetricMapOutput) MapIndex(k pulumi.StringInput) CustomMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomMetric {
		return vs[0].(map[string]*CustomMetric)[vs[1].(string)]
	}).(CustomMetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMetricInput)(nil)).Elem(), &CustomMetric{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMetricArrayInput)(nil)).Elem(), CustomMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMetricMapInput)(nil)).Elem(), CustomMetricMap{})
	pulumi.RegisterOutputType(CustomMetricOutput{})
	pulumi.RegisterOutputType(CustomMetricArrayOutput{})
	pulumi.RegisterOutputType(CustomMetricMapOutput{})
}
