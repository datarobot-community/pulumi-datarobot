// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ChatApplication struct {
	pulumi.CustomResourceState

	// The URL of the Application.
	ApplicationUrl pulumi.StringOutput `pulumi:"applicationUrl"`
	// The deployment ID of the Application.
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// The name of the Application.
	Name pulumi.StringOutput `pulumi:"name"`
	// The version ID of the Application.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewChatApplication registers a new resource with the given unique name, arguments, and options.
func NewChatApplication(ctx *pulumi.Context,
	name string, args *ChatApplicationArgs, opts ...pulumi.ResourceOption) (*ChatApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChatApplication
	err := ctx.RegisterResource("datarobot:index/chatApplication:ChatApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChatApplication gets an existing ChatApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChatApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChatApplicationState, opts ...pulumi.ResourceOption) (*ChatApplication, error) {
	var resource ChatApplication
	err := ctx.ReadResource("datarobot:index/chatApplication:ChatApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChatApplication resources.
type chatApplicationState struct {
	// The URL of the Application.
	ApplicationUrl *string `pulumi:"applicationUrl"`
	// The deployment ID of the Application.
	DeploymentId *string `pulumi:"deploymentId"`
	// The name of the Application.
	Name *string `pulumi:"name"`
	// The version ID of the Application.
	VersionId *string `pulumi:"versionId"`
}

type ChatApplicationState struct {
	// The URL of the Application.
	ApplicationUrl pulumi.StringPtrInput
	// The deployment ID of the Application.
	DeploymentId pulumi.StringPtrInput
	// The name of the Application.
	Name pulumi.StringPtrInput
	// The version ID of the Application.
	VersionId pulumi.StringPtrInput
}

func (ChatApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*chatApplicationState)(nil)).Elem()
}

type chatApplicationArgs struct {
	// The deployment ID of the Application.
	DeploymentId string `pulumi:"deploymentId"`
	// The name of the Application.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ChatApplication resource.
type ChatApplicationArgs struct {
	// The deployment ID of the Application.
	DeploymentId pulumi.StringInput
	// The name of the Application.
	Name pulumi.StringPtrInput
}

func (ChatApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chatApplicationArgs)(nil)).Elem()
}

type ChatApplicationInput interface {
	pulumi.Input

	ToChatApplicationOutput() ChatApplicationOutput
	ToChatApplicationOutputWithContext(ctx context.Context) ChatApplicationOutput
}

func (*ChatApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**ChatApplication)(nil)).Elem()
}

func (i *ChatApplication) ToChatApplicationOutput() ChatApplicationOutput {
	return i.ToChatApplicationOutputWithContext(context.Background())
}

func (i *ChatApplication) ToChatApplicationOutputWithContext(ctx context.Context) ChatApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChatApplicationOutput)
}

// ChatApplicationArrayInput is an input type that accepts ChatApplicationArray and ChatApplicationArrayOutput values.
// You can construct a concrete instance of `ChatApplicationArrayInput` via:
//
//	ChatApplicationArray{ ChatApplicationArgs{...} }
type ChatApplicationArrayInput interface {
	pulumi.Input

	ToChatApplicationArrayOutput() ChatApplicationArrayOutput
	ToChatApplicationArrayOutputWithContext(context.Context) ChatApplicationArrayOutput
}

type ChatApplicationArray []ChatApplicationInput

func (ChatApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChatApplication)(nil)).Elem()
}

func (i ChatApplicationArray) ToChatApplicationArrayOutput() ChatApplicationArrayOutput {
	return i.ToChatApplicationArrayOutputWithContext(context.Background())
}

func (i ChatApplicationArray) ToChatApplicationArrayOutputWithContext(ctx context.Context) ChatApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChatApplicationArrayOutput)
}

// ChatApplicationMapInput is an input type that accepts ChatApplicationMap and ChatApplicationMapOutput values.
// You can construct a concrete instance of `ChatApplicationMapInput` via:
//
//	ChatApplicationMap{ "key": ChatApplicationArgs{...} }
type ChatApplicationMapInput interface {
	pulumi.Input

	ToChatApplicationMapOutput() ChatApplicationMapOutput
	ToChatApplicationMapOutputWithContext(context.Context) ChatApplicationMapOutput
}

type ChatApplicationMap map[string]ChatApplicationInput

func (ChatApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChatApplication)(nil)).Elem()
}

func (i ChatApplicationMap) ToChatApplicationMapOutput() ChatApplicationMapOutput {
	return i.ToChatApplicationMapOutputWithContext(context.Background())
}

func (i ChatApplicationMap) ToChatApplicationMapOutputWithContext(ctx context.Context) ChatApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChatApplicationMapOutput)
}

type ChatApplicationOutput struct{ *pulumi.OutputState }

func (ChatApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChatApplication)(nil)).Elem()
}

func (o ChatApplicationOutput) ToChatApplicationOutput() ChatApplicationOutput {
	return o
}

func (o ChatApplicationOutput) ToChatApplicationOutputWithContext(ctx context.Context) ChatApplicationOutput {
	return o
}

// The URL of the Application.
func (o ChatApplicationOutput) ApplicationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatApplication) pulumi.StringOutput { return v.ApplicationUrl }).(pulumi.StringOutput)
}

// The deployment ID of the Application.
func (o ChatApplicationOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatApplication) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

// The name of the Application.
func (o ChatApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version ID of the Application.
func (o ChatApplicationOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChatApplication) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

type ChatApplicationArrayOutput struct{ *pulumi.OutputState }

func (ChatApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChatApplication)(nil)).Elem()
}

func (o ChatApplicationArrayOutput) ToChatApplicationArrayOutput() ChatApplicationArrayOutput {
	return o
}

func (o ChatApplicationArrayOutput) ToChatApplicationArrayOutputWithContext(ctx context.Context) ChatApplicationArrayOutput {
	return o
}

func (o ChatApplicationArrayOutput) Index(i pulumi.IntInput) ChatApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChatApplication {
		return vs[0].([]*ChatApplication)[vs[1].(int)]
	}).(ChatApplicationOutput)
}

type ChatApplicationMapOutput struct{ *pulumi.OutputState }

func (ChatApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChatApplication)(nil)).Elem()
}

func (o ChatApplicationMapOutput) ToChatApplicationMapOutput() ChatApplicationMapOutput {
	return o
}

func (o ChatApplicationMapOutput) ToChatApplicationMapOutputWithContext(ctx context.Context) ChatApplicationMapOutput {
	return o
}

func (o ChatApplicationMapOutput) MapIndex(k pulumi.StringInput) ChatApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChatApplication {
		return vs[0].(map[string]*ChatApplication)[vs[1].(string)]
	}).(ChatApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChatApplicationInput)(nil)).Elem(), &ChatApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChatApplicationArrayInput)(nil)).Elem(), ChatApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChatApplicationMapInput)(nil)).Elem(), ChatApplicationMap{})
	pulumi.RegisterOutputType(ChatApplicationOutput{})
	pulumi.RegisterOutputType(ChatApplicationArrayOutput{})
	pulumi.RegisterOutputType(ChatApplicationMapOutput{})
}
