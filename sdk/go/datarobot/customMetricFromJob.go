// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datarobot

import (
	"context"
	"reflect"

	"errors"
	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Custom Metric From Job
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/datarobot-community/pulumi-datarobot/sdk/go/datarobot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := datarobot.NewCustomMetricFromJob(ctx, "example", &datarobot.CustomMetricFromJobArgs{
//				DeploymentId: pulumi.Any(datarobot_deployment.Example.Id),
//				CustomJobId:  pulumi.Any(datarobot_custom_metric_job.Example.Id),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("exampleId", example.ID())
//			return nil
//		})
//	}
//
// ```
type CustomMetricFromJob struct {
	pulumi.CustomResourceState

	// Baseline value for the metric.
	BaselineValue pulumi.Float64PtrOutput `pulumi:"baselineValue"`
	// Batch ID source when reading values from columnar dataset like a file.
	Batch CustomMetricFromJobBatchPtrOutput `pulumi:"batch"`
	// ID of the Custom Job.
	CustomJobId pulumi.StringOutput `pulumi:"customJobId"`
	// ID of the Deployment.
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// Description of the metric.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the metric.
	Name pulumi.StringOutput `pulumi:"name"`
	// Additional parameters to be injected into the Metric Job at runtime.
	ParameterOverrides CustomMetricFromJobParameterOverrideArrayOutput `pulumi:"parameterOverrides"`
	// Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.
	SampleCount CustomMetricFromJobSampleCountPtrOutput `pulumi:"sampleCount"`
	// Defines at what intervals the metric job should run.
	Schedule CustomMetricFromJobSchedulePtrOutput `pulumi:"schedule"`
	// Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.
	Timestamp CustomMetricFromJobTimestampPtrOutput `pulumi:"timestamp"`
	// Value source when reading values from columnar dataset like a file.
	Value CustomMetricFromJobValuePtrOutput `pulumi:"value"`
}

// NewCustomMetricFromJob registers a new resource with the given unique name, arguments, and options.
func NewCustomMetricFromJob(ctx *pulumi.Context,
	name string, args *CustomMetricFromJobArgs, opts ...pulumi.ResourceOption) (*CustomMetricFromJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomJobId == nil {
		return nil, errors.New("invalid value for required argument 'CustomJobId'")
	}
	if args.DeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomMetricFromJob
	err := ctx.RegisterResource("datarobot:index/customMetricFromJob:CustomMetricFromJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomMetricFromJob gets an existing CustomMetricFromJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomMetricFromJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomMetricFromJobState, opts ...pulumi.ResourceOption) (*CustomMetricFromJob, error) {
	var resource CustomMetricFromJob
	err := ctx.ReadResource("datarobot:index/customMetricFromJob:CustomMetricFromJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomMetricFromJob resources.
type customMetricFromJobState struct {
	// Baseline value for the metric.
	BaselineValue *float64 `pulumi:"baselineValue"`
	// Batch ID source when reading values from columnar dataset like a file.
	Batch *CustomMetricFromJobBatch `pulumi:"batch"`
	// ID of the Custom Job.
	CustomJobId *string `pulumi:"customJobId"`
	// ID of the Deployment.
	DeploymentId *string `pulumi:"deploymentId"`
	// Description of the metric.
	Description *string `pulumi:"description"`
	// Name of the metric.
	Name *string `pulumi:"name"`
	// Additional parameters to be injected into the Metric Job at runtime.
	ParameterOverrides []CustomMetricFromJobParameterOverride `pulumi:"parameterOverrides"`
	// Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.
	SampleCount *CustomMetricFromJobSampleCount `pulumi:"sampleCount"`
	// Defines at what intervals the metric job should run.
	Schedule *CustomMetricFromJobSchedule `pulumi:"schedule"`
	// Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.
	Timestamp *CustomMetricFromJobTimestamp `pulumi:"timestamp"`
	// Value source when reading values from columnar dataset like a file.
	Value *CustomMetricFromJobValue `pulumi:"value"`
}

type CustomMetricFromJobState struct {
	// Baseline value for the metric.
	BaselineValue pulumi.Float64PtrInput
	// Batch ID source when reading values from columnar dataset like a file.
	Batch CustomMetricFromJobBatchPtrInput
	// ID of the Custom Job.
	CustomJobId pulumi.StringPtrInput
	// ID of the Deployment.
	DeploymentId pulumi.StringPtrInput
	// Description of the metric.
	Description pulumi.StringPtrInput
	// Name of the metric.
	Name pulumi.StringPtrInput
	// Additional parameters to be injected into the Metric Job at runtime.
	ParameterOverrides CustomMetricFromJobParameterOverrideArrayInput
	// Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.
	SampleCount CustomMetricFromJobSampleCountPtrInput
	// Defines at what intervals the metric job should run.
	Schedule CustomMetricFromJobSchedulePtrInput
	// Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.
	Timestamp CustomMetricFromJobTimestampPtrInput
	// Value source when reading values from columnar dataset like a file.
	Value CustomMetricFromJobValuePtrInput
}

func (CustomMetricFromJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*customMetricFromJobState)(nil)).Elem()
}

type customMetricFromJobArgs struct {
	// Baseline value for the metric.
	BaselineValue *float64 `pulumi:"baselineValue"`
	// Batch ID source when reading values from columnar dataset like a file.
	Batch *CustomMetricFromJobBatch `pulumi:"batch"`
	// ID of the Custom Job.
	CustomJobId string `pulumi:"customJobId"`
	// ID of the Deployment.
	DeploymentId string `pulumi:"deploymentId"`
	// Description of the metric.
	Description *string `pulumi:"description"`
	// Name of the metric.
	Name *string `pulumi:"name"`
	// Additional parameters to be injected into the Metric Job at runtime.
	ParameterOverrides []CustomMetricFromJobParameterOverride `pulumi:"parameterOverrides"`
	// Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.
	SampleCount *CustomMetricFromJobSampleCount `pulumi:"sampleCount"`
	// Defines at what intervals the metric job should run.
	Schedule *CustomMetricFromJobSchedule `pulumi:"schedule"`
	// Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.
	Timestamp *CustomMetricFromJobTimestamp `pulumi:"timestamp"`
	// Value source when reading values from columnar dataset like a file.
	Value *CustomMetricFromJobValue `pulumi:"value"`
}

// The set of arguments for constructing a CustomMetricFromJob resource.
type CustomMetricFromJobArgs struct {
	// Baseline value for the metric.
	BaselineValue pulumi.Float64PtrInput
	// Batch ID source when reading values from columnar dataset like a file.
	Batch CustomMetricFromJobBatchPtrInput
	// ID of the Custom Job.
	CustomJobId pulumi.StringInput
	// ID of the Deployment.
	DeploymentId pulumi.StringInput
	// Description of the metric.
	Description pulumi.StringPtrInput
	// Name of the metric.
	Name pulumi.StringPtrInput
	// Additional parameters to be injected into the Metric Job at runtime.
	ParameterOverrides CustomMetricFromJobParameterOverrideArrayInput
	// Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.
	SampleCount CustomMetricFromJobSampleCountPtrInput
	// Defines at what intervals the metric job should run.
	Schedule CustomMetricFromJobSchedulePtrInput
	// Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.
	Timestamp CustomMetricFromJobTimestampPtrInput
	// Value source when reading values from columnar dataset like a file.
	Value CustomMetricFromJobValuePtrInput
}

func (CustomMetricFromJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customMetricFromJobArgs)(nil)).Elem()
}

type CustomMetricFromJobInput interface {
	pulumi.Input

	ToCustomMetricFromJobOutput() CustomMetricFromJobOutput
	ToCustomMetricFromJobOutputWithContext(ctx context.Context) CustomMetricFromJobOutput
}

func (*CustomMetricFromJob) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMetricFromJob)(nil)).Elem()
}

func (i *CustomMetricFromJob) ToCustomMetricFromJobOutput() CustomMetricFromJobOutput {
	return i.ToCustomMetricFromJobOutputWithContext(context.Background())
}

func (i *CustomMetricFromJob) ToCustomMetricFromJobOutputWithContext(ctx context.Context) CustomMetricFromJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricFromJobOutput)
}

// CustomMetricFromJobArrayInput is an input type that accepts CustomMetricFromJobArray and CustomMetricFromJobArrayOutput values.
// You can construct a concrete instance of `CustomMetricFromJobArrayInput` via:
//
//	CustomMetricFromJobArray{ CustomMetricFromJobArgs{...} }
type CustomMetricFromJobArrayInput interface {
	pulumi.Input

	ToCustomMetricFromJobArrayOutput() CustomMetricFromJobArrayOutput
	ToCustomMetricFromJobArrayOutputWithContext(context.Context) CustomMetricFromJobArrayOutput
}

type CustomMetricFromJobArray []CustomMetricFromJobInput

func (CustomMetricFromJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomMetricFromJob)(nil)).Elem()
}

func (i CustomMetricFromJobArray) ToCustomMetricFromJobArrayOutput() CustomMetricFromJobArrayOutput {
	return i.ToCustomMetricFromJobArrayOutputWithContext(context.Background())
}

func (i CustomMetricFromJobArray) ToCustomMetricFromJobArrayOutputWithContext(ctx context.Context) CustomMetricFromJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricFromJobArrayOutput)
}

// CustomMetricFromJobMapInput is an input type that accepts CustomMetricFromJobMap and CustomMetricFromJobMapOutput values.
// You can construct a concrete instance of `CustomMetricFromJobMapInput` via:
//
//	CustomMetricFromJobMap{ "key": CustomMetricFromJobArgs{...} }
type CustomMetricFromJobMapInput interface {
	pulumi.Input

	ToCustomMetricFromJobMapOutput() CustomMetricFromJobMapOutput
	ToCustomMetricFromJobMapOutputWithContext(context.Context) CustomMetricFromJobMapOutput
}

type CustomMetricFromJobMap map[string]CustomMetricFromJobInput

func (CustomMetricFromJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomMetricFromJob)(nil)).Elem()
}

func (i CustomMetricFromJobMap) ToCustomMetricFromJobMapOutput() CustomMetricFromJobMapOutput {
	return i.ToCustomMetricFromJobMapOutputWithContext(context.Background())
}

func (i CustomMetricFromJobMap) ToCustomMetricFromJobMapOutputWithContext(ctx context.Context) CustomMetricFromJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricFromJobMapOutput)
}

type CustomMetricFromJobOutput struct{ *pulumi.OutputState }

func (CustomMetricFromJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMetricFromJob)(nil)).Elem()
}

func (o CustomMetricFromJobOutput) ToCustomMetricFromJobOutput() CustomMetricFromJobOutput {
	return o
}

func (o CustomMetricFromJobOutput) ToCustomMetricFromJobOutputWithContext(ctx context.Context) CustomMetricFromJobOutput {
	return o
}

// Baseline value for the metric.
func (o CustomMetricFromJobOutput) BaselineValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) pulumi.Float64PtrOutput { return v.BaselineValue }).(pulumi.Float64PtrOutput)
}

// Batch ID source when reading values from columnar dataset like a file.
func (o CustomMetricFromJobOutput) Batch() CustomMetricFromJobBatchPtrOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) CustomMetricFromJobBatchPtrOutput { return v.Batch }).(CustomMetricFromJobBatchPtrOutput)
}

// ID of the Custom Job.
func (o CustomMetricFromJobOutput) CustomJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) pulumi.StringOutput { return v.CustomJobId }).(pulumi.StringOutput)
}

// ID of the Deployment.
func (o CustomMetricFromJobOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

// Description of the metric.
func (o CustomMetricFromJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the metric.
func (o CustomMetricFromJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Additional parameters to be injected into the Metric Job at runtime.
func (o CustomMetricFromJobOutput) ParameterOverrides() CustomMetricFromJobParameterOverrideArrayOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) CustomMetricFromJobParameterOverrideArrayOutput {
		return v.ParameterOverrides
	}).(CustomMetricFromJobParameterOverrideArrayOutput)
}

// Points to a weight column if users provide pre-aggregated metric values. Used with columnar datasets.
func (o CustomMetricFromJobOutput) SampleCount() CustomMetricFromJobSampleCountPtrOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) CustomMetricFromJobSampleCountPtrOutput { return v.SampleCount }).(CustomMetricFromJobSampleCountPtrOutput)
}

// Defines at what intervals the metric job should run.
func (o CustomMetricFromJobOutput) Schedule() CustomMetricFromJobSchedulePtrOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) CustomMetricFromJobSchedulePtrOutput { return v.Schedule }).(CustomMetricFromJobSchedulePtrOutput)
}

// Timestamp spoofing when reading values from file, like dataset. By default, we replicate pd.to_datetime formatting behaviour.
func (o CustomMetricFromJobOutput) Timestamp() CustomMetricFromJobTimestampPtrOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) CustomMetricFromJobTimestampPtrOutput { return v.Timestamp }).(CustomMetricFromJobTimestampPtrOutput)
}

// Value source when reading values from columnar dataset like a file.
func (o CustomMetricFromJobOutput) Value() CustomMetricFromJobValuePtrOutput {
	return o.ApplyT(func(v *CustomMetricFromJob) CustomMetricFromJobValuePtrOutput { return v.Value }).(CustomMetricFromJobValuePtrOutput)
}

type CustomMetricFromJobArrayOutput struct{ *pulumi.OutputState }

func (CustomMetricFromJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomMetricFromJob)(nil)).Elem()
}

func (o CustomMetricFromJobArrayOutput) ToCustomMetricFromJobArrayOutput() CustomMetricFromJobArrayOutput {
	return o
}

func (o CustomMetricFromJobArrayOutput) ToCustomMetricFromJobArrayOutputWithContext(ctx context.Context) CustomMetricFromJobArrayOutput {
	return o
}

func (o CustomMetricFromJobArrayOutput) Index(i pulumi.IntInput) CustomMetricFromJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomMetricFromJob {
		return vs[0].([]*CustomMetricFromJob)[vs[1].(int)]
	}).(CustomMetricFromJobOutput)
}

type CustomMetricFromJobMapOutput struct{ *pulumi.OutputState }

func (CustomMetricFromJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomMetricFromJob)(nil)).Elem()
}

func (o CustomMetricFromJobMapOutput) ToCustomMetricFromJobMapOutput() CustomMetricFromJobMapOutput {
	return o
}

func (o CustomMetricFromJobMapOutput) ToCustomMetricFromJobMapOutputWithContext(ctx context.Context) CustomMetricFromJobMapOutput {
	return o
}

func (o CustomMetricFromJobMapOutput) MapIndex(k pulumi.StringInput) CustomMetricFromJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomMetricFromJob {
		return vs[0].(map[string]*CustomMetricFromJob)[vs[1].(string)]
	}).(CustomMetricFromJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMetricFromJobInput)(nil)).Elem(), &CustomMetricFromJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMetricFromJobArrayInput)(nil)).Elem(), CustomMetricFromJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMetricFromJobMapInput)(nil)).Elem(), CustomMetricFromJobMap{})
	pulumi.RegisterOutputType(CustomMetricFromJobOutput{})
	pulumi.RegisterOutputType(CustomMetricFromJobArrayOutput{})
	pulumi.RegisterOutputType(CustomMetricFromJobMapOutput{})
}
