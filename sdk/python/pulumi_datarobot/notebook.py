# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NotebookArgs', 'Notebook']

@pulumi.input_type
class NotebookArgs:
    def __init__(__self__, *,
                 file_path: pulumi.Input[str],
                 use_case_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Notebook resource.
        :param pulumi.Input[str] file_path: The path to the .ipynb file to import.
        :param pulumi.Input[str] use_case_id: The Use Case ID to add the Notebook to.
        """
        pulumi.set(__self__, "file_path", file_path)
        if use_case_id is not None:
            pulumi.set(__self__, "use_case_id", use_case_id)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> pulumi.Input[str]:
        """
        The path to the .ipynb file to import.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="useCaseId")
    def use_case_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Use Case ID to add the Notebook to.
        """
        return pulumi.get(self, "use_case_id")

    @use_case_id.setter
    def use_case_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_case_id", value)


@pulumi.input_type
class _NotebookState:
    def __init__(__self__, *,
                 file_hash: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 use_case_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Notebook resources.
        :param pulumi.Input[str] file_hash: The SHA-256 hash of the file contents.
        :param pulumi.Input[str] file_path: The path to the .ipynb file to import.
        :param pulumi.Input[str] name: The name of the Notebook.
        :param pulumi.Input[str] url: The URL to the Notebook.
        :param pulumi.Input[str] use_case_id: The Use Case ID to add the Notebook to.
        """
        if file_hash is not None:
            pulumi.set(__self__, "file_hash", file_hash)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if use_case_id is not None:
            pulumi.set(__self__, "use_case_id", use_case_id)

    @property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> Optional[pulumi.Input[str]]:
        """
        The SHA-256 hash of the file contents.
        """
        return pulumi.get(self, "file_hash")

    @file_hash.setter
    def file_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_hash", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the .ipynb file to import.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Notebook.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to the Notebook.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="useCaseId")
    def use_case_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Use Case ID to add the Notebook to.
        """
        return pulumi.get(self, "use_case_id")

    @use_case_id.setter
    def use_case_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_case_id", value)


class Notebook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 use_case_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Notebook resource for importing and managing Jupyter notebooks in DataRobot.

        **NOTE**

        The synchronization of the file hash is one way. The provider will track changes of the Notebook file on disk
        and update _only_ when that changes. If the remote Notebook changes, the provider will not update the local file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datarobot as datarobot

        example_use_case = datarobot.UseCase("exampleUseCase")
        example_notebook = datarobot.Notebook("exampleNotebook",
            file_path="/path/to/your/notebook.ipynb",
            use_case_id=example_use_case.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] file_path: The path to the .ipynb file to import.
        :param pulumi.Input[str] use_case_id: The Use Case ID to add the Notebook to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotebookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Notebook resource for importing and managing Jupyter notebooks in DataRobot.

        **NOTE**

        The synchronization of the file hash is one way. The provider will track changes of the Notebook file on disk
        and update _only_ when that changes. If the remote Notebook changes, the provider will not update the local file.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datarobot as datarobot

        example_use_case = datarobot.UseCase("exampleUseCase")
        example_notebook = datarobot.Notebook("exampleNotebook",
            file_path="/path/to/your/notebook.ipynb",
            use_case_id=example_use_case.id)
        ```

        :param str resource_name: The name of the resource.
        :param NotebookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotebookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 use_case_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotebookArgs.__new__(NotebookArgs)

            if file_path is None and not opts.urn:
                raise TypeError("Missing required property 'file_path'")
            __props__.__dict__["file_path"] = file_path
            __props__.__dict__["use_case_id"] = use_case_id
            __props__.__dict__["file_hash"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["url"] = None
        super(Notebook, __self__).__init__(
            'datarobot:index/notebook:Notebook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            file_hash: Optional[pulumi.Input[str]] = None,
            file_path: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            use_case_id: Optional[pulumi.Input[str]] = None) -> 'Notebook':
        """
        Get an existing Notebook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] file_hash: The SHA-256 hash of the file contents.
        :param pulumi.Input[str] file_path: The path to the .ipynb file to import.
        :param pulumi.Input[str] name: The name of the Notebook.
        :param pulumi.Input[str] url: The URL to the Notebook.
        :param pulumi.Input[str] use_case_id: The Use Case ID to add the Notebook to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotebookState.__new__(_NotebookState)

        __props__.__dict__["file_hash"] = file_hash
        __props__.__dict__["file_path"] = file_path
        __props__.__dict__["name"] = name
        __props__.__dict__["url"] = url
        __props__.__dict__["use_case_id"] = use_case_id
        return Notebook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> pulumi.Output[str]:
        """
        The SHA-256 hash of the file contents.
        """
        return pulumi.get(self, "file_hash")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> pulumi.Output[str]:
        """
        The path to the .ipynb file to import.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Notebook.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL to the Notebook.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="useCaseId")
    def use_case_id(self) -> pulumi.Output[Optional[str]]:
        """
        The Use Case ID to add the Notebook to.
        """
        return pulumi.get(self, "use_case_id")

