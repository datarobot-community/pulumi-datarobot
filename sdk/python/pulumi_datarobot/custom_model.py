# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomModelArgs', 'CustomModel']

@pulumi.input_type
class CustomModelArgs:
    def __init__(__self__, *,
                 base_environment_id: Optional[pulumi.Input[str]] = None,
                 base_environment_name: Optional[pulumi.Input[str]] = None,
                 base_environment_version_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 guard_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelGuardConfigurationArgs']]]] = None,
                 is_proxy: Optional[pulumi.Input[bool]] = None,
                 local_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_class_label: Optional[pulumi.Input[str]] = None,
                 overall_moderation_configuration: Optional[pulumi.Input['CustomModelOverallModerationConfigurationArgs']] = None,
                 positive_class_label: Optional[pulumi.Input[str]] = None,
                 runtime_parameter_values: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelRuntimeParameterValueArgs']]]] = None,
                 source_llm_blueprint_id: Optional[pulumi.Input[str]] = None,
                 source_remote_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelSourceRemoteRepositoryArgs']]]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomModel resource.
        :param pulumi.Input[str] base_environment_id: The ID of the base environment for the Custom Model.
        :param pulumi.Input[str] base_environment_name: The name of the base environment for the Custom Model.
        :param pulumi.Input[str] base_environment_version_id: The ID of the base environment version for the Custom Model.
        :param pulumi.Input[str] description: The description of the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input['CustomModelGuardConfigurationArgs']]] guard_configurations: The guard configurations for the Custom Model.
        :param pulumi.Input[bool] is_proxy: The flag indicating if the Custom Model is a proxy model.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_files: The list of local file paths used to build the Custom Model.
        :param pulumi.Input[str] name: The name of the Custom Model.
        :param pulumi.Input[str] negative_class_label: The negative class label of the Custom Model.
        :param pulumi.Input['CustomModelOverallModerationConfigurationArgs'] overall_moderation_configuration: The overall moderation configuration for the Custom Model.
        :param pulumi.Input[str] positive_class_label: The positive class label of the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input['CustomModelRuntimeParameterValueArgs']]] runtime_parameter_values: The runtime parameter values for the Custom Model.
        :param pulumi.Input[str] source_llm_blueprint_id: The ID of the source LLM Blueprint for the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input['CustomModelSourceRemoteRepositoryArgs']]] source_remote_repositories: The source remote repositories for the Custom Model.
        :param pulumi.Input[str] target: The target of the Custom Model.
        :param pulumi.Input[str] target_type: The target type of the Custom Model.
        """
        if base_environment_id is not None:
            pulumi.set(__self__, "base_environment_id", base_environment_id)
        if base_environment_name is not None:
            pulumi.set(__self__, "base_environment_name", base_environment_name)
        if base_environment_version_id is not None:
            pulumi.set(__self__, "base_environment_version_id", base_environment_version_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if guard_configurations is not None:
            pulumi.set(__self__, "guard_configurations", guard_configurations)
        if is_proxy is not None:
            pulumi.set(__self__, "is_proxy", is_proxy)
        if local_files is not None:
            pulumi.set(__self__, "local_files", local_files)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negative_class_label is not None:
            pulumi.set(__self__, "negative_class_label", negative_class_label)
        if overall_moderation_configuration is not None:
            pulumi.set(__self__, "overall_moderation_configuration", overall_moderation_configuration)
        if positive_class_label is not None:
            pulumi.set(__self__, "positive_class_label", positive_class_label)
        if runtime_parameter_values is not None:
            pulumi.set(__self__, "runtime_parameter_values", runtime_parameter_values)
        if source_llm_blueprint_id is not None:
            pulumi.set(__self__, "source_llm_blueprint_id", source_llm_blueprint_id)
        if source_remote_repositories is not None:
            pulumi.set(__self__, "source_remote_repositories", source_remote_repositories)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter(name="baseEnvironmentId")
    def base_environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the base environment for the Custom Model.
        """
        return pulumi.get(self, "base_environment_id")

    @base_environment_id.setter
    def base_environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_environment_id", value)

    @property
    @pulumi.getter(name="baseEnvironmentName")
    def base_environment_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the base environment for the Custom Model.
        """
        return pulumi.get(self, "base_environment_name")

    @base_environment_name.setter
    def base_environment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_environment_name", value)

    @property
    @pulumi.getter(name="baseEnvironmentVersionId")
    def base_environment_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the base environment version for the Custom Model.
        """
        return pulumi.get(self, "base_environment_version_id")

    @base_environment_version_id.setter
    def base_environment_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_environment_version_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Custom Model.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="guardConfigurations")
    def guard_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelGuardConfigurationArgs']]]]:
        """
        The guard configurations for the Custom Model.
        """
        return pulumi.get(self, "guard_configurations")

    @guard_configurations.setter
    def guard_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelGuardConfigurationArgs']]]]):
        pulumi.set(self, "guard_configurations", value)

    @property
    @pulumi.getter(name="isProxy")
    def is_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag indicating if the Custom Model is a proxy model.
        """
        return pulumi.get(self, "is_proxy")

    @is_proxy.setter
    def is_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_proxy", value)

    @property
    @pulumi.getter(name="localFiles")
    def local_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of local file paths used to build the Custom Model.
        """
        return pulumi.get(self, "local_files")

    @local_files.setter
    def local_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "local_files", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Custom Model.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="negativeClassLabel")
    def negative_class_label(self) -> Optional[pulumi.Input[str]]:
        """
        The negative class label of the Custom Model.
        """
        return pulumi.get(self, "negative_class_label")

    @negative_class_label.setter
    def negative_class_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "negative_class_label", value)

    @property
    @pulumi.getter(name="overallModerationConfiguration")
    def overall_moderation_configuration(self) -> Optional[pulumi.Input['CustomModelOverallModerationConfigurationArgs']]:
        """
        The overall moderation configuration for the Custom Model.
        """
        return pulumi.get(self, "overall_moderation_configuration")

    @overall_moderation_configuration.setter
    def overall_moderation_configuration(self, value: Optional[pulumi.Input['CustomModelOverallModerationConfigurationArgs']]):
        pulumi.set(self, "overall_moderation_configuration", value)

    @property
    @pulumi.getter(name="positiveClassLabel")
    def positive_class_label(self) -> Optional[pulumi.Input[str]]:
        """
        The positive class label of the Custom Model.
        """
        return pulumi.get(self, "positive_class_label")

    @positive_class_label.setter
    def positive_class_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "positive_class_label", value)

    @property
    @pulumi.getter(name="runtimeParameterValues")
    def runtime_parameter_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelRuntimeParameterValueArgs']]]]:
        """
        The runtime parameter values for the Custom Model.
        """
        return pulumi.get(self, "runtime_parameter_values")

    @runtime_parameter_values.setter
    def runtime_parameter_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelRuntimeParameterValueArgs']]]]):
        pulumi.set(self, "runtime_parameter_values", value)

    @property
    @pulumi.getter(name="sourceLlmBlueprintId")
    def source_llm_blueprint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the source LLM Blueprint for the Custom Model.
        """
        return pulumi.get(self, "source_llm_blueprint_id")

    @source_llm_blueprint_id.setter
    def source_llm_blueprint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_llm_blueprint_id", value)

    @property
    @pulumi.getter(name="sourceRemoteRepositories")
    def source_remote_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelSourceRemoteRepositoryArgs']]]]:
        """
        The source remote repositories for the Custom Model.
        """
        return pulumi.get(self, "source_remote_repositories")

    @source_remote_repositories.setter
    def source_remote_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelSourceRemoteRepositoryArgs']]]]):
        pulumi.set(self, "source_remote_repositories", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of the Custom Model.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        The target type of the Custom Model.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)


@pulumi.input_type
class _CustomModelState:
    def __init__(__self__, *,
                 base_environment_id: Optional[pulumi.Input[str]] = None,
                 base_environment_name: Optional[pulumi.Input[str]] = None,
                 base_environment_version_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 guard_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelGuardConfigurationArgs']]]] = None,
                 is_proxy: Optional[pulumi.Input[bool]] = None,
                 local_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_class_label: Optional[pulumi.Input[str]] = None,
                 overall_moderation_configuration: Optional[pulumi.Input['CustomModelOverallModerationConfigurationArgs']] = None,
                 positive_class_label: Optional[pulumi.Input[str]] = None,
                 runtime_parameter_values: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelRuntimeParameterValueArgs']]]] = None,
                 source_llm_blueprint_id: Optional[pulumi.Input[str]] = None,
                 source_remote_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelSourceRemoteRepositoryArgs']]]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 version_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CustomModel resources.
        :param pulumi.Input[str] base_environment_id: The ID of the base environment for the Custom Model.
        :param pulumi.Input[str] base_environment_name: The name of the base environment for the Custom Model.
        :param pulumi.Input[str] base_environment_version_id: The ID of the base environment version for the Custom Model.
        :param pulumi.Input[str] description: The description of the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input['CustomModelGuardConfigurationArgs']]] guard_configurations: The guard configurations for the Custom Model.
        :param pulumi.Input[bool] is_proxy: The flag indicating if the Custom Model is a proxy model.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_files: The list of local file paths used to build the Custom Model.
        :param pulumi.Input[str] name: The name of the Custom Model.
        :param pulumi.Input[str] negative_class_label: The negative class label of the Custom Model.
        :param pulumi.Input['CustomModelOverallModerationConfigurationArgs'] overall_moderation_configuration: The overall moderation configuration for the Custom Model.
        :param pulumi.Input[str] positive_class_label: The positive class label of the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input['CustomModelRuntimeParameterValueArgs']]] runtime_parameter_values: The runtime parameter values for the Custom Model.
        :param pulumi.Input[str] source_llm_blueprint_id: The ID of the source LLM Blueprint for the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input['CustomModelSourceRemoteRepositoryArgs']]] source_remote_repositories: The source remote repositories for the Custom Model.
        :param pulumi.Input[str] target: The target of the Custom Model.
        :param pulumi.Input[str] target_type: The target type of the Custom Model.
        :param pulumi.Input[str] version_id: The ID of the latest Custom Model version.
        """
        if base_environment_id is not None:
            pulumi.set(__self__, "base_environment_id", base_environment_id)
        if base_environment_name is not None:
            pulumi.set(__self__, "base_environment_name", base_environment_name)
        if base_environment_version_id is not None:
            pulumi.set(__self__, "base_environment_version_id", base_environment_version_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if guard_configurations is not None:
            pulumi.set(__self__, "guard_configurations", guard_configurations)
        if is_proxy is not None:
            pulumi.set(__self__, "is_proxy", is_proxy)
        if local_files is not None:
            pulumi.set(__self__, "local_files", local_files)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negative_class_label is not None:
            pulumi.set(__self__, "negative_class_label", negative_class_label)
        if overall_moderation_configuration is not None:
            pulumi.set(__self__, "overall_moderation_configuration", overall_moderation_configuration)
        if positive_class_label is not None:
            pulumi.set(__self__, "positive_class_label", positive_class_label)
        if runtime_parameter_values is not None:
            pulumi.set(__self__, "runtime_parameter_values", runtime_parameter_values)
        if source_llm_blueprint_id is not None:
            pulumi.set(__self__, "source_llm_blueprint_id", source_llm_blueprint_id)
        if source_remote_repositories is not None:
            pulumi.set(__self__, "source_remote_repositories", source_remote_repositories)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="baseEnvironmentId")
    def base_environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the base environment for the Custom Model.
        """
        return pulumi.get(self, "base_environment_id")

    @base_environment_id.setter
    def base_environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_environment_id", value)

    @property
    @pulumi.getter(name="baseEnvironmentName")
    def base_environment_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the base environment for the Custom Model.
        """
        return pulumi.get(self, "base_environment_name")

    @base_environment_name.setter
    def base_environment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_environment_name", value)

    @property
    @pulumi.getter(name="baseEnvironmentVersionId")
    def base_environment_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the base environment version for the Custom Model.
        """
        return pulumi.get(self, "base_environment_version_id")

    @base_environment_version_id.setter
    def base_environment_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_environment_version_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Custom Model.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="guardConfigurations")
    def guard_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelGuardConfigurationArgs']]]]:
        """
        The guard configurations for the Custom Model.
        """
        return pulumi.get(self, "guard_configurations")

    @guard_configurations.setter
    def guard_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelGuardConfigurationArgs']]]]):
        pulumi.set(self, "guard_configurations", value)

    @property
    @pulumi.getter(name="isProxy")
    def is_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag indicating if the Custom Model is a proxy model.
        """
        return pulumi.get(self, "is_proxy")

    @is_proxy.setter
    def is_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_proxy", value)

    @property
    @pulumi.getter(name="localFiles")
    def local_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of local file paths used to build the Custom Model.
        """
        return pulumi.get(self, "local_files")

    @local_files.setter
    def local_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "local_files", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Custom Model.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="negativeClassLabel")
    def negative_class_label(self) -> Optional[pulumi.Input[str]]:
        """
        The negative class label of the Custom Model.
        """
        return pulumi.get(self, "negative_class_label")

    @negative_class_label.setter
    def negative_class_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "negative_class_label", value)

    @property
    @pulumi.getter(name="overallModerationConfiguration")
    def overall_moderation_configuration(self) -> Optional[pulumi.Input['CustomModelOverallModerationConfigurationArgs']]:
        """
        The overall moderation configuration for the Custom Model.
        """
        return pulumi.get(self, "overall_moderation_configuration")

    @overall_moderation_configuration.setter
    def overall_moderation_configuration(self, value: Optional[pulumi.Input['CustomModelOverallModerationConfigurationArgs']]):
        pulumi.set(self, "overall_moderation_configuration", value)

    @property
    @pulumi.getter(name="positiveClassLabel")
    def positive_class_label(self) -> Optional[pulumi.Input[str]]:
        """
        The positive class label of the Custom Model.
        """
        return pulumi.get(self, "positive_class_label")

    @positive_class_label.setter
    def positive_class_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "positive_class_label", value)

    @property
    @pulumi.getter(name="runtimeParameterValues")
    def runtime_parameter_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelRuntimeParameterValueArgs']]]]:
        """
        The runtime parameter values for the Custom Model.
        """
        return pulumi.get(self, "runtime_parameter_values")

    @runtime_parameter_values.setter
    def runtime_parameter_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelRuntimeParameterValueArgs']]]]):
        pulumi.set(self, "runtime_parameter_values", value)

    @property
    @pulumi.getter(name="sourceLlmBlueprintId")
    def source_llm_blueprint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the source LLM Blueprint for the Custom Model.
        """
        return pulumi.get(self, "source_llm_blueprint_id")

    @source_llm_blueprint_id.setter
    def source_llm_blueprint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_llm_blueprint_id", value)

    @property
    @pulumi.getter(name="sourceRemoteRepositories")
    def source_remote_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelSourceRemoteRepositoryArgs']]]]:
        """
        The source remote repositories for the Custom Model.
        """
        return pulumi.get(self, "source_remote_repositories")

    @source_remote_repositories.setter
    def source_remote_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomModelSourceRemoteRepositoryArgs']]]]):
        pulumi.set(self, "source_remote_repositories", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of the Custom Model.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        The target type of the Custom Model.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the latest Custom Model version.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_id", value)


class CustomModel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base_environment_id: Optional[pulumi.Input[str]] = None,
                 base_environment_name: Optional[pulumi.Input[str]] = None,
                 base_environment_version_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 guard_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelGuardConfigurationArgs']]]]] = None,
                 is_proxy: Optional[pulumi.Input[bool]] = None,
                 local_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_class_label: Optional[pulumi.Input[str]] = None,
                 overall_moderation_configuration: Optional[pulumi.Input[pulumi.InputType['CustomModelOverallModerationConfigurationArgs']]] = None,
                 positive_class_label: Optional[pulumi.Input[str]] = None,
                 runtime_parameter_values: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelRuntimeParameterValueArgs']]]]] = None,
                 source_llm_blueprint_id: Optional[pulumi.Input[str]] = None,
                 source_remote_repositories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelSourceRemoteRepositoryArgs']]]]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Data set from file

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] base_environment_id: The ID of the base environment for the Custom Model.
        :param pulumi.Input[str] base_environment_name: The name of the base environment for the Custom Model.
        :param pulumi.Input[str] base_environment_version_id: The ID of the base environment version for the Custom Model.
        :param pulumi.Input[str] description: The description of the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelGuardConfigurationArgs']]]] guard_configurations: The guard configurations for the Custom Model.
        :param pulumi.Input[bool] is_proxy: The flag indicating if the Custom Model is a proxy model.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_files: The list of local file paths used to build the Custom Model.
        :param pulumi.Input[str] name: The name of the Custom Model.
        :param pulumi.Input[str] negative_class_label: The negative class label of the Custom Model.
        :param pulumi.Input[pulumi.InputType['CustomModelOverallModerationConfigurationArgs']] overall_moderation_configuration: The overall moderation configuration for the Custom Model.
        :param pulumi.Input[str] positive_class_label: The positive class label of the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelRuntimeParameterValueArgs']]]] runtime_parameter_values: The runtime parameter values for the Custom Model.
        :param pulumi.Input[str] source_llm_blueprint_id: The ID of the source LLM Blueprint for the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelSourceRemoteRepositoryArgs']]]] source_remote_repositories: The source remote repositories for the Custom Model.
        :param pulumi.Input[str] target: The target of the Custom Model.
        :param pulumi.Input[str] target_type: The target type of the Custom Model.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CustomModelArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Data set from file

        :param str resource_name: The name of the resource.
        :param CustomModelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomModelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base_environment_id: Optional[pulumi.Input[str]] = None,
                 base_environment_name: Optional[pulumi.Input[str]] = None,
                 base_environment_version_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 guard_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelGuardConfigurationArgs']]]]] = None,
                 is_proxy: Optional[pulumi.Input[bool]] = None,
                 local_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_class_label: Optional[pulumi.Input[str]] = None,
                 overall_moderation_configuration: Optional[pulumi.Input[pulumi.InputType['CustomModelOverallModerationConfigurationArgs']]] = None,
                 positive_class_label: Optional[pulumi.Input[str]] = None,
                 runtime_parameter_values: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelRuntimeParameterValueArgs']]]]] = None,
                 source_llm_blueprint_id: Optional[pulumi.Input[str]] = None,
                 source_remote_repositories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelSourceRemoteRepositoryArgs']]]]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomModelArgs.__new__(CustomModelArgs)

            __props__.__dict__["base_environment_id"] = base_environment_id
            __props__.__dict__["base_environment_name"] = base_environment_name
            __props__.__dict__["base_environment_version_id"] = base_environment_version_id
            __props__.__dict__["description"] = description
            __props__.__dict__["guard_configurations"] = guard_configurations
            __props__.__dict__["is_proxy"] = is_proxy
            __props__.__dict__["local_files"] = local_files
            __props__.__dict__["name"] = name
            __props__.__dict__["negative_class_label"] = negative_class_label
            __props__.__dict__["overall_moderation_configuration"] = overall_moderation_configuration
            __props__.__dict__["positive_class_label"] = positive_class_label
            __props__.__dict__["runtime_parameter_values"] = runtime_parameter_values
            __props__.__dict__["source_llm_blueprint_id"] = source_llm_blueprint_id
            __props__.__dict__["source_remote_repositories"] = source_remote_repositories
            __props__.__dict__["target"] = target
            __props__.__dict__["target_type"] = target_type
            __props__.__dict__["version_id"] = None
        super(CustomModel, __self__).__init__(
            'datarobot:index/customModel:CustomModel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            base_environment_id: Optional[pulumi.Input[str]] = None,
            base_environment_name: Optional[pulumi.Input[str]] = None,
            base_environment_version_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            guard_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelGuardConfigurationArgs']]]]] = None,
            is_proxy: Optional[pulumi.Input[bool]] = None,
            local_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            negative_class_label: Optional[pulumi.Input[str]] = None,
            overall_moderation_configuration: Optional[pulumi.Input[pulumi.InputType['CustomModelOverallModerationConfigurationArgs']]] = None,
            positive_class_label: Optional[pulumi.Input[str]] = None,
            runtime_parameter_values: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelRuntimeParameterValueArgs']]]]] = None,
            source_llm_blueprint_id: Optional[pulumi.Input[str]] = None,
            source_remote_repositories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelSourceRemoteRepositoryArgs']]]]] = None,
            target: Optional[pulumi.Input[str]] = None,
            target_type: Optional[pulumi.Input[str]] = None,
            version_id: Optional[pulumi.Input[str]] = None) -> 'CustomModel':
        """
        Get an existing CustomModel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] base_environment_id: The ID of the base environment for the Custom Model.
        :param pulumi.Input[str] base_environment_name: The name of the base environment for the Custom Model.
        :param pulumi.Input[str] base_environment_version_id: The ID of the base environment version for the Custom Model.
        :param pulumi.Input[str] description: The description of the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelGuardConfigurationArgs']]]] guard_configurations: The guard configurations for the Custom Model.
        :param pulumi.Input[bool] is_proxy: The flag indicating if the Custom Model is a proxy model.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_files: The list of local file paths used to build the Custom Model.
        :param pulumi.Input[str] name: The name of the Custom Model.
        :param pulumi.Input[str] negative_class_label: The negative class label of the Custom Model.
        :param pulumi.Input[pulumi.InputType['CustomModelOverallModerationConfigurationArgs']] overall_moderation_configuration: The overall moderation configuration for the Custom Model.
        :param pulumi.Input[str] positive_class_label: The positive class label of the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelRuntimeParameterValueArgs']]]] runtime_parameter_values: The runtime parameter values for the Custom Model.
        :param pulumi.Input[str] source_llm_blueprint_id: The ID of the source LLM Blueprint for the Custom Model.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomModelSourceRemoteRepositoryArgs']]]] source_remote_repositories: The source remote repositories for the Custom Model.
        :param pulumi.Input[str] target: The target of the Custom Model.
        :param pulumi.Input[str] target_type: The target type of the Custom Model.
        :param pulumi.Input[str] version_id: The ID of the latest Custom Model version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomModelState.__new__(_CustomModelState)

        __props__.__dict__["base_environment_id"] = base_environment_id
        __props__.__dict__["base_environment_name"] = base_environment_name
        __props__.__dict__["base_environment_version_id"] = base_environment_version_id
        __props__.__dict__["description"] = description
        __props__.__dict__["guard_configurations"] = guard_configurations
        __props__.__dict__["is_proxy"] = is_proxy
        __props__.__dict__["local_files"] = local_files
        __props__.__dict__["name"] = name
        __props__.__dict__["negative_class_label"] = negative_class_label
        __props__.__dict__["overall_moderation_configuration"] = overall_moderation_configuration
        __props__.__dict__["positive_class_label"] = positive_class_label
        __props__.__dict__["runtime_parameter_values"] = runtime_parameter_values
        __props__.__dict__["source_llm_blueprint_id"] = source_llm_blueprint_id
        __props__.__dict__["source_remote_repositories"] = source_remote_repositories
        __props__.__dict__["target"] = target
        __props__.__dict__["target_type"] = target_type
        __props__.__dict__["version_id"] = version_id
        return CustomModel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="baseEnvironmentId")
    def base_environment_id(self) -> pulumi.Output[str]:
        """
        The ID of the base environment for the Custom Model.
        """
        return pulumi.get(self, "base_environment_id")

    @property
    @pulumi.getter(name="baseEnvironmentName")
    def base_environment_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the base environment for the Custom Model.
        """
        return pulumi.get(self, "base_environment_name")

    @property
    @pulumi.getter(name="baseEnvironmentVersionId")
    def base_environment_version_id(self) -> pulumi.Output[str]:
        """
        The ID of the base environment version for the Custom Model.
        """
        return pulumi.get(self, "base_environment_version_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the Custom Model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="guardConfigurations")
    def guard_configurations(self) -> pulumi.Output[Optional[Sequence['outputs.CustomModelGuardConfiguration']]]:
        """
        The guard configurations for the Custom Model.
        """
        return pulumi.get(self, "guard_configurations")

    @property
    @pulumi.getter(name="isProxy")
    def is_proxy(self) -> pulumi.Output[Optional[bool]]:
        """
        The flag indicating if the Custom Model is a proxy model.
        """
        return pulumi.get(self, "is_proxy")

    @property
    @pulumi.getter(name="localFiles")
    def local_files(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of local file paths used to build the Custom Model.
        """
        return pulumi.get(self, "local_files")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Custom Model.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="negativeClassLabel")
    def negative_class_label(self) -> pulumi.Output[Optional[str]]:
        """
        The negative class label of the Custom Model.
        """
        return pulumi.get(self, "negative_class_label")

    @property
    @pulumi.getter(name="overallModerationConfiguration")
    def overall_moderation_configuration(self) -> pulumi.Output[Optional['outputs.CustomModelOverallModerationConfiguration']]:
        """
        The overall moderation configuration for the Custom Model.
        """
        return pulumi.get(self, "overall_moderation_configuration")

    @property
    @pulumi.getter(name="positiveClassLabel")
    def positive_class_label(self) -> pulumi.Output[Optional[str]]:
        """
        The positive class label of the Custom Model.
        """
        return pulumi.get(self, "positive_class_label")

    @property
    @pulumi.getter(name="runtimeParameterValues")
    def runtime_parameter_values(self) -> pulumi.Output[Sequence['outputs.CustomModelRuntimeParameterValue']]:
        """
        The runtime parameter values for the Custom Model.
        """
        return pulumi.get(self, "runtime_parameter_values")

    @property
    @pulumi.getter(name="sourceLlmBlueprintId")
    def source_llm_blueprint_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the source LLM Blueprint for the Custom Model.
        """
        return pulumi.get(self, "source_llm_blueprint_id")

    @property
    @pulumi.getter(name="sourceRemoteRepositories")
    def source_remote_repositories(self) -> pulumi.Output[Optional[Sequence['outputs.CustomModelSourceRemoteRepository']]]:
        """
        The source remote repositories for the Custom Model.
        """
        return pulumi.get(self, "source_remote_repositories")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output[Optional[str]]:
        """
        The target of the Custom Model.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[Optional[str]]:
        """
        The target type of the Custom Model.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[str]:
        """
        The ID of the latest Custom Model version.
        """
        return pulumi.get(self, "version_id")

