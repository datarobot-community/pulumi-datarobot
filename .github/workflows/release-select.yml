name: Release-select
on:
  workflow_dispatch:
    inputs:
      PUBLISH_PYPI:
        description: 'Publish to PyPI'
        required: false
        default: 'true'
      PUBLISH_NPM:
        description: 'Publish to NPM'
        required: false
        default: 'true'
      PUBLISH_NUGET:
        description: 'Publish to NuGet'
        required: false
        default: 'true'
      SDK_LANGUAGE:
        description: 'SDK language to release (nodejs, python, dotnet, go)'
        required: true
        default: 'python'
      USE_EXISTING_RELEASE:
        description: 'Use existing GoReleaser artifacts (skip build/release)'
        required: false
        default: 'false'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_AUTH_TOKEN:  ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_REGISTRY_URL: https://registry.npmjs.org
  PUBLISH_NPM: ${{ github.event.inputs.PUBLISH_NPM || 'true' }}
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}
  NUGET_FEED_URL: https://api.nuget.org/v3/index.json
  PUBLISH_NUGET: ${{ github.event.inputs.PUBLISH_NUGET || 'true' }}
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  PYPI_USERNAME: __token__
  PUBLISH_PYPI: ${{ github.event.inputs.PUBLISH_PYPI || 'true' }}
  SIGNING_KEY: ${{ secrets.JAVA_SIGNING_KEY }}
  SIGNING_KEY_ID: ${{ secrets.JAVA_SIGNING_KEY_ID }}
  SIGNING_PASSWORD: ${{ secrets.JAVA_SIGNING_PASSWORD }}

jobs:
  release_sdk:
    name: Release Selected SDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version: 1.22.x
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v2.1.0
        with:
          repo: pulumi/pulumictl
      - name: Set PreRelease Version
        run: echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version --language generic)" >> $GITHUB_ENV

      - name: Download latest release artifacts
        if: ${{ github.event.inputs.USE_EXISTING_RELEASE == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download --repo ${{ github.repository }} --pattern "pulumi-resource-datarobot-*" --dir ./release-assets

      - name: Setup Python
        if: ${{ github.event.inputs.SDK_LANGUAGE == 'python' && env.PUBLISH_PYPI == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build SDK
        run: make build_${{ github.event.inputs.SDK_LANGUAGE }}

      - name: Check worktree clean
        run: |
          git update-index -q --refresh
          if ! git diff-files --quiet; then
              >&2 echo "error: working tree is not clean, aborting!"
              git status
              git diff
              exit 1
          fi

      - name: Release with GoReleaser
        if: ${{ github.event.inputs.USE_EXISTING_RELEASE != 'true' }}
        uses: goreleaser/goreleaser-action@v2
        with:
          args: release --clean
          version: latest

      - name: Publish Python SDK
        if: ${{ github.event.inputs.SDK_LANGUAGE == 'python' && env.PUBLISH_PYPI == 'true' }}
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: ${{ env.PYPI_USERNAME }}
          password: ${{ env.PYPI_PASSWORD }}
          packages-dir: ${{github.workspace}}/sdk/python/bin/dist

      - name: Publish JS SDK
        if: ${{ github.event.inputs.SDK_LANGUAGE == 'nodejs' && env.PUBLISH_NPM == 'true' }}
        uses: JS-DevTools/npm-publish@v3.1.1
        with:
          access: "public"
          token: ${{ env.NPM_TOKEN }}
          package: ${{github.workspace}}/sdk/nodejs/bin/package.json
          provenance: true

      - name: Publish .NET SDK
        if: ${{ github.event.inputs.SDK_LANGUAGE == 'dotnet' && env.PUBLISH_NUGET == 'true' }}
        run: |
          dotnet nuget push ${{github.workspace}}/sdk/dotnet/bin/Debug/*.nupkg -s ${{ env.NUGET_FEED_URL }} -k ${{ env.NUGET_PUBLISH_KEY }}
          echo "done publishing packages"
