name: Test Release (Test PyPI)
'on':
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (e.g., v0.10.22-test1)'
        required: true
        type: string
  push:
    branches:
      - 'test-release/*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Test PyPI configuration
  PYPI_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
  PYPI_USERNAME: __token__
  PYPI_REPOSITORY_URL: https://test.pypi.org/legacy/
  PUBLISH_PYPI: true

  # Test NPM configuration (if you have a test npm registry)
  NODE_AUTH_TOKEN: ${{ secrets.TEST_NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.TEST_NPM_TOKEN }}
  NPM_REGISTRY_URL: https://registry.npmjs.org
  PUBLISH_NPM: false  # Set to true if you want to test NPM as well

  # Test NuGet configuration
  NUGET_PUBLISH_KEY: ${{ secrets.TEST_NUGET_PUBLISH_KEY }}
  NUGET_FEED_URL: https://apiint.nugettest.org/v3/index.json
  PUBLISH_NUGET: false  # Set to true if you want to test NuGet as well

jobs:
  test_build:
    name: Test Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        goversion:
        - 1.22.x

    steps:
    - name: Checkout Repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Unshallow clone for tags
      run: git fetch --prune --unshallow --tags

    - name: Install Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ${{matrix.goversion}}

    - name: Install pulumictl
      uses: jaxxstorm/action-install-gh-release@6096f2a2bbfee498ced520b6922ac2c06e990ed2
      with:
        repo: pulumi/pulumictl

    - name: Set test version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TEST_VERSION="${{ github.event.inputs.version }}"
        else
          # Generate test version from branch name and commit
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION_NUMBER=${CURRENT_VERSION#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBER"
          NEXT_PATCH=$((PATCH + 1))
          TEST_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}-${BRANCH_NAME//\//-}-${SHORT_SHA}"
        fi
        echo "TEST_VERSION=$TEST_VERSION" >> $GITHUB_ENV
        echo "Testing with version: $TEST_VERSION"

    - name: Generate test READMEs
      run: |
        if [[ -f "./build-readme.sh" ]]; then
          chmod +x ./build-readme.sh
          VERSION="$TEST_VERSION" ./build-readme.sh
        fi

    - name: Build test binary
      run: |
        echo "GORELEASER_CURRENT_TAG=$TEST_VERSION" >> $GITHUB_ENV
        # Test build without actual release
        make build

  test_sdk_build:
    name: Test SDK Build and Publish
    runs-on: ubuntu-latest
    needs: test_build
    strategy:
      fail-fast: false
      matrix:
        dotnetversion:
          - 3.1.301
        goversion:
          - 1.21
        language:
          - python  # Only test Python for now
        nodeversion:
          - 20
        pythonversion:
          - "3.10"

    steps:
      - name: Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags

      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ matrix.goversion }}

      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@6096f2a2bbfee498ced520b6922ac2c06e990ed2 # v2.1.0
        with:
          repo: pulumi/pulumictl

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@b374ceb6168550de27c6eba92e01c1a774040e11 # tag=v2.0.0

      - name: Setup Node
        if: ${{ matrix.language == 'nodejs' }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{matrix.nodeversion}}
          registry-url: ${{env.NPM_REGISTRY_URL}}

      - name: Setup DotNet
        if: ${{ matrix.language == 'dotnet' }}
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: ${{matrix.dotnetversion}}

      - name: Setup Python
        if: ${{ matrix.language == 'python' }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{matrix.pythonversion}}

      - name: Set test version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TEST_VERSION="${{ github.event.inputs.version }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
            SHORT_SHA="${{ github.sha }}"
            SHORT_SHA="${SHORT_SHA:0:7}"
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            VERSION_NUMBER=${CURRENT_VERSION#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBER"
            NEXT_PATCH=$((PATCH + 1))
            TEST_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}-${BRANCH_NAME//\//-}-${SHORT_SHA}"
          fi
          echo "TEST_VERSION=$TEST_VERSION" >> $GITHUB_ENV
          echo "Testing with version: $TEST_VERSION"

      - name: Generate test READMEs
        run: |
          if [[ -f "./build-readme.sh" ]]; then
            chmod +x ./build-readme.sh
            VERSION="$TEST_VERSION" ./build-readme.sh
          fi

      - name: Build SDK
        run: make build_${{ matrix.language }}

      - name: Check worktree clean
        run: |
          git update-index -q --refresh
          if ! git diff-files --quiet; then
              echo "Working tree is not clean after build:"
              git status
              git diff
              echo "This might indicate issues with the build process."
              # Don't fail for test builds, just warn
          fi

      - if: ${{ matrix.language == 'python' && env.PUBLISH_PYPI == 'true' }}
        name: Publish test package to Test PyPI
        uses: pypa/gh-action-pypi-publish@ab69e431e9c9f48a3310be0a56527c679f56e04d # v1.12.4
        with:
          user: ${{ env.PYPI_USERNAME }}
          password: ${{ env.PYPI_PASSWORD }}
          repository_url: ${{ env.PYPI_REPOSITORY_URL }}
          packages_dir: ${{github.workspace}}/sdk/python/bin/dist
          skip_existing: true

  test_installation:
    name: Test Installation from Test PyPI
    runs-on: ubuntu-latest
    needs: test_sdk_build
    if: ${{ needs.test_sdk_build.result == 'success' }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"

      - name: Wait for package availability
        run: |
          echo "Waiting 60 seconds for package to be available on Test PyPI..."
          sleep 60

      - name: Test install from Test PyPI
        run: |
          # Install from test PyPI
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ pulumi-datarobot

          # Basic import test
          python -c "
          try:
              import pulumi_datarobot
              print('✅ Package imported successfully')
              print(f'Package version: {pulumi_datarobot.__version__ if hasattr(pulumi_datarobot, \"__version__\") else \"unknown\"}')
          except ImportError as e:
              print(f'❌ Failed to import package: {e}')
              exit(1)
          "

  notify_result:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [test_build, test_sdk_build, test_installation]
    if: always()
    steps:
      - name: Determine overall result
        id: result
        run: |
          if [[ "${{ needs.test_build.result }}" == "success" &&
                "${{ needs.test_sdk_build.result }}" == "success" &&
                "${{ needs.test_installation.result }}" == "success" ]]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "message=✅ All test release checks passed!" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Test release checks failed. Check the logs for details." >> $GITHUB_OUTPUT
          fi

      - name: Summary
        run: |
          echo "## Test Release Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.result.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Test Build: ${{ needs.test_build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test SDK Build: ${{ needs.test_sdk_build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Installation: ${{ needs.test_installation.result }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "- Test Version: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi
